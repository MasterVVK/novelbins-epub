#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ "ÊàëÊ¨≤Â∞ÅÂ§©" (I Shall Seal the Heavens)
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫ EPUB —Ñ–∞–π–ª—É
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from translation_templates.issth_template import ISSTH_TEMPLATE_CONFIG, ISSTH_TRANSLATION_PROMPT
from parsers.sources.epub_parser import EPUBParser

def demonstrate_issth_template():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –¥–ª—è ISSTH"""
    
    print("=" * 80)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –®–ê–ë–õ–û–ù–ê: –Ø –•–û–ß–£ –ó–ê–ü–ï–ß–ê–¢–ê–¢–¨ –ù–ï–ë–ï–°–ê")
    print("=" * 80)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–µ
    config = ISSTH_TEMPLATE_CONFIG
    print(f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {config['name']}")
    print(f"üî§ –û—Ä–∏–≥–∏–Ω–∞–ª: {config['original_title']}")
    print(f"üá¨üáß English: {config['english_title']}")
    print(f"üá∑üá∫ –†—É—Å—Å–∫–∏–π: {config['russian_title']}")
    print(f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {config['author']}")
    print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {config['category']}")
    print(f"üë§ –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π: {config['main_character']}")
    print(f"üåç –°–µ—Ç—Ç–∏–Ω–≥: {config['setting']}")
    
    print("\nüéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
    for element in config['unique_elements']:
        print(f"  ‚Ä¢ {element}")
    
    print("\n" + "=" * 80)
    print("–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ü–ï–†–ï–í–û–î–ê")
    print("=" * 80)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è AI
    print(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {config['temperature']}")
    print(f"üìè –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {config['max_tokens']}")
    
    # –ü—É—Ç—å –∫ EPUB —Ñ–∞–π–ª—É
    epub_path = "/home/user/novelbins-epub/web_app/instance/epub_files/qinkan.net.epub"
    
    if os.path.exists(epub_path):
        print(f"\nüìñ EPUB —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {epub_path}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –Ω–æ–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º
        print("\n" + "-" * 60)
        print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–ê–†–°–ò–ù–ì–ê –ü–ï–†–í–´–• 3 –ì–õ–ê–í")
        print("-" * 60)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ 3 –≥–ª–∞–≤—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            parser = EPUBParser(epub_path=epub_path, max_chapters=3)
            
            if parser.load_epub(epub_path):
                book_info = parser.get_book_info()
                chapters = parser.get_chapter_list()
                
                print(f"üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ:")
                print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {book_info.get('title', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}")
                print(f"  –ê–≤—Ç–æ—Ä: {book_info.get('author', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
                print(f"  –í—Å–µ–≥–æ –≥–ª–∞–≤ –≤ —Ñ–∞–π–ª–µ: {book_info.get('total_chapters', 0)}")
                print(f"  –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {len(chapters)}")
                
                print(f"\nüìë –ü–µ—Ä–≤—ã–µ {len(chapters)} –≥–ª–∞–≤:")
                for i, chapter in enumerate(chapters, 1):
                    title = chapter.get('title', f"–ì–ª–∞–≤–∞ {chapter.get('number')}")
                    print(f"  {i}. {title} (~{chapter.get('word_count', 0)} —Å–ª–æ–≤)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã
                if chapters:
                    first_chapter = parser.get_chapter_content(chapters[0]['chapter_id'])
                    content_preview = first_chapter['content'][:300] + "..." if len(first_chapter['content']) > 300 else first_chapter['content']
                    
                    print(f"\nüìÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã:")
                    print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {first_chapter['title']}")
                    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {first_chapter['word_count']}")
                    print(f"üìñ –ù–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")
                    print("-" * 40)
                    print(content_preview)
                    print("-" * 40)
                
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å EPUB —Ñ–∞–π–ª")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    else:
        print(f"\n‚ùå EPUB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {epub_path}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    
    print("\n" + "=" * 80)
    print("–ü–†–ò–ú–ï–† –ü–†–û–ú–ü–¢–ê –î–õ–Ø –ü–ï–†–ï–í–û–î–ê")
    print("=" * 80)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–º–ø—Ç–∞
    prompt_lines = ISSTH_TRANSLATION_PROMPT.split('\n')[:30]  # –ü–µ—Ä–≤—ã–µ 30 —Å—Ç—Ä–æ–∫
    print('\n'.join(prompt_lines))
    print("...")
    print("[–ü—Ä–æ–º–ø—Ç —Å–æ–∫—Ä–∞—â–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏]")
    
    print("\n" + "=" * 80)
    print("–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
    print("=" * 80)
    
    instructions = """
    1. üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ EPUB —Ñ–∞–π–ª "ÊàëÊ¨≤Â∞ÅÂ§©" –≤ —Å–∏—Å—Ç–µ–º—É
    2. üéØ –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω "–°—è–Ω—å—Å—è (–Ø —Ö–æ—á—É –∑–∞–ø–µ—á–∞—Ç–∞—Ç—å –Ω–µ–±–µ—Å–∞)"
    3. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
       ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 0.1 (–¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
       ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: 24000
       ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –≥–ª–∞–≤: –ø–æ –∂–µ–ª–∞–Ω–∏—é
    4. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞
    5. ‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏
    6. üìö –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π EPUB
    
    üéØ –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞:
    ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å—Ç–∏–ª—è –∞–≤—Ç–æ—Ä–∞ Ergen
    ‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫—É—é –≥–ª—É–±–∏–Ω—É –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–ª—Ö–∏–º–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
    ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Ä–æ–º–∞–Ω–∞
    """
    
    print(instructions)
    
    print("\n" + "=" * 80)
    print("–ó–ê–í–ï–†–®–ï–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
    print("=" * 80)

def load_glossary():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ—Å—Å–∞—Ä–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    glossary_path = Path(__file__).parent / "issth_glossary.json"
    
    if glossary_path.exists():
        with open(glossary_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        print(f"‚ö†Ô∏è –ì–ª–æ—Å—Å–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {glossary_path}")
        return {}

def show_glossary_sample():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –≥–ª–æ—Å—Å–∞—Ä–∏—è"""
    print("\n" + "=" * 80)
    print("–û–ë–†–ê–ó–¶–´ –ò–ó –ì–õ–û–°–°–ê–†–ò–Ø")
    print("=" * 80)
    
    glossary = load_glossary()
    
    if glossary:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        print("üë• –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:")
        for chinese, russian in glossary.get('main_characters', {}).items():
            print(f"   {chinese} ‚Üí {russian}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        print("\nüèîÔ∏è –ö–ª—é—á–µ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏:")
        for chinese, russian in list(glossary.get('locations', {}).items())[:5]:
            print(f"   {chinese} ‚Üí {russian}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏
        print("\n‚ö° –£—Ä–æ–≤–Ω–∏ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏:")
        for chinese, russian in list(glossary.get('cultivation_levels', {}).items())[:5]:
            print(f"   {chinese} ‚Üí {russian}")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã ISSTH
        print("\nüîÆ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã ISSTH:")
        for chinese, russian in glossary.get('unique_issth_terms', {}).items():
            print(f"   {chinese} ‚Üí {russian}")

if __name__ == "__main__":
    demonstrate_issth_template()
    show_glossary_sample()