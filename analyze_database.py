#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –≥–ª–∞–≤–∞–º–∏
"""

import sqlite3
import re
from collections import Counter

def analyze_database():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –≥–ª–∞–≤–∞–º–∏"""
    
    db_path = "web_app/instance/novel_translator.db"
    
    print(f"–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    print("=" * 80)
    
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM chapters")
        total_chapters = cursor.fetchone()[0]
        print(f"üìö –í—Å–µ–≥–æ –≥–ª–∞–≤ –≤ –±–∞–∑–µ: {total_chapters}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        cursor.execute("""
            SELECT status, COUNT(*) as count 
            FROM chapters 
            GROUP BY status
            ORDER BY count DESC
        """)
        statuses = cursor.fetchall()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status in statuses:
            print(f"  - {status['status']}: {status['count']} –≥–ª–∞–≤")
        
        # –ò—â–µ–º –∫–∏—Ç–∞–π—Å–∫–∏–µ –≥–ª–∞–≤—ã (–ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)
        print(f"\nüîç –ü–û–ò–°–ö –ö–ò–¢–ê–ô–°–ö–ò–• –ì–õ–ê–í")
        print("-" * 50)
        
        cursor.execute("""
            SELECT chapter_number, original_title, original_text, status,
                   LENGTH(original_text) as text_length
            FROM chapters 
            WHERE original_text IS NOT NULL 
                AND LENGTH(original_text) > 1000
                AND (original_title LIKE '%Á´†%' OR original_text LIKE '%Â≠üÊµ©%')
            ORDER BY chapter_number 
            LIMIT 15
        """)
        
        chinese_chapters = cursor.fetchall()
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –≥–ª–∞–≤ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {len(chinese_chapters)}")
        
        if chinese_chapters:
            print(f"\n–ü–µ—Ä–≤—ã–µ 10 –∫–∏—Ç–∞–π—Å–∫–∏—Ö –≥–ª–∞–≤:")
            all_content = ""
            
            for i, chapter in enumerate(chinese_chapters[:10], 1):
                title = chapter['original_title'] or f"Á¨¨{chapter['chapter_number']}Á´†"
                content = chapter['original_text'] or ""
                
                # –ü–æ–¥—Å—á–µ—Ç –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                chinese_chars = len(re.findall(r'[\u4e00-\u9fff]', content))
                chinese_ratio = chinese_chars / len(content) if len(content) > 0 else 0
                
                print(f"\n{i}. {title}")
                print(f"   –ù–æ–º–µ—Ä –≥–ª–∞–≤—ã: {chapter['chapter_number']}")
                print(f"   –°—Ç–∞—Ç—É—Å: {chapter['status']}")
                print(f"   –î–ª–∏–Ω–∞: {chapter['text_length']} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã: {chinese_chars} ({chinese_ratio:.1%})")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –≥–ª–∞–≤—ã
                preview = content[:200].replace('\n', ' ').strip()
                print(f"   –ù–∞—á–∞–ª–æ: {preview}{'...' if len(content) > 200 else ''}")
                
                all_content += "\n\n" + content
            
            if all_content.strip():
                print(f"\nüé® –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ò–ú–û–ì–û –ü–ï–†–í–´–• 10 –ì–õ–ê–í")
                print("-" * 50)
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞
                total_chars = len(all_content)
                chinese_chars = len(re.findall(r'[\u4e00-\u9fff]', all_content))
                
                print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_chars:,}")
                print(f"–ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã: {chinese_chars:,} ({chinese_chars/total_chars*100:.1f}%)")
                
                # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                print(f"\nüë• –û–°–ù–û–í–ù–´–ï –ü–ï–†–°–û–ù–ê–ñ–ò")
                print("-" * 30)
                
                main_characters = {
                    'Â≠üÊµ©': '–ú—ç–Ω –•–∞–æ (–≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π)',
                    'ËÆ∏Â∏àÂßê': '–°–µ—Å—Ç—Ä–∞ –°—é (–Ω–∞—Å—Ç–∞–≤–Ω–∏—Ü–∞)',
                    'ÁéãËÖæÈ£û': '–í–∞–Ω –¢—ç–Ω—Ñ—ç–π',
                    '‰∏äÂÆò‰øÆ': '–®–∞–Ω–≥—É–∞–Ω—å –°—é',
                    'ËµµÊ≠¶Âàö': '–ß–∂–∞–æ –£–≥–∞–Ω',
                    'Èü©ÂÆó': '–•–∞–Ω—å –¶–∑—É–Ω',
                    'Â∞èËÉñÂ≠ê': '–ú–∞–ª–µ–Ω—å–∫–∏–π —Ç–æ–ª—Å—Ç—è–∫',
                    'ËôéÁà∑': '–î–µ–¥—É—à–∫–∞ –•—É',
                    'ÊõπÈò≥': '–¶–∞–æ –Ø–Ω'
                }
                
                for char, description in main_characters.items():
                    count = all_content.count(char)
                    if count > 0:
                        print(f"  - {char} ({description}): {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                
                # –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞—Ü–∏–π
                print(f"\nüèîÔ∏è –û–°–ù–û–í–ù–´–ï –õ–û–ö–ê–¶–ò–ò")
                print("-" * 30)
                
                locations = {
                    'Èù†Â±±ÂÆó': '–°–µ–∫—Ç–∞ –û–ø–æ—Ä—ã –Ω–∞ –ì–æ—Ä—É (–≥–ª–∞–≤–Ω–∞—è —Å–µ–∫—Ç–∞)',
                    'ËµµÂõΩ': '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –ß–∂–∞–æ',
                    'ÂçóÂüü': '–Æ–∂–Ω—ã–π —Ä–µ–≥–∏–æ–Ω',
                    '‰∏úÂúü': '–í–æ—Å—Ç–æ—á–Ω–∞—è –∑–µ–º–ª—è',
                    'Â§ßÂîê': '–í–µ–ª–∏–∫–∞—è –¢–∞–Ω',
                    'ÈïøÂÆâ': '–ß–∞–Ω–∞–Ω—å (—Å—Ç–æ–ª–∏—Ü–∞)',
                    'Â§ßÈùíÂ±±': '–ë–æ–ª—å—à–∞—è –∑–µ–ª–µ–Ω–∞—è –≥–æ—Ä–∞',
                    'ÂÆùÈòÅ': '–ó–∞–ª —Å–æ–∫—Ä–æ–≤–∏—â',
                    'Ê¥ûÂ∫ú': '–ü–µ—â–µ—Ä–Ω–∞—è —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏—è'
                }
                
                for location, description in locations.items():
                    count = all_content.count(location)
                    if count > 0:
                        print(f"  - {location} ({description}): {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                
                # –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏
                print(f"\n‚öîÔ∏è –¢–ï–†–ú–ò–ù–´ –ö–£–õ–¨–¢–ò–í–ê–¶–ò–ò")
                print("-" * 30)
                
                cultivation_terms = {
                    'ÂáùÊ∞î': '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏—è —Ü–∏ (—É—Ä–æ–≤–µ–Ω—å –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏)',
                    '‰øÆ‰∏∫': '–£—Ä–æ–≤–µ–Ω—å –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏',
                    'ÁÅµÁü≥': '–î—É—Ö–æ–≤–Ω—ã–µ –∫–∞–º–Ω–∏ (–≤–∞–ª—é—Ç–∞)',
                    '‰∏πËçØ': '–ü–∏–ª—é–ª–∏ (–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è)',
                    'ÂÜÖÈó®': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–µ–∫—Ç–∞',
                    'Â§ñÂÆó': '–í–Ω–µ—à–Ω—è—è —Å–µ–∫—Ç–∞',
                    'ÊùÇÂΩπ': '–ß–µ—Ä–Ω–æ—Ä–∞–±–æ—á–∏–µ',
                    'ÈïøËÄÅ': '–°—Ç–∞—Ä–µ–π—à–∏–Ω–∞',
                    'ÂºüÂ≠ê': '–£—á–µ–Ω–∏–∫',
                    'Â∏àÂÖÑ': '–°—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç –ø–æ —É—á–µ–Ω–∏—é',
                    'Â∏àÂßê': '–°—Ç–∞—Ä—à–∞—è —Å–µ—Å—Ç—Ä–∞ –ø–æ —É—á–µ–Ω–∏—é',
                    '‰ªô‰∫∫': '–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π',
                    'ÂÇ®Áâ©Ë¢ã': '–°—É–º–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è',
                    'ÈìúÈïú': '–ú–µ–¥–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ (–∞—Ä—Ç–µ—Ñ–∞–∫—Ç)'
                }
                
                for term, description in cultivation_terms.items():
                    count = all_content.count(term)
                    if count > 0:
                        print(f"  - {term} ({description}): {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                
                # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞
                print(f"\nüìù –°–¢–ò–õ–¨ –¢–ï–ö–°–¢–ê")
                print("-" * 30)
                
                # –ü–æ–¥—Å—á–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤
                dialogue_count = len(re.findall(r'[""„Äå„Äç„Äé„Äè].+?[""„Äå„Äç„Äé„Äè]', all_content))
                sentences = len(re.findall(r'[„ÄÇÔºÅÔºü]', all_content))
                
                print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {sentences}")
                print(f"–î–∏–∞–ª–æ–≥–∏: {dialogue_count}")
                print(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤: {dialogue_count/sentences*100:.1f}%" if sentences > 0 else "")
                
                # –ê–Ω–∞–ª–∏–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
                punctuation = {
                    '„ÄÇ': '–¢–æ—á–∫–∏',
                    'ÔºÅ': '–í–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è',
                    'Ôºü': '–í–æ–ø—Ä–æ—Å—ã',
                    'Ôºå': '–ó–∞–ø—è—Ç—ã–µ',
                    '‚Ä¶‚Ä¶': '–ú–Ω–æ–≥–æ—Ç–æ—á–∏—è'
                }
                
                print(f"\n–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è:")
                for punct, name in punctuation.items():
                    count = all_content.count(punct)
                    if count > 0:
                        print(f"  - {name} ({punct}): {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        print(f"\nüåç –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–í–û–î–û–í")
        print("-" * 50)
        
        cursor.execute("""
            SELECT COUNT(*) 
            FROM translations 
            WHERE translated_text IS NOT NULL
        """)
        translated_count = cursor.fetchone()[0]
        print(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {translated_count}")
        
        if translated_count > 0:
            cursor.execute("""
                SELECT t.original_text, t.translated_text, c.chapter_number
                FROM translations t
                JOIN chapters c ON t.chapter_id = c.id
                WHERE t.translated_text IS NOT NULL
                ORDER BY c.chapter_number
                LIMIT 5
            """)
            
            translations = cursor.fetchall()
            print(f"\n–ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤:")
            for i, trans in enumerate(translations, 1):
                orig_preview = trans['original_text'][:100] if trans['original_text'] else ""
                trans_preview = trans['translated_text'][:100] if trans['translated_text'] else ""
                print(f"\n{i}. –ì–ª–∞–≤–∞ {trans['chapter_number']}")
                print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {orig_preview}...")
                print(f"   –ü–µ—Ä–µ–≤–æ–¥: {trans_preview}...")
        
        conn.close()
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    analyze_database()