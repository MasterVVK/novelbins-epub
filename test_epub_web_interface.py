#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ EPUB
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ web_app
web_app_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'web_app')
sys.path.insert(0, web_app_path)

from app import create_app, db
from app.models import Novel, Chapter, Translation, Task

def test_epub_web_interface():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ EPUB"""
    app = create_app()
    
    with app.app_context():
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ EPUB...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.first()
        if not novel:
            print("‚ùå –ù–µ—Ç –Ω–æ–≤–µ–ª–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"üìñ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–µ–ª–ª–∞: {novel.title} (ID: {novel.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤–µ–ª–ª—ã
        tasks = Task.query.filter_by(novel_id=novel.id).all()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
        
        for task in tasks:
            print(f"   - {task.task_type}: {task.status} (—Å–æ–∑–¥–∞–Ω–∞: {task.created_at})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ EPUB
        epub_tasks = [t for t in tasks if t.task_type == 'generate_epub']
        print(f"üìö –ó–∞–¥–∞—á EPUB: {len(epub_tasks)}")
        
        for task in epub_tasks:
            print(f"   - EPUB –∑–∞–¥–∞—á–∞ {task.id}: {task.status}")
            if task.result:
                print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {task.result}")
            if task.error_message:
                print(f"     –û—à–∏–±–∫–∞: {task.error_message}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤—ã
        chapters = Chapter.query.filter_by(novel_id=novel.id, is_active=True).all()
        print(f"üìñ –ì–ª–∞–≤: {len(chapters)}")
        
        translated_count = 0
        for chapter in chapters:
            if chapter.current_translation:
                translated_count += 1
                print(f"   - –ì–ª–∞–≤–∞ {chapter.chapter_number}: {chapter.status}")
        
        print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤: {translated_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–π EPUB –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        completed_epub_task = Task.query.filter_by(
            novel_id=novel.id,
            task_type='generate_epub',
            status='completed'
        ).order_by(Task.updated_at.desc()).first()
        
        if completed_epub_task and completed_epub_task.result:
            epub_path = completed_epub_task.result.get('epub_path')
            if epub_path:
                epub_file = Path(epub_path)
                if epub_file.exists():
                    size_kb = epub_file.stat().st_size / 1024
                    print(f"‚úÖ –ì–æ—Ç–æ–≤—ã–π EPUB –Ω–∞–π–¥–µ–Ω: {epub_path}")
                    print(f"üìä –†–∞–∑–º–µ—Ä: {size_kb:.1f} KB")
                else:
                    print(f"‚ùå EPUB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {epub_path}")
            else:
                print("‚ùå –ü—É—Ç—å –∫ EPUB –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
        else:
            print("‚ÑπÔ∏è –ì–æ—Ç–æ–≤—ã–π EPUB –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print("\nüîó URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–µ–ª–ª—ã: http://localhost:5001/novels/{novel.id}")
        print(f"   –°–∫–∞—á–∏–≤–∞–Ω–∏–µ EPUB: http://localhost:5001/novels/{novel.id}/epub/download")

if __name__ == "__main__":
    test_epub_web_interface() 