#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Qidian –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
"""
import requests
from bs4 import BeautifulSoup

def debug_qidian_html():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    """
    print("üîç –û–¢–õ–ê–î–ö–ê HTML –°–¢–†–£–ö–¢–£–†–´ QIDIAN")
    print("=" * 50)
    
    # URL –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∫–Ω–∏–≥–∏
    book_id = "3106580"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ –ø–∞—Ä—Å–µ—Ä–µ
    headers = {
        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    session = requests.Session()
    session.headers.update(headers)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥–∏
    print(f"üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏ {book_id}...")
    book_url = f"https://m.qidian.com/book/{book_id}/"
    
    try:
        response = session.get(book_url, timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –†–∞–∑–º–µ—Ä: {len(response.content):,} –±–∞–π—Ç")
        
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
            with open(f"debug_book_{book_id}_mobile.html", "w", encoding="utf-8") as f:
                f.write(response.text)
            print(f"   ‚úÖ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_book_{book_id}_mobile.html")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            soup = BeautifulSoup(response.text, 'html.parser')
            
            print(f"\nüìã –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –°–¢–†–ê–ù–ò–¶–´ –ö–ù–ò–ì–ò:")
            
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            title_selectors = [
                '.book__title', '.book-title', 'h1.title', '.book-info__title', 
                'h1', '.title', '[class*="title"]', '.book-name', '.book__name'
            ]
            
            print("üîç –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞:")
            for selector in title_selectors:
                elements = soup.select(selector)
                if elements:
                    print(f"   ‚úÖ {selector}: {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    for i, elem in enumerate(elements[:3]):
                        text = elem.get_text(strip=True)[:50]
                        print(f"      {i+1}. '{text}'")
                else:
                    print(f"   ‚ùå {selector}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ò—â–µ–º –∞–≤—Ç–æ—Ä–∞
            print(f"\nüë§ –ü–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–∞:")
            author_selectors = [
                '.book__author', '.book-author', '.author', '.book-info__author',
                '[class*="author"]', '.writer', '.book-writer'
            ]
            
            for selector in author_selectors:
                elements = soup.select(selector)
                if elements:
                    print(f"   ‚úÖ {selector}: {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    for i, elem in enumerate(elements[:3]):
                        text = elem.get_text(strip=True)[:50]
                        print(f"      {i+1}. '{text}'")
                else:
                    print(f"   ‚ùå {selector}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–∞–º–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ book
            print(f"\nüìö –≠–ª–µ–º–µ–Ω—Ç—ã —Å 'book' –≤ –∫–ª–∞—Å—Å–∞—Ö:")
            book_elements = soup.find_all(class_=lambda x: x and 'book' in x.lower())
            for elem in book_elements[:10]:
                classes = ' '.join(elem.get('class', []))
                text = elem.get_text(strip=True)[:30]
                print(f"   .{classes}: '{text}'")
                
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≥–ª–∞–≤
    print(f"\nüìë –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –≥–ª–∞–≤...")
    catalog_url = f"https://m.qidian.com/book/{book_id}/catalog"
    
    try:
        response = session.get(catalog_url, timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –†–∞–∑–º–µ—Ä: {len(response.content):,} –±–∞–π—Ç")
        
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
            with open(f"debug_catalog_{book_id}_mobile.html", "w", encoding="utf-8") as f:
                f.write(response.text)
            print(f"   ‚úÖ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_catalog_{book_id}_mobile.html")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞
            soup = BeautifulSoup(response.text, 'html.parser')
            
            print(f"\nüìã –ê–ù–ê–õ–ò–ó –ö–ê–¢–ê–õ–û–ì–ê:")
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–ª–∞–≤—ã
            chapter_selectors = [
                'a.chapter__item', '.chapter-item a', 'a[href*="/chapter/"]',
                '.chapter a', 'a.chapter', '.catalog a', 'a[class*="chapter"]'
            ]
            
            print("üîç –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥–ª–∞–≤—ã:")
            for selector in chapter_selectors:
                elements = soup.select(selector)
                if elements:
                    print(f"   ‚úÖ {selector}: {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    for i, elem in enumerate(elements[:5]):
                        href = elem.get('href', '')
                        text = elem.get_text(strip=True)[:50]
                        print(f"      {i+1}. '{text}' -> {href}")
                else:
                    print(f"   ‚ùå {selector}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
            all_links = soup.find_all('a', href=True)
            chapter_links = [link for link in all_links if '/chapter/' in link.get('href', '')]
            print(f"\nüìä –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ —Å '/chapter/': {len(chapter_links)}")
            
            if chapter_links:
                print("üìã –ü–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥–ª–∞–≤—ã:")
                for i, link in enumerate(chapter_links[:5]):
                    href = link.get('href')
                    text = link.get_text(strip=True)
                    classes = ' '.join(link.get('class', []))
                    print(f"   {i+1}. '{text}'")
                    print(f"      href: {href}")
                    print(f"      class: {classes}")
                    print()
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüèÅ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã:")
    print(f"   - debug_book_{book_id}_mobile.html")
    print(f"   - debug_catalog_{book_id}_mobile.html")

if __name__ == "__main__":
    debug_qidian_html()