#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≥–ª–æ—Å—Å–∞—Ä–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
"""
import sys
sys.path.insert(0, '/home/user/novelbins-epub/web_app')

from app import create_app, db
from app.models import Novel, GlossaryItem
from app.services.glossary_optimizer import GlossaryOptimizer

def clean_glossary():
    """–û—á–∏—Å—Ç–∫–∞ –≥–ª–æ—Å—Å–∞—Ä–∏—è –Ω–æ–≤–µ–ª–ª—ã ISSTH"""
    
    app = create_app()
    with app.app_context():
        # –ù–∞–π—Ç–∏ –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.filter(Novel.title.like('%–∑–∞–ø–µ—á–∞—Ç–∞—Ç—å%')).first()
        
        if not novel:
            print("‚ùå –ù–æ–≤–µ–ª–ª–∞ '–Ø —Ö–æ—á—É –∑–∞–ø–µ—á–∞—Ç–∞—Ç—å –Ω–µ–±–µ—Å–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–µ–ª–ª–∞: {novel.title} (ID: {novel.id})")
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–æ –æ—á–∏—Å—Ç–∫–∏
        total_before = GlossaryItem.query.filter_by(novel_id=novel.id, is_active=True).count()
        print(f"\nüìä –¢–µ—Ä–º–∏–Ω–æ–≤ –¥–æ –æ—á–∏—Å—Ç–∫–∏: {total_before}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –≥–ª–æ—Å—Å–∞—Ä–∏—è...")
        stats = GlossaryOptimizer.optimize_novel_glossary(novel.id, auto_remove=False)
        
        print(f"  - –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(stats['to_remove'])}")
        print(f"  - –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(stats['to_keep'])}")
        print(f"  - –¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(stats['to_review'])}")
        
        # –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        for i, term in enumerate(stats['to_remove'][:10], 1):
            print(f"  {i}. [{term['category']}] {term['chinese']} ‚Üí {term['russian']}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        print(f"\n‚ö†Ô∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(stats['to_remove'])} —Ç–µ—Ä–º–∏–Ω–æ–≤")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (y/n): ")
        
        if response.lower() != 'y':
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤...")
        removed_count = GlossaryOptimizer.batch_remove_direct_translations(novel.id)
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        total_after = GlossaryItem.query.filter_by(novel_id=novel.id, is_active=True).count()
        
        print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"  - –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: {removed_count}")
        print(f"  - –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_after}")
        print(f"  - –ë—ã–ª–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {total_before - total_after}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
        categories = db.session.query(
            GlossaryItem.category,
            db.func.count(GlossaryItem.id).label('count')
        ).filter_by(
            novel_id=novel.id,
            is_active=True
        ).group_by(GlossaryItem.category).all()
        
        for category, count in categories:
            print(f"  - {category}: {count}")
        
        print("\nüí° –°–æ–≤–µ—Ç: –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ API")

if __name__ == '__main__':
    clean_glossary()