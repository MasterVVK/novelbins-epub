#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –∫–Ω–∏–≥
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""
from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Tuple
import requests
import time
import json
import os
from urllib.parse import urljoin, urlparse


class BaseParser(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–µ—Ä–æ–≤ –∫–Ω–∏–≥
    """
    
    def __init__(self, source_name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        
        Args:
            source_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "qidian", "webnovel")
        """
        self.source_name = source_name
        self.session = requests.Session()
        self.request_count = 0
        self.success_count = 0
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö)
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
    
    @abstractmethod
    def get_book_info(self, book_url: str) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        
        Args:
            book_url: URL –∫–Ω–∏–≥–∏
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–∏–≥–µ:
            {
                'title': str,
                'author': str,
                'description': str,
                'status': str,
                'genre': str,
                'book_id': str,
                'total_chapters': int
            }
        """
        pass
    
    @abstractmethod
    def get_chapter_list(self, book_url: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –∫–Ω–∏–≥–∏
        
        Args:
            book_url: URL –∫–Ω–∏–≥–∏
            
        Returns:
            List[Dict] —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–ª–∞–≤:
            [
                {
                    'number': int,
                    'title': str,
                    'url': str,
                    'chapter_id': str,
                    'word_count': int (optional)
                },
                ...
            ]
        """
        pass
    
    @abstractmethod
    def get_chapter_content(self, chapter_url: str) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã
        
        Args:
            chapter_url: URL –≥–ª–∞–≤—ã
            
        Returns:
            Dict —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –≥–ª–∞–≤—ã:
            {
                'title': str,
                'content': str,
                'chapter_id': str,
                'word_count': int (optional)
            }
        """
        pass
    
    def download_book(self, book_url: str, output_dir: str, chapter_limit: Optional[int] = None) -> Dict:
        """
        –°–∫–∞—á–∞—Ç—å –≤—Å—é –∫–Ω–∏–≥—É
        
        Args:
            book_url: URL –∫–Ω–∏–≥–∏
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            chapter_limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–ª–∞–≤ (None = –≤—Å–µ)
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        """
        print(f"üìö –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: {book_url}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        book_info = self.get_book_info(book_url)
        print(f"üìñ –ö–Ω–∏–≥–∞: {book_info['title']} - {book_info['author']}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–Ω–∏–≥–∏
        book_dir = os.path.join(output_dir, book_info['title'])
        os.makedirs(book_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        book_info_path = os.path.join(book_dir, 'book_info.json')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤
        chapters = self.get_chapter_list(book_url)
        print(f"üìë –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(chapters)}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤
        if chapter_limit:
            chapters = chapters[:chapter_limit]
            print(f"üìë –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ: {len(chapters)} –≥–ª–∞–≤")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–∞—Ö –≤ book_info
        book_info['chapters'] = chapters[:3]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        book_info['total_chapters'] = len(chapters)
        book_info['parsed_chapters'] = 0
        
        downloaded_chapters = []
        failed_chapters = []
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–ª–∞–≤—ã
        for i, chapter in enumerate(chapters, 1):
            try:
                print(f"üìÑ –ì–ª–∞–≤–∞ {i}/{len(chapters)}: {chapter['title']}")
                
                content = self.get_chapter_content(chapter['url'])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–∞–≤—É
                chapter_filename = f"chapter_{chapter['number']:03d}_{chapter['chapter_id']}.txt"
                chapter_path = os.path.join(book_dir, chapter_filename)
                
                with open(chapter_path, 'w', encoding='utf-8') as f:
                    f.write(f"{content['title']}\n")
                    f.write("=" * 60 + "\n\n")
                    f.write(content['content'])
                
                downloaded_chapters.append(chapter)
                book_info['parsed_chapters'] += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º book_info –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã
                with open(book_info_path, 'w', encoding='utf-8') as f:
                    json.dump(book_info, f, ensure_ascii=False, indent=2)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                self._delay_between_requests()
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–ª–∞–≤—ã {chapter['title']}: {e}")
                failed_chapters.append({'chapter': chapter, 'error': str(e)})
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'book_info': book_info,
            'downloaded_chapters': len(downloaded_chapters),
            'failed_chapters': len(failed_chapters),
            'success_rate': len(downloaded_chapters) / len(chapters) if chapters else 0,
            'output_directory': book_dir
        }
        
        print(f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        print(f"   üìñ –ö–Ω–∏–≥–∞: {book_info['title']}")
        print(f"   üìÑ –°–∫–∞—á–∞–Ω–æ –≥–ª–∞–≤: {len(downloaded_chapters)}/{len(chapters)}")
        print(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results['success_rate']:.1%}")
        print(f"   üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {book_dir}")
        
        return results
    
    def _delay_between_requests(self):
        """
        –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö)
        """
        time.sleep(1.0)
    
    def _get_page_content(self, url: str, timeout: int = 10, description: str = "") -> Optional[str]:
        """
        –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Args:
            url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            self.request_count += 1
            
            if description:
                print(f"üåê {description}: {url}")
            
            response = self.session.get(url, timeout=timeout)
            response.raise_for_status()
            
            self.success_count += 1
            return response.text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
            return None
    
    def get_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        success_rate = (self.success_count / self.request_count) if self.request_count > 0 else 0
        
        return {
            'source': self.source_name,
            'total_requests': self.request_count,
            'successful_requests': self.success_count,
            'success_rate': success_rate,
            'failed_requests': self.request_count - self.success_count
        }
    
    def reset_stats(self):
        """
        –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        """
        self.request_count = 0
        self.success_count = 0
    
    def close(self):
        """
        –ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é
        """
        if self.session:
            self.session.close()
    
    def __enter__(self):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥
        """
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥
        """
        self.close()