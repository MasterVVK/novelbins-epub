#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è czbooks.net - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –≤–µ–±-–Ω–æ–≤–µ–ª–ª
–ü–æ–¥–¥–µ—Ä–∂–∫–∞:
- Selenium –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
- SOCKS –ø—Ä–æ–∫—Å–∏
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies
- VIP –≥–ª–∞–≤—ã
"""
import time
import random
import re
from typing import Dict, List, Optional
from bs4 import BeautifulSoup
import sys
import os

# Selenium –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: undetected-chromedriver > selenium
try:
    import undetected_chromedriver as uc
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    selenium_available = True
    use_undetected = True
    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è undetected-chromedriver –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare")
except ImportError:
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        selenium_available = True
        use_undetected = False
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π Selenium (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è undetected-chromedriver)")
    except ImportError:
        selenium_available = False
        use_undetected = False
        print("‚ö†Ô∏è Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install selenium")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–æ–≤–æ–º—É –∫–ª–∞—Å—Å—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'base'))
from base_parser import BaseParser


class CZBooksParser(BaseParser):
    """
    –ü–∞—Ä—Å–µ—Ä –¥–ª—è czbooks.net

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –û–±—Ö–æ–¥ Cloudflare —á–µ—Ä–µ–∑ Selenium
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ SOCKS –ø—Ä–æ–∫—Å–∏
    - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ VIP –≥–ª–∞–≤
    - –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –¥–ª—è webdriver
    """

    def __init__(self, auth_cookies: str = None, socks_proxy: str = None, headless: bool = True, cloudflare_max_attempts: int = 5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞

        Args:
            auth_cookies: Cookie —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            socks_proxy: SOCKS –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ host:port
            headless: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å headless —Ä–µ–∂–∏–º (True) –∏–ª–∏ –Ω–µ—Ç (False)
                     –í–ê–ñ–ù–û: Cloudflare –ª—É—á—à–µ –æ–±—Ö–æ–¥–∏—Ç—Å—è –≤ non-headless —Ä–µ–∂–∏–º–µ,
                     –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∏—Å–ø–ª–µ–π (Xvfb –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
            cloudflare_max_attempts: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
        """
        super().__init__("czbooks")

        if not selenium_available:
            raise ImportError("Selenium —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ czbooks.net. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install selenium")

        self.base_url = "https://czbooks.net"
        self.auth_cookies = auth_cookies
        self.socks_proxy = socks_proxy
        self.headless = headless
        self.driver = None

        # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–∞—É–∑
        self.consecutive_errors = 0

        # –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        self.request_count = 0
        self.max_requests_before_restart = 100  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudflare challenge
        self.cloudflare_max_attempts = cloudflare_max_attempts

        print(f"üìö CZBooks Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        if auth_cookies:
            print(f"   üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞ ({len(auth_cookies)} —Å–∏–º–≤–æ–ª–æ–≤)")
        if socks_proxy:
            print(f"   üåê –ü—Ä–æ–∫—Å–∏: {socks_proxy}")

    def restart_driver(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        if self.driver:
            try:
                self.driver.quit()
                print("   ‚úÖ –°—Ç–∞—Ä—ã–π –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            finally:
                self.driver = None

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
        time.sleep(2)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.request_count = 0

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä
        self._init_selenium()
        print("   ‚úÖ –ù–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    def _init_selenium(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium —Å –æ–±—Ö–æ–¥–æ–º Cloudflare –∏ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º"""
        if self.driver:
            return

        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium –¥—Ä–∞–π–≤–µ—Ä–∞...")

        if use_undetected:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º undetected-chromedriver –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Ö–æ–¥–∞
            print("   üîß –†–µ–∂–∏–º: undetected-chromedriver")

            options = uc.ChromeOptions()

            # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏
            if self.headless:
                # Headless —Ä–µ–∂–∏–º (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –±–µ–∑ –¥–∏—Å–ø–ª–µ—è)
                # –í–ù–ò–ú–ê–ù–ò–ï: Cloudflare –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å headless —Ä–µ–∂–∏–º!
                options.add_argument('--headless=new')
                print("   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è headless —Ä–µ–∂–∏–º (–º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è Cloudflare)")
            else:
                # Non-headless —Ä–µ–∂–∏–º (–ª—É—á—à–µ –æ–±—Ö–æ–¥, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–∏—Å–ø–ª–µ–π)
                print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è non-headless —Ä–µ–∂–∏–º (–ª—É—á—à–∏–π –æ–±—Ö–æ–¥ Cloudflare)")

            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--window-size=1920,1080')

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏
            options.add_argument('--disable-blink-features=AutomationControlled')
            if not self.headless:
                options.add_argument('--start-maximized')

            # SOCKS –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if self.socks_proxy:
                # –£–±–∏—Ä–∞–µ–º socks5:// –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
                proxy_url = self.socks_proxy.replace('socks5://', '')
                options.add_argument(f'--proxy-server=socks5://{proxy_url}')
                print(f"   üåê –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: socks5://{proxy_url}")

            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä —Å undetected-chromedriver
            # –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω—ã–µ –ø—É—Ç–∏ - –ø—É—Å—Ç—å uc —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–µ–π –∫–æ–ø–∏–µ–π –¥—Ä–∞–π–≤–µ—Ä–∞
            # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É Permission denied –Ω–∞ /usr/bin/chromedriver
            try:
                self.driver = uc.Chrome(
                    options=options,
                    version_main=141  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é Chrome —è–≤–Ω–æ
                )
                print("   ‚úÖ undetected-chromedriver –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –≤–µ—Ä—Å–∏–µ–π 141, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {e}")
                try:
                    self.driver = uc.Chrome(options=options)
                    print("   ‚úÖ undetected-chromedriver –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)")
                except Exception as e2:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å undetected-chromedriver: {e2}")
                    raise

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è Cloudflare challenge
            self.driver.set_page_load_timeout(300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.driver.set_script_timeout(60)  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤

            # –í–ê–ñ–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç HTTP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É Selenium –∏ Chrome
            # –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–≥–∏—Ö Cloudflare challenge
            try:
                from selenium.webdriver.remote.remote_connection import RemoteConnection
                RemoteConnection.set_timeout(300)  # 5 –º–∏–Ω—É—Ç
                print("   ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: 300s –∑–∞–≥—Ä—É–∑–∫–∞, 300s HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HTTP —Ç–∞–π–º–∞—É—Ç: {e}")
                print("   ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: 300s –∑–∞–≥—Ä—É–∑–∫–∞, 60s —Å–∫—Ä–∏–ø—Ç—ã")

            # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ VNC –¥–ª—è –≤–µ–±-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            self._start_vnc_if_needed()

        else:
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π Selenium
            print("   üîß –†–µ–∂–∏–º: –æ–±—ã—á–Ω—ã–π Selenium")

            chrome_options = Options()

            # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏
            chrome_options.add_argument('--headless')
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--disable-gpu')
            chrome_options.add_argument('--window-size=1920,1080')

            # User-Agent (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)
            chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')

            # –û–±—Ö–æ–¥ webdriver detection
            chrome_options.add_argument('--disable-blink-features=AutomationControlled')
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            chrome_options.add_argument('--disable-extensions')
            chrome_options.add_argument('--disable-plugins')
            chrome_options.add_argument('--disable-background-timer-throttling')
            chrome_options.add_argument('--disable-backgrounding-occluded-windows')
            chrome_options.add_argument('--disable-renderer-backgrounding')

            # SOCKS –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if self.socks_proxy:
                # –£–±–∏—Ä–∞–µ–º socks5:// –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
                proxy_url = self.socks_proxy.replace('socks5://', '')
                chrome_options.add_argument(f'--proxy-server=socks5://{proxy_url}')
                print(f"   üåê –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: socks5://{proxy_url}")

            # –ü—É—Ç—å –∫ Chromium
            chrome_options.binary_location = '/usr/bin/chromium-browser'

            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            try:
                service = Service('/usr/bin/chromedriver')
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å Service, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ: {e}")
                self.driver = webdriver.Chrome(options=chrome_options)

            # –£–±–∏—Ä–∞–µ–º webdriver —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ JavaScript
            try:
                self.driver.execute_cdp_cmd('Page.addScriptToEvaluateOnNewDocument', {
                    'source': '''
                        Object.defineProperty(navigator, 'webdriver', {
                            get: () => undefined
                        });

                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
                        window.navigator.chrome = {
                            runtime: {}
                        };

                        Object.defineProperty(navigator, 'plugins', {
                            get: () => [1, 2, 3, 4, 5]
                        });

                        Object.defineProperty(navigator, 'languages', {
                            get: () => ['en-US', 'en', 'zh-CN', 'zh']
                        });
                    '''
                })
            except:
                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è Cloudflare challenge
            self.driver.set_page_load_timeout(300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.driver.set_script_timeout(60)  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
            print("   ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: 300s –∑–∞–≥—Ä—É–∑–∫–∞, 60s —Å–∫—Ä–∏–ø—Ç—ã")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.auth_cookies:
            print("   üç™ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cookies...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                self.driver.set_page_load_timeout(30)  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                self.driver.get(self.base_url)
            except Exception as e:
                # –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç –≥—Ä—É–∑–∏—Ç—å—Å—è –¥–æ–ª–≥–æ
                print(f"   ‚è≥ –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ (–æ–∂–∏–¥–∞–µ–º–æ): {type(e).__name__}")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                try:
                    self.driver.execute_script("window.stop();")
                except:
                    pass

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            self.driver.set_page_load_timeout(300)

            # –ñ–¥–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare challenge
            initial_wait = 20 + random.uniform(2, 5)
            print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare ({initial_wait:.1f}s)...")
            time.sleep(initial_wait)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try:
                page_source = self.driver.page_source

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –µ—Å–ª–∏ Cloudflare –∞–∫—Ç–∏–≤–µ–Ω
                max_cf_attempts = 2
                for attempt in range(max_cf_attempts):
                    if 'Cloudflare' in page_source and 'Just a moment' in page_source:
                        wait_time = 15
                        print(f"   ‚ö†Ô∏è Cloudflare challenge –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_cf_attempts}, –∂–¥–µ–º {wait_time}s...")
                        time.sleep(wait_time)
                        page_source = self.driver.page_source
                    else:
                        break

                if len(page_source) > 5000:
                    print(f"   ‚úÖ Cloudflare –ø—Ä–æ–π–¥–µ–Ω ({len(page_source)} —Å–∏–º–≤–æ–ª–æ–≤)")
                else:
                    print(f"   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ Cloudflare –Ω–µ –ø—Ä–æ–π–¥–µ–Ω ({len(page_source)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    print(f"   üìÑ –ü—Ä–µ–≤—å—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_source[:500]}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")

            cookies_set = 0
            for cookie_pair in self.auth_cookies.split(';'):
                if '=' in cookie_pair:
                    name, value = cookie_pair.strip().split('=', 1)
                    try:
                        self.driver.add_cookie({
                            'name': name.strip(),
                            'value': value.strip(),
                            'domain': '.czbooks.net'
                        })
                        cookies_set += 1
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookie {name}: {e}")
                        continue

            print(f"   ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ cookies: {cookies_set}")

        print("   ‚úÖ Selenium –¥—Ä–∞–π–≤–µ—Ä –≥–æ—Ç–æ–≤")

    def _start_vnc_if_needed(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å VNC —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω"""
        import subprocess
        import os

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π DISPLAY
            display = os.environ.get('DISPLAY', ':99')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ x11vnc –Ω–∞ –ø–æ—Ä—Ç—É 5900
            result = subprocess.run(
                ['pgrep', '-f', f'x11vnc.*rfbport 5900'],
                capture_output=True
            )

            if result.returncode != 0:
                # x11vnc –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º
                print(f"   üñ•Ô∏è –ó–∞–ø—É—Å–∫ VNC —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–∏—Å–ø–ª–µ—è {display}...")

                # –ù–∞—Ö–æ–¥–∏–º Xauthority —Ñ–∞–π–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏—Å–ø–ª–µ—è
                xauth = None
                try:
                    # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å Xvfb –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏—Å–ø–ª–µ—è
                    xvfb_result = subprocess.run(
                        ['ps', 'aux'],
                        capture_output=True,
                        text=True
                    )
                    for line in xvfb_result.stdout.split('\n'):
                        if f'Xvfb {display}' in line and '-auth' in line:
                            parts = line.split()
                            for i, part in enumerate(parts):
                                if part == '-auth' and i + 1 < len(parts):
                                    xauth = parts[i + 1]
                                    break
                            if xauth:
                                break
                except:
                    pass

                # –ó–∞–ø—É—Å–∫–∞–µ–º x11vnc
                cmd = [
                    'x11vnc',
                    '-display', display,
                    '-rfbport', '5900',
                    '-shared',
                    '-forever',
                    '-nopw',
                    '-bg',
                    '-o', '/tmp/x11vnc.log'
                ]

                if xauth:
                    cmd.extend(['-auth', xauth])

                subprocess.run(cmd, capture_output=True)
                print(f"   ‚úÖ VNC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5900")
                print(f"   üåê –í–µ–±-–¥–æ—Å—Ç—É–ø: http://localhost:6080/vnc.html")
            else:
                print(f"   ‚úÖ VNC —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å VNC: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ VNC –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è

    def _get_page_with_selenium(self, url: str, wait_selector: str = None, wait_time: int = 15) -> str:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ Selenium —Å –æ–±—Ö–æ–¥–æ–º Cloudflare

        Args:
            url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            wait_selector: CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            wait_time: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
        self.request_count += 1
        if self.request_count >= self.max_requests_before_restart:
            print(f"   üìä –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({self.request_count}), –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            self.restart_driver()

        self._init_selenium()

        print(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")

        try:
            self.driver.get(url)

            # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare challenge
            initial_wait = 15 + random.uniform(2, 5)
            print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare ({initial_wait:.1f}s)...")
            time.sleep(initial_wait)

            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä, –∂–¥–µ–º –µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
            if wait_selector:
                try:
                    print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {wait_selector}")
                    WebDriverWait(self.driver, wait_time).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, wait_selector))
                    )
                    print(f"   ‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Cloudflare challenge
            page_source = self.driver.page_source

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ –º—ã Cloudflare (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫)
            max_attempts = self.cloudflare_max_attempts
            for attempt in range(max_attempts):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã Cloudflare challenge
                cf_indicators = [
                    ('Cloudflare' in page_source and 'Just a moment' in page_source),
                    ('Verify you are human' in page_source),  # Turnstile
                    ('turnstile' in page_source.lower() and 'challenge' in page_source.lower()),
                    ('cf-chl' in page_source),  # Cloudflare challenge ID
                ]

                if any(cf_indicators):
                    wait_time = 20 + (attempt * 10)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                    print(f"   ‚ö†Ô∏è Cloudflare challenge –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}, –∂–¥–µ–º {wait_time}s...")
                    time.sleep(wait_time)
                    page_source = self.driver.page_source
                else:
                    break

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ Cloudflare
            cf_still_active = any([
                ('Verify you are human' in page_source),
                ('cf-chl' in page_source and 'challenge' in page_source.lower()),
            ])

            if cf_still_active:
                print(f"   ‚ùå Cloudflare challenge –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –¥–æ–±–∞–≤—å—Ç–µ auth_cookies –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–µ–ª–ª—ã")
                self.consecutive_errors += 1
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ Cloudflare Turnstile challenge. –¢—Ä–µ–±—É—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ cookies.")

            if len(page_source) > 5000:
                print(f"   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({len(page_source)} —Å–∏–º–≤–æ–ª–æ–≤)")
                self.consecutive_errors = 0
                return page_source
            else:
                print(f"   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(page_source)}")
                self.consecutive_errors += 1
                return page_source

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            self.consecutive_errors += 1
            raise

    def get_book_info(self, book_url: str) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ

        Args:
            book_url: URL –∫–Ω–∏–≥–∏ –Ω–∞ czbooks.net

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–∏–≥–µ
        """
        print(f"\nüìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ...")

        html = self._get_page_with_selenium(
            book_url,
            wait_selector='h1, .book-title, [class*="title"]',
            wait_time=20
        )

        soup = BeautifulSoup(html, 'html.parser')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º book_id –∏–∑ URL
        book_id = self._extract_book_id(book_url)

        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        title = self._extract_title(soup)
        author = self._extract_author(soup)
        description = self._extract_description(soup)
        genre = self._extract_genre(soup)
        status = self._extract_status(soup)

        book_info = {
            'book_id': book_id,
            'title': title,
            'author': author,
            'description': description,
            'status': status,
            'genre': genre,
            'total_chapters': 0  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ get_chapter_list
        }

        print(f"   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
        print(f"   ‚úÖ –ê–≤—Ç–æ—Ä: {author}")
        print(f"   ‚úÖ –ñ–∞–Ω—Ä: {genre}")

        return book_info

    def get_chapter_list(self, book_url: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –∫–Ω–∏–≥–∏

        Args:
            book_url: URL –∫–Ω–∏–≥–∏

        Returns:
            List[Dict] —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–ª–∞–≤
        """
        print(f"\nüìö –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤...")

        html = self._get_page_with_selenium(
            book_url,
            wait_selector='a[href*="/"], .chapter-list, #chapters',
            wait_time=20
        )

        soup = BeautifulSoup(html, 'html.parser')

        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–ª–∞–≤—ã
        chapter_links = self._find_chapter_links(soup, book_url)

        if not chapter_links:
            print("   ‚ö†Ô∏è –ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)
            html = self.driver.page_source
            soup = BeautifulSoup(html, 'html.parser')
            chapter_links = self._find_chapter_links(soup, book_url)

        chapters = []
        for i, link in enumerate(chapter_links, 1):
            href = link.get('href', '')
            title = link.get_text(strip=True)

            if not href or not title:
                continue

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
            if href.startswith('http://') or href.startswith('https://'):
                # –£–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL
                full_url = href
            elif href.startswith('//'):
                # Protocol-relative URL
                full_url = f"https:{href}"
            elif href.startswith('/'):
                # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –¥–æ–º–µ–Ω–∞
                full_url = f"{self.base_url}{href}"
            else:
                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                full_url = f"{book_url.rstrip('/')}/{href}"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º chapter_id
            chapter_id = self._extract_chapter_id(full_url)

            chapters.append({
                'number': i,
                'title': title,
                'url': full_url,
                'chapter_id': chapter_id,
                'word_count': 0
            })

        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(chapters)}")

        if chapters:
            print(f"\n   –ü–µ—Ä–≤—ã–µ 5 –≥–ª–∞–≤:")
            for ch in chapters[:5]:
                print(f"      {ch['number']}. {ch['title'][:50]}")

        return chapters

    def get_chapter_content(self, chapter_url: str) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã

        Args:
            chapter_url: URL –≥–ª–∞–≤—ã

        Returns:
            Dict —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –≥–ª–∞–≤—ã
        """
        print(f"\nüìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤—ã: {chapter_url}")

        html = self._get_page_with_selenium(
            chapter_url,
            wait_selector='.chapter-content, #content, article, main',
            wait_time=20
        )

        soup = BeautifulSoup(html, 'html.parser')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = self._extract_chapter_title(soup)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content = self._extract_chapter_content(soup)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        is_locked = self._check_locked(soup, content)

        result = {
            'title': title,
            'content': content,
            'chapter_id': self._extract_chapter_id(chapter_url),
            'word_count': len(content),
            'is_locked': is_locked
        }

        if is_locked:
            print(f"   üîí –ì–ª–∞–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (–ø—Ä–µ–≤—å—é: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print(f"   ‚úÖ –ì–ª–∞–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")

        return result

    def _extract_book_id(self, url: str) -> str:
        """–ò–∑–≤–ª–µ—á—å ID –∫–Ω–∏–≥–∏ –∏–∑ URL"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è czbooks.net
        patterns = [
            r'/n/([^/\?]+)',  # /n/ul6pe
            r'/novel/([^/\?]+)',  # /novel/123
            r'/book/([^/\?]+)',  # /book/123
        ]

        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)

        return 'unknown'

    def _extract_chapter_id(self, url: str) -> str:
        """–ò–∑–≤–ª–µ—á—å ID –≥–ª–∞–≤—ã –∏–∑ URL"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è ID –≥–ª–∞–≤—ã
        patterns = [
            r'/n/[^/]+/([^/\?]+)',  # /n/ul6pe/chapter-1
            r'/chapter/([^/\?]+)',  # /chapter/123
            r'/c/([^/\?]+)',  # /c/123
        ]

        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)

        return 'unknown'

    def _extract_title(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
        selectors = [
            'h1.book-title',
            'h1.novel-title',
            'h1.title',
            '.book-info h1',
            'h1',
            '[class*="title"]'
        ]

        for selector in selectors:
            elem = soup.select_one(selector)
            if elem:
                text = elem.get_text(strip=True)
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if text and len(text) > 2 and text.lower() not in ['czbooks.net', 'just a moment']:
                    return text

        return "Unknown Title"

    def _extract_author(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á—å –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
        selectors = [
            '.author',
            '.book-author',
            '[class*="author"]',
            '.writer',
            '[rel="author"]',
            '.book-info .author'
        ]

        for selector in selectors:
            elem = soup.select_one(selector)
            if elem:
                text = elem.get_text(strip=True)
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
                text = text.replace('‰ΩúËÄÖÔºö', '').replace('Author:', '').replace('‰ΩúËÄÖ', '').strip()
                if text and len(text) > 1 and len(text) < 100:
                    return text

        return "Unknown Author"

    def _extract_description(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
        selectors = [
            '.description',
            '.synopsis',
            '.book-desc',
            '[class*="desc"]',
            '.intro',
            '.summary',
            '.book-info .description'
        ]

        for selector in selectors:
            elem = soup.select_one(selector)
            if elem:
                text = elem.get_text(strip=True)
                if text and len(text) > 20:
                    return text

        return ""

    def _extract_genre(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á—å –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏"""
        selectors = [
            '.genre',
            '.category',
            '[class*="genre"]',
            '.tag',
            '.book-genre'
        ]

        for selector in selectors:
            elem = soup.select_one(selector)
            if elem:
                return elem.get_text(strip=True)

        return "Unknown"

    def _extract_status(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á—å —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏"""
        selectors = [
            '.status',
            '.book-status',
            '[class*="status"]'
        ]

        for selector in selectors:
            elem = soup.select_one(selector)
            if elem:
                return elem.get_text(strip=True)

        return "Unknown"

    def _find_chapter_links(self, soup: BeautifulSoup, book_url: str) -> List:
        """–ù–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–ª–∞–≤—ã"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º book_id –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
        book_id = self._extract_book_id(book_url)

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        selectors = [
            f'a[href*="/n/{book_id}/"]',  # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–ª–∞–≤—ã —ç—Ç–æ–π –∫–Ω–∏–≥–∏
            '.chapter-list a',
            '#chapters a',
            '.chapters a',
            '.toc a',
            'a[href*="/chapter/"]',
            'a[href*="/c/"]'
        ]

        all_links = []
        for selector in selectors:
            links = soup.select(selector)
            if links:
                print(f"   üîç –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫")
                all_links.extend(links)

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ href
        seen_hrefs = set()
        unique_links = []

        for link in all_links:
            href = link.get('href', '')
            if href and href not in seen_hrefs:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤—É
                if any(pattern in href for pattern in ['/chapter', '/c/', f'/n/{book_id}/']):
                    seen_hrefs.add(href)
                    unique_links.append(link)

        print(f"   ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥–ª–∞–≤—ã: {len(unique_links)}")
        return unique_links

    def _extract_chapter_title(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã"""
        selectors = [
            '.chapter-title',
            'h1.title',
            'h1',
            'h2',
            '[class*="chapter"][class*="title"]'
        ]

        for selector in selectors:
            elem = soup.select_one(selector)
            if elem:
                text = elem.get_text(strip=True)
                if text and len(text) > 2:
                    return text

        return "Unknown Chapter"

    def _extract_chapter_content(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã"""
        selectors = [
            '.chapter-content',
            '#content',
            '.content',
            'article.chapter',
            'article',
            'main',
            '[class*="chapter"][class*="content"]'
        ]

        for selector in selectors:
            content_elem = soup.select_one(selector)
            if content_elem:
                # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                for unwanted in content_elem.select('script, style, .ad, .advertisement, nav, .navigation, .share, .comment'):
                    unwanted.decompose()

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã <p>
                paragraphs = []
                for p in content_elem.find_all('p'):
                    text = p.get_text(strip=True)
                    if text and len(text) > 10:
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                        text = re.sub(r'\s+', ' ', text)
                        paragraphs.append(text)

                if paragraphs and len(paragraphs) > 2:
                    content = '\n\n'.join(paragraphs)
                    print(f"      üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ <p>: {len(paragraphs)}")
                    return content

                # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –º–∞–ª–æ, —Ä–∞–±–æ—Ç–∞–µ–º —Å <br> —Ç–µ–≥–∞–º–∏
                # czbooks.net –∏—Å–ø–æ–ª—å–∑—É–µ—Ç <br> –≤–º–µ—Å—Ç–æ <p>
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_text(separator='\n') —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                full_text = content_elem.get_text(separator='\n', strip=True)

                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                lines = [line.strip() for line in full_text.split('\n') if line.strip()]

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ —Å –¥–≤–æ–π–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏
                content = '\n\n'.join(lines)

                if len(content) > 100:
                    print(f"      üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å <br>: {len(lines)}")
                    return content

        return "Content not found"

    def _check_locked(self, soup: BeautifulSoup, content: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≥–ª–∞–≤—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        # –ú–∞—Ä–∫–µ—Ä—ã "vip", "lock" –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ä–µ–∫–ª–∞–º–µ/–Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        # –ü–æ—ç—Ç–æ–º—É –ø–æ–ª–∞–≥–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞

        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π - –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–µ–≤—å—é
        if len(content) < 500:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —è–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –°–ê–ú–û–ú –ö–û–ù–¢–ï–ù–¢–ï
        content_lower = content.lower()
        lock_phrases = [
            'this chapter is locked',
            'unlock this chapter',
            'subscribe to read',
            'premium content',
            'vipÁ´†ËäÇ',
            'Êú¨Á´†ÈúÄË¶ÅËÆ¢ÈòÖ',
            'ËÆ¢ÈòÖÂêéÂèØÈòÖËØª'
        ]

        for phrase in lock_phrases:
            if phrase in content_lower:
                return True

        return False

    def _delay_between_requests(self):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        base_delay = 3.0

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if self.consecutive_errors > 0:
            base_delay *= (1 + self.consecutive_errors * 0.5)

        # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        base_delay = min(base_delay, 30.0)

        # –°–ª—É—á–∞–π–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
        random_factor = random.uniform(0.5, 1.5)
        delay = base_delay + random_factor

        print(f"‚è≥ –ü–∞—É–∑–∞ {delay:.1f}s (–æ—à–∏–±–æ–∫: {self.consecutive_errors})...")
        time.sleep(delay)

    def get_cookies(self):
        """
        –ò–∑–≤–ª–µ—á—å cookies –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ Selenium

        Returns:
            str: Cookies –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ None –µ—Å–ª–∏ –¥—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        if not self.driver:
            return None

        try:
            import json
            cookies = self.driver.get_cookies()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç Novel model
            cookies_dict = {}
            for cookie in cookies:
                cookies_dict[cookie['name']] = cookie['value']

            cookies_json = json.dumps(cookies_dict, ensure_ascii=False)
            print(f"   üç™ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(cookies_dict)} cookies –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞")
            return cookies_json

        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è cookies: {e}")
            return None

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å Selenium –¥—Ä–∞–π–≤–µ—Ä –∏ —Å–µ—Å—Å–∏—é"""
        if self.driver:
            try:
                self.driver.quit()
                print("   ‚úÖ Selenium –¥—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            finally:
                self.driver = None

        super().close()


def main():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ czbooks.net
    """
    print("=" * 60)
    print("üìö CZBOOKS PARSER - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)

    # –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞
    test_url = "https://czbooks.net/n/ul6pe"

    parser = CZBooksParser()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ...")
        book_info = parser.get_book_info(test_url)
        print(f"\nüìñ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {book_info['title']}")
        print(f"   –ê–≤—Ç–æ—Ä: {book_info['author']}")
        print(f"   ID: {book_info['book_id']}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ (–ø–µ—Ä–≤—ã–µ 3)
        print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤...")
        chapters = parser.get_chapter_list(test_url)

        if chapters:
            print(f"\nüìö –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(chapters)}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É
            print("\n3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã...")
            first_chapter = chapters[0]
            content = parser.get_chapter_content(first_chapter['url'])

            print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {content['title']}")
            print(f"   –†–∞–∑–º–µ—Ä: {content['word_count']} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {content['is_locked']}")
            print(f"\n   –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
            print(f"   {content['content'][:300]}...")

        print("\n" + "=" * 60)
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("=" * 60)

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

    finally:
        parser.close()


if __name__ == "__main__":
    main()
