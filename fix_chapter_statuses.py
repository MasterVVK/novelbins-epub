#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≥–ª–∞–≤ –≤ –Ω–æ–≤–µ–ª–ª–µ 12.
–ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å 'edited' –Ω–∞ 'translated' –¥–ª—è –≥–ª–∞–≤, –≥–¥–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–º—É (—á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–¥–∞–∫—Ç—É—Ä–æ–π).
"""

import sys
import os
import logging

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –î–û –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º SQL –ª–æ–≥–∏ - —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
for logger_name in ['sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.engine.Engine', 'sqlalchemy.pool']:
    logger = logging.getLogger(logger_name)
    logger.handlers = []
    logger.propagate = False
    logger.setLevel(logging.CRITICAL)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è SQLALCHEMY_ECHO
os.environ['SQLALCHEMY_ECHO'] = 'False'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, '/home/user/novelbins-epub/web_app')

from app import create_app, db
from app.models import Chapter, Translation

def fix_chapter_statuses(novel_id=12, dry_run=True):
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≥–ª–∞–≤

    Args:
        novel_id: ID –Ω–æ–≤–µ–ª–ª—ã
        dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î)
    """
    app = create_app()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ - –æ—Ç–∫–ª—é—á–∞–µ–º ECHO
    app.config['SQLALCHEMY_ECHO'] = False

    # –†–∞–¥–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ NullHandler
    null_handler = logging.NullHandler()
    for logger_name in ['sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.engine.Engine',
                        'sqlalchemy.pool', 'sqlalchemy.dialects', 'sqlalchemy.orm']:
        logger = logging.getLogger(logger_name)
        logger.handlers = [null_handler]
        logger.propagate = False
        logger.setLevel(logging.CRITICAL + 100)  # –í—ã—à–µ –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è

    with app.app_context():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–ª–∞–≤—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'edited'
        chapters = Chapter.query.filter_by(
            novel_id=novel_id,
            status='edited'
        ).order_by(Chapter.chapter_number).all()

        print(f"üìä –í—Å–µ–≥–æ –≥–ª–∞–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'edited': {len(chapters)}")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤...")
        print()

        problematic_chapters = []

        for chapter in chapters:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (initial)
            initial_translation = Translation.query.filter_by(
                chapter_id=chapter.id,
                translation_type='initial'
            ).order_by(Translation.created_at.desc()).first()

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (edited)
            edited_translation = Translation.query.filter_by(
                chapter_id=chapter.id,
                translation_type='edited'
            ).order_by(Translation.created_at.desc()).first()

            if not initial_translation or not edited_translation:
                continue

            initial_length = len(initial_translation.translated_text) if initial_translation.translated_text else 0
            edited_length = len(edited_translation.translated_text) if edited_translation.translated_text else 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ edited <= initial, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
            if edited_length <= initial_length:
                diff = edited_length - initial_length
                problematic_chapters.append({
                    'chapter': chapter,
                    'initial_length': initial_length,
                    'edited_length': edited_length,
                    'diff': diff
                })

        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≥–ª–∞–≤: {len(problematic_chapters)}")
        print()

        if not problematic_chapters:
            print("‚úÖ –ù–µ—Ç –≥–ª–∞–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        print("üìã –ü–µ—Ä–≤—ã–µ 20 –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≥–ª–∞–≤:")
        print(f"{'ID':<7} {'–ì–ª–∞–≤–∞':<7} {'Initial':<10} {'Edited':<10} {'Diff':<10}")
        print("-" * 55)

        for item in problematic_chapters[:20]:
            ch = item['chapter']
            print(f"{ch.id:<7} {ch.chapter_number:<7} {item['initial_length']:<10} {item['edited_length']:<10} {item['diff']:<10}")

        if len(problematic_chapters) > 20:
            print(f"... –∏ –µ—â–µ {len(problematic_chapters) - 20} –≥–ª–∞–≤")

        print()

        if dry_run:
            print("üîí –†–µ–∂–∏–º DRY RUN - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            print(f"   –ë—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –≥–ª–∞–≤: {len(problematic_chapters)}")
            print()
            print("–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: --apply")
        else:
            print("üíæ –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")

            updated_count = 0
            for item in problematic_chapters:
                chapter = item['chapter']
                chapter.status = 'translated'
                updated_count += 1

                if updated_count % 50 == 0:
                    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}/{len(problematic_chapters)}")

            db.session.commit()

            print()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≥–ª–∞–≤: {updated_count}")
            print(f"   –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å 'edited' –Ω–∞ 'translated'")

        print()
        print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≥–ª–∞–≤: {len(chapters)}")
        print(f"   –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≥–ª–∞–≤: {len(problematic_chapters)} ({len(problematic_chapters)/len(chapters)*100:.1f}%)")
        print(f"   –ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö –≥–ª–∞–≤: {len(chapters) - len(problematic_chapters)}")

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(
        description='–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≥–ª–∞–≤',
        epilog='''
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π (dry run):
  python %(prog)s

  # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:
  python %(prog)s --apply

  # –°–∫—Ä—ã—Ç—å SQL –ª–æ–≥–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
  python %(prog)s 2>&1 | grep -v "sqlalchemy" | grep -v "INFO"

  # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ SQL –ª–æ–≥–æ–≤:
  python %(prog)s --apply 2>&1 | grep -v "sqlalchemy" | grep -v "INFO"
        ''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('--novel-id', type=int, default=12, help='ID –Ω–æ–≤–µ–ª–ª—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 12)')
    parser.add_argument('--apply', action='store_true', help='–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–∏–Ω–∞—á–µ dry run)')

    args = parser.parse_args()

    print("=" * 60)
    print("üîß –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≥–ª–∞–≤")
    print("=" * 60)
    print()

    fix_chapter_statuses(novel_id=args.novel_id, dry_run=not args.apply)

    print()
    print("=" * 60)
    print("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    print("=" * 60)
