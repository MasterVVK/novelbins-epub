#!/usr/bin/env python3

import sys
import os
import time
import requests
sys.path.append('/home/user/novelbins-epub/web_app')

from app import create_app, db
from app.models import Novel, Chapter, Translation, Task

app = create_app()

def test_editing_realtime():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–î–ê–ö–¢–£–†–´ –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
    print("=" * 60)
    
    base_url = "http://192.168.0.58:5001"
    novel_id = 2
    
    with app.app_context():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print("\nüìä –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
        initial_tasks = Task.query.filter_by(novel_id=novel_id, task_type='editing').count()
        print(f"  –ó–∞–¥–∞—á —Ä–µ–¥–∞–∫—Ç—É—Ä—ã: {initial_tasks}")
        
        ready_chapters = Chapter.query.filter_by(
            novel_id=novel_id,
            status='translated',
            is_active=True
        ).count()
        print(f"  –ì–ª–∞–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ —Ä–µ–¥–∞–∫—Ç—É—Ä–µ: {ready_chapters}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—É
        print(f"\nüöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –ù–ê –†–ï–î–ê–ö–¢–£–†–£...")
        editing_url = f"{base_url}/novels/{novel_id}/start-editing"
        
        try:
            response = requests.post(editing_url, timeout=10)
            print(f"  –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                print("  ‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                return
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        print(f"\nüìà –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
        for i in range(10):  # 10 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã
            time.sleep(2)
            
            with app.app_context():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏
                tasks = Task.query.filter_by(novel_id=novel_id, task_type='editing').all()
                print(f"  [{i+1:2d}] –ó–∞–¥–∞—á —Ä–µ–¥–∞–∫—Ç—É—Ä—ã: {len(tasks)}")
                
                for task in tasks:
                    print(f"      –ó–∞–¥–∞—á–∞ {task.id}: {task.status} (–ø—Ä–æ–≥—Ä–µ—Å—Å: {task.progress})")
                    if task.error_message:
                        print(f"        ‚ùå –û—à–∏–±–∫–∞: {task.error_message}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤—ã
                edited_chapters = Chapter.query.filter_by(
                    novel_id=novel_id,
                    status='edited',
                    is_active=True
                ).count()
                print(f"      –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤: {edited_chapters}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
        final_tasks = Task.query.filter_by(novel_id=novel_id, task_type='editing').all()
        print(f"  –ó–∞–¥–∞—á —Ä–µ–¥–∞–∫—Ç—É—Ä—ã: {len(final_tasks)}")
        
        for task in final_tasks:
            print(f"    –ó–∞–¥–∞—á–∞ {task.id}: {task.status}")
            print(f"      –°–æ–∑–¥–∞–Ω–∞: {task.created_at}")
            print(f"      –ù–∞—á–∞—Ç–∞: {task.started_at}")
            print(f"      –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {task.completed_at}")
            if task.error_message:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {task.error_message}")
            if task.result:
                print(f"      üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {task.result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤—ã
        chapters = Chapter.query.filter_by(novel_id=novel_id, is_active=True).all()
        print(f"\nüìã –°–¢–ê–¢–£–°–´ –ì–õ–ê–í:")
        for chapter in chapters:
            print(f"  –ì–ª–∞–≤–∞ {chapter.chapter_number}: {chapter.status}")

if __name__ == "__main__":
    test_editing_realtime() 