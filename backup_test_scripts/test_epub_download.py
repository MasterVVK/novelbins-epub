#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è EPUB
"""
import requests
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ web_app
web_app_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'web_app')
sys.path.insert(0, web_app_path)

from app import create_app, db
from app.models import Novel, Task

def test_epub_download():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è EPUB"""
    app = create_app()
    
    with app.app_context():
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è EPUB...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.first()
        if not novel:
            print("‚ùå –ù–µ—Ç –Ω–æ–≤–µ–ª–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"üìñ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–µ–ª–ª–∞: {novel.title} (ID: {novel.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É EPUB
        completed_epub_task = Task.query.filter_by(
            novel_id=novel.id,
            task_type='generate_epub',
            status='completed'
        ).order_by(Task.updated_at.desc()).first()
        
        if not completed_epub_task:
            print("‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ EPUB")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ EPUB: {completed_epub_task.id}")
        
        if not completed_epub_task.result or 'epub_path' not in completed_epub_task.result:
            print("‚ùå –ù–µ—Ç –ø—É—Ç–∏ –∫ EPUB —Ñ–∞–π–ª—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            return
        
        epub_path = completed_epub_task.result['epub_path']
        epub_file = Path(epub_path)
        
        if not epub_file.exists():
            print(f"‚ùå EPUB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {epub_path}")
            return
        
        size_kb = epub_file.stat().st_size / 1024
        print(f"‚úÖ EPUB —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {epub_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size_kb:.1f} KB")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        base_url = "http://localhost:5001"
        download_url = f"{base_url}/novels/{novel.id}/epub/download"
        
        print(f"\nüîó URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {download_url}")
        
        try:
            response = requests.get(download_url, timeout=10)
            
            if response.status_code == 200:
                print("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
                print(f"üìã Content-Type: {response.headers.get('content-type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"üìã Content-Disposition: {response.headers.get('content-disposition', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                test_file = Path("test_download.epub")
                with open(test_file, 'wb') as f:
                    f.write(response.content)
                
                test_size_kb = test_file.stat().st_size / 1024
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {test_file}")
                print(f"üìä –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {test_size_kb:.1f} KB")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                test_file.unlink()
                print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
                print(f"üìã –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:5001")

if __name__ == "__main__":
    test_epub_download() 