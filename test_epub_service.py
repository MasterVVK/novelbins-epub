#!/usr/bin/env python3
"""
–¢–µ—Å—Ç EPUB —Å–µ—Ä–≤–∏—Å–∞
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ web_app
web_app_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'web_app')
sys.path.insert(0, web_app_path)

from app import create_app, db
from app.models import Novel, Chapter, Translation
from app.services.epub_service import EPUBService

def test_epub_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EPUB —Å–µ—Ä–≤–∏—Å–∞"""
    app = create_app()
    
    with app.app_context():
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EPUB —Å–µ—Ä–≤–∏—Å–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.first()
        if not novel:
            print("‚ùå –ù–µ—Ç –Ω–æ–≤–µ–ª–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"üìñ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–µ–ª–ª–∞: {novel.title}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        chapters = Chapter.query.filter_by(novel_id=novel.id, is_active=True).all()
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(chapters)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        translated_chapters = []
        for chapter in chapters:
            if chapter.current_translation:
                translated_chapters.append(chapter)
                print(f"   –ì–ª–∞–≤–∞ {chapter.chapter_number}: {chapter.current_translation.translated_title}")
        
        if not translated_chapters:
            print("‚ùå –ù–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤: {len(translated_chapters)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º EPUB —Å–µ—Ä–≤–∏—Å
        epub_service = EPUBService(app)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã –¥–ª—è EPUB
            epub_chapters = epub_service.get_edited_chapters_from_db(novel.id)
            print(f"üìñ –ü–æ–ª—É—á–µ–Ω–æ –≥–ª–∞–≤ –¥–ª—è EPUB: {len(epub_chapters)}")
            
            if epub_chapters:
                # –°–æ–∑–¥–∞–µ–º EPUB
                epub_path = epub_service.create_epub(novel.id, epub_chapters)
                print(f"‚úÖ EPUB —Å–æ–∑–¥–∞–Ω: {epub_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                epub_file = Path(epub_path)
                if epub_file.exists():
                    size_kb = epub_file.stat().st_size / 1024
                    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_kb:.1f} KB")
                else:
                    print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå –ù–µ—Ç –≥–ª–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è EPUB")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ EPUB: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    test_epub_service() 