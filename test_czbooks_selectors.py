#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞ czbooks.net
–ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≥–ª–∞–≤
"""
import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.append(os.path.join(os.path.dirname(__file__), 'parsers', 'sources'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'parsers', 'base'))

from czbooks_parser import CZBooksParser
from bs4 import BeautifulSoup

def test_chapter_selectors():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    # –¢–µ—Å—Ç–æ–≤—ã–π URL –≥–ª–∞–≤—ã
    test_url = "https://czbooks.net/n/ul6pe/ukc8a"  # –ì–ª–∞–≤–∞ 15

    print("=" * 80)
    print("üß™ –¢–ï–°–¢ –°–ï–õ–ï–ö–¢–û–†–û–í CZBOOKS.NET")
    print("=" * 80)
    print(f"\nüìÑ –¢–µ—Å—Ç–æ–≤–∞—è –≥–ª–∞–≤–∞: {test_url}\n")

    # –ü–æ–ª—É—á–∞–µ–º cookies –∏–∑ .env
    from dotenv import load_dotenv
    load_dotenv()

    auth_cookies = os.getenv('CZBOOKS_COOKIES', '')
    socks_proxy = os.getenv('PROXY_URL', '').replace('socks5://', '')

    parser = CZBooksParser(
        auth_cookies=auth_cookies,
        socks_proxy=socks_proxy,
        headless=False  # non-headless –¥–ª—è Cloudflare
    )

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        html = parser._get_page_with_selenium(test_url, wait_time=25)
        soup = BeautifulSoup(html, 'html.parser')

        print("\n" + "=" * 80)
        print("üìä –ê–ù–ê–õ–ò–ó HTML –°–¢–†–£–ö–¢–£–†–´")
        print("=" * 80)

        # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        selectors_to_test = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            '.chapter-content',
            '#content',
            '.content',
            'article',
            'main',

            # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è czbooks
            '.chapter',
            '#chapter',
            '.text',
            '#text',
            '.chapter-text',
            '.novel-content',
            '.book-content',
            '[id*="content"]',
            '[class*="content"]',
            '[id*="chapter"]',
            '[class*="chapter"]',
            'div[id^="chapter"]',
            'div[class^="chapter"]',
        ]

        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤:")
        print("-" * 80)

        found_selectors = []

        for selector in selectors_to_test:
            try:
                elements = soup.select(selector)
                if elements:
                    for i, elem in enumerate(elements[:3]):  # –ü–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
                        text = elem.get_text(strip=True)
                        text_len = len(text)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
                        paragraphs = elem.find_all('p')

                        status = "‚úÖ" if text_len > 1000 else "‚ö†Ô∏è" if text_len > 200 else "‚ùå"

                        print(f"\n{status} –°–µ–ª–µ–∫—Ç–æ—Ä: {selector} [—ç–ª–µ–º–µ–Ω—Ç {i+1}/{len(elements)}]")
                        print(f"   üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {text_len} —Å–∏–º–≤–æ–ª–æ–≤")
                        print(f"   üìù –ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ <p>: {len(paragraphs)}")

                        if text_len > 100:
                            print(f"   üìÑ –ü—Ä–µ–≤—å—é: {text[:200]}...")
                            found_selectors.append((selector, text_len, len(paragraphs)))

                        if text_len > 2000:
                            # –í—ã–≤–æ–¥–∏–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                            print(f"   ‚ú® –û–¢–õ–ò–ß–ù–´–ô –ö–ê–ù–î–ò–î–ê–¢!")
                            print(f"   üè∑Ô∏è HTML —Ç–µ–≥–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ:")
                            for tag in elem.find_all(recursive=False):
                                print(f"      - <{tag.name}> ({len(tag.get_text(strip=True))} —Å–∏–º–≤–æ–ª–æ–≤)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector}: {e}")

        print("\n" + "=" * 80)
        print("üìã –†–ï–ó–Æ–ú–ï")
        print("=" * 80)

        if found_selectors:
            print("\n‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:")
            found_selectors.sort(key=lambda x: x[1], reverse=True)
            for selector, length, paragraphs in found_selectors[:5]:
                print(f"   {selector:30s} ‚Üí {length:5d} —Å–∏–º–≤–æ–ª–æ–≤, {paragraphs:3d} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            best_selector = found_selectors[0][0]
            print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –°–ï–õ–ï–ö–¢–û–†: {best_selector}")
            print(f"   –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {found_selectors[0][1]} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {found_selectors[0][2]}")
        else:
            print("\n‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print("\nüîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
            print(f"   –†–∞–∑–º–µ—Ä HTML: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –í—Å–µ–≥–æ <p> —Ç–µ–≥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(soup.find_all('p'))}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏ ID –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_classes = set()
            all_ids = set()

            for tag in soup.find_all(True):
                if tag.get('class'):
                    all_classes.update(tag['class'])
                if tag.get('id'):
                    all_ids.add(tag['id'])

            print(f"\n   üìã –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {len(all_classes)}")
            print(f"   –ö–ª–∞—Å—Å—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ 'content' –∏–ª–∏ 'chapter':")
            for cls in sorted(all_classes):
                if 'content' in cls.lower() or 'chapter' in cls.lower() or 'text' in cls.lower():
                    print(f"      .{cls}")

            print(f"\n   üìã –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {len(all_ids)}")
            print(f"   ID —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ 'content' –∏–ª–∏ 'chapter':")
            for id_val in sorted(all_ids):
                if 'content' in id_val.lower() or 'chapter' in id_val.lower() or 'text' in id_val.lower():
                    print(f"      #{id_val}")

        print("\n" + "=" * 80)
        print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        print("=" * 80)

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        parser.close()

if __name__ == "__main__":
    test_chapter_selectors()
