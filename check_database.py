#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏–∑–∞ –≥–ª–∞–≤
"""

import sqlite3
import os
from collections import Counter
import re

def check_database_contents():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ò—â–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    possible_db_paths = [
        "translations.db",
        "web_app/instance/translations.db",
        "web_app/translations.db",
        "instance/novel_translator.db",
        "web_app/instance/novel_translator.db"
    ]
    
    db_path = None
    for path in possible_db_paths:
        if os.path.exists(path):
            db_path = path
            break
    
    if not db_path:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∏—Å–∫ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Å—Ç–∞—Ö:")
        for path in possible_db_paths:
            print(f"   - {path}")
        return
    
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("üìã –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        print(f"–¢–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã chapters
        if 'chapters' in tables:
            print("üìñ –°–û–î–ï–†–ñ–ò–ú–û–ï –¢–ê–ë–õ–ò–¶–´ CHAPTERS")
            print("-" * 40)
            
            cursor.execute("SELECT COUNT(*) FROM chapters")
            total_chapters = cursor.fetchone()[0]
            print(f"–í—Å–µ–≥–æ –≥–ª–∞–≤ –≤ –±–∞–∑–µ: {total_chapters}")
            
            if total_chapters > 0:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                cursor.execute("""
                    SELECT status, COUNT(*) as count 
                    FROM chapters 
                    GROUP BY status
                """)
                statuses = cursor.fetchall()
                print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
                for status in statuses:
                    print(f"  - {status[0]}: {status[1]} –≥–ª–∞–≤")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –≥–ª–∞–≤
                cursor.execute("""
                    SELECT chapter_number, original_title, 
                           LENGTH(original_text) as text_length,
                           status, translated_title
                    FROM chapters 
                    ORDER BY chapter_number 
                    LIMIT 10
                """)
                
                chapters = cursor.fetchall()
                print(f"\n–ü–µ—Ä–≤—ã–µ {len(chapters)} –≥–ª–∞–≤:")
                for chapter in chapters:
                    title = chapter['original_title'] or f"–ì–ª–∞–≤–∞ {chapter['chapter_number']}"
                    translated_title = chapter['translated_title'] or "–ù–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞"
                    print(f"  {chapter['chapter_number']:3d}. {title[:50]}{'...' if len(title) > 50 else ''}")
                    print(f"       –°—Ç–∞—Ç—É—Å: {chapter['status']}, –°–∏–º–≤–æ–ª–æ–≤: {chapter['text_length']}")
                    if chapter['translated_title']:
                        print(f"       –ü–µ—Ä–µ–≤–æ–¥: {translated_title[:50]}{'...' if len(translated_title) > 50 else ''}")
                    print()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –≥–ª–∞–≤ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• 10 –ì–õ–ê–í")
                print("-" * 40)
                
                cursor.execute("""
                    SELECT chapter_number, original_title, original_text, translated_title, translated_text
                    FROM chapters 
                    WHERE original_text IS NOT NULL AND LENGTH(original_text) > 100
                    ORDER BY chapter_number 
                    LIMIT 10
                """)
                
                detailed_chapters = cursor.fetchall()
                
                all_content = ""
                for i, chapter in enumerate(detailed_chapters, 1):
                    title = chapter['original_title'] or f"Á¨¨{chapter['chapter_number']}Á´†"
                    content = chapter['original_text'] or ""
                    
                    print(f"\n{i}. {title}")
                    print(f"   –ù–æ–º–µ—Ä –≥–ª–∞–≤—ã: {chapter['chapter_number']}")
                    print(f"   –°–∏–º–≤–æ–ª–æ–≤: {len(content)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –≥–ª–∞–≤—ã
                    preview = content[:300].replace('\n', ' ').strip()
                    print(f"   –ù–∞—á–∞–ª–æ: {preview}{'...' if len(content) > 300 else ''}")
                    
                    if chapter['translated_title']:
                        print(f"   –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {chapter['translated_title']}")
                    
                    all_content += "\n\n" + content
                
                if all_content.strip():
                    print(f"\nüé® –ê–ù–ê–õ–ò–ó –°–¢–ò–õ–Ø –ò –°–û–î–ï–†–ñ–ò–ú–û–ì–û")
                    print("-" * 40)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∏—Ç–∞–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
                    chinese_chars = len(re.findall(r'[\u4e00-\u9fff]', all_content))
                    total_chars = len(all_content)
                    
                    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_chars:,}")
                    print(f"–ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã: {chinese_chars:,} ({chinese_chars/total_chars*100:.1f}%)")
                    
                    # –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                    print(f"\nüë• –ü–ï–†–°–û–ù–ê–ñ–ò –ò –ò–ú–ï–ù–ê")
                    print("-" * 20)
                    
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–∑ –ø–µ—Ä–≤—ã—Ö –≥–ª–∞–≤
                    main_characters = ['Â≠üÊµ©', 'ËÆ∏Â∏àÂßê', 'ÁéãËÖæÈ£û', '‰∏äÂÆò‰øÆ', 'ËµµÊ≠¶Âàö', 'Èü©ÂÆó']
                    for char in main_characters:
                        count = all_content.count(char)
                        if count > 0:
                            print(f"  - {char}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                    
                    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç
                    print(f"\nüèîÔ∏è –õ–û–ö–ê–¶–ò–ò")
                    print("-" * 20)
                    locations = ['Èù†Â±±ÂÆó', 'ËµµÂõΩ', 'ÂçóÂüü', '‰∏úÂúü', 'Â§ßÂîê', 'ÈïøÂÆâ', 'Â§ßÈùíÂ±±']
                    for location in locations:
                        count = all_content.count(location)
                        if count > 0:
                            print(f"  - {location}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                    
                    # –ò—â–µ–º —Ç–µ—Ä–º–∏–Ω—ã –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏
                    print(f"\n‚öîÔ∏è –¢–ï–†–ú–ò–ù–´ –ö–£–õ–¨–¢–ò–í–ê–¶–ò–ò")
                    print("-" * 20)
                    terms = ['ÂáùÊ∞î', '‰øÆ‰∏∫', 'ÁÅµÁü≥', '‰∏πËçØ', 'ÂÜÖÈó®', 'Â§ñÂÆó', 'ÊùÇÂΩπ', 'ÈïøËÄÅ', 'ÂºüÂ≠ê']
                    for term in terms:
                        count = all_content.count(term)
                        if count > 0:
                            print(f"  - {term}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            else:
                print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ - –≥–ª–∞–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ—Å—Å–∞—Ä–∏–π
        if 'glossary' in tables:
            print(f"\nüìö –ì–õ–û–°–°–ê–†–ò–ô")
            print("-" * 40)
            
            cursor.execute("SELECT COUNT(*) FROM glossary")
            glossary_count = cursor.fetchone()[0]
            print(f"–ó–∞–ø–∏—Å–µ–π –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–∏: {glossary_count}")
            
            if glossary_count > 0:
                cursor.execute("""
                    SELECT category, COUNT(*) as count 
                    FROM glossary 
                    GROUP BY category
                """)
                categories = cursor.fetchall()
                for cat in categories:
                    print(f"  - {cat[0]}: {cat[1]} –∑–∞–ø–∏—Å–µ–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
                cursor.execute("SELECT english, russian, category FROM glossary LIMIT 10")
                examples = cursor.fetchall()
                if examples:
                    print("\n–ü—Ä–∏–º–µ—Ä—ã –∏–∑ –≥–ª–æ—Å—Å–∞—Ä–∏—è:")
                    for ex in examples:
                        print(f"  {ex[0]} ‚Üí {ex[1]} ({ex[2]})")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")


if __name__ == "__main__":
    check_database_contents()