#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ü–≤–µ—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

from app.utils.status_colors import status_colors


def test_status_colors():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤"""
    
    print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ü–≤–µ—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤\n")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = {
        'novel': ['pending', 'parsing', 'translating', 'editing', 'completed', 'deleted'],
        'chapter': ['pending', 'parsed', 'translated', 'edited', 'error'],
        'task_status': ['pending', 'running', 'completed', 'failed'],
        'task_type': ['parse', 'translate', 'edit', 'generate_epub']
    }
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
    for entity_type, statuses in test_cases.items():
        print(f"üìã {entity_type.upper()}:")
        for status in statuses:
            color = status_colors.get_status_color(status, entity_type)
            icon = status_colors.get_status_icon(status, entity_type)
            text = status_colors.get_status_text(status, entity_type)
            
            print(f"  {status:12} ‚Üí {color:8} | {icon:20} | {text}")
        print()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    print("üîß –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏:")
    
    # –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤
    print("  prompt_template (default=True, active=True) ‚Üí", 
          status_colors.get_prompt_template_status_color(True, True))
    print("  prompt_template (default=False, active=True) ‚Üí", 
          status_colors.get_prompt_template_status_color(False, True))
    print("  prompt_template (default=False, active=False) ‚Üí", 
          status_colors.get_prompt_template_status_color(False, False))
    
    # –õ–æ–≥–∏
    print("  log (INFO) ‚Üí", status_colors.get_log_level_color('INFO'))
    print("  log (WARNING) ‚Üí", status_colors.get_log_level_color('WARNING'))
    print("  log (ERROR) ‚Üí", status_colors.get_log_level_color('ERROR'))
    print("  log (unknown) ‚Üí", status_colors.get_log_level_color('UNKNOWN'))
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (–¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):")
    unknown_statuses = ['unknown', 'invalid', 'test']
    for status in unknown_statuses:
        for entity_type in ['novel', 'chapter', 'task_status', 'task_type']:
            color = status_colors.get_status_color(status, entity_type)
            print(f"  {entity_type}.{status} ‚Üí {color}")
    
    print()
    
    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    print("üìä –í—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞:")
    all_colors = status_colors.get_all_colors()
    for category, colors in all_colors.items():
        print(f"  {category}:")
        for status, color in colors.items():
            print(f"    {status} ‚Üí {color}")
        print()


def test_template_filters():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Jinja2 —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Jinja2 —Ñ–∏–ª—å—Ç—Ä–æ–≤:")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è Flask app –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    class MockApp:
        def __init__(self):
            self.template_filters = {}
        
        def template_filter(self, name):
            def decorator(func):
                self.template_filters[name] = func
                return func
            return decorator
    
    mock_app = MockApp()
    
    # –ò–º–ø–æ—Ä—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    from app.utils.template_filters import register_template_filters
    register_template_filters(mock_app)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    test_data = {
        'novel_status_color': ('completed', 'novel'),
        'chapter_status_color': ('translated', 'chapter'),
        'task_status_color': ('running', 'task_status'),
        'task_type_color': ('parse', 'task_type'),
        'log_level_color': ('ERROR', 'log')
    }
    
    for filter_name, (status, entity_type) in test_data.items():
        if filter_name in mock_app.template_filters:
            result = mock_app.template_filters[filter_name](status)
            print(f"  {filter_name}('{status}') ‚Üí {result}")
        else:
            print(f"  ‚ùå {filter_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print()


def test_color_consistency():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤"""
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
    consistency_tests = [
        ('novel', 'pending', 'task_status', 'pending'),
        ('novel', 'completed', 'task_status', 'completed'),
        ('novel', 'deleted', 'chapter', 'error'),
    ]
    
    for entity1, status1, entity2, status2 in consistency_tests:
        color1 = status_colors.get_status_color(status1, entity1)
        color2 = status_colors.get_status_color(status2, entity2)
        
        if color1 == color2:
            print(f"  ‚úÖ {entity1}.{status1} ({color1}) == {entity2}.{status2} ({color2})")
        else:
            print(f"  ‚ùå {entity1}.{status1} ({color1}) != {entity2}.{status2} ({color2})")
    
    print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –¶–í–ï–¢–û–í –°–¢–ê–¢–£–°–û–í")
    print("=" * 60)
    
    try:
        test_status_colors()
        test_template_filters()
        test_color_consistency()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ñ–∞–π–ª–∞—Ö:")
        print("   - STATUS_COLORS_ANALYSIS.md")
        print("   - STATUS_COLORS_GUIDE.md")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == '__main__':
    exit(main()) 