#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è is_active –≤ —Ç–∞–±–ª–∏—Ü—É chapters
"""
import sqlite3
import os
from pathlib import Path

def migrate_chapters_table():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_active –≤ —Ç–∞–±–ª–∏—Ü—É chapters"""
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = Path(__file__).parent / 'instance' / 'novel_translator.db'
    
    if not db_path.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {db_path}")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª–µ is_active
        cursor.execute("PRAGMA table_info(chapters)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'is_active' in columns:
            print("‚úÖ –ü–æ–ª–µ is_active —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ chapters")
            return True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_active
        print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_active –≤ —Ç–∞–±–ª–∏—Ü—É chapters...")
        cursor.execute("ALTER TABLE chapters ADD COLUMN is_active BOOLEAN DEFAULT 1")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        cursor.execute("UPDATE chapters SET is_active = 1 WHERE is_active IS NULL")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()
        
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("   - –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ is_active –≤ —Ç–∞–±–ª–∏—Ü—É chapters")
        print("   - –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–ª–∞–≤—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def create_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    from app import create_app, db
    from app.models.novel import Novel
    from app.models.chapter import Chapter
    from app.models.translation import Translation
    from app.models.task import Task
    from app.models.prompt_template import PromptTemplate
    from app.models.glossary import GlossaryItem
    from app.models.settings import SystemSettings
    
    app = create_app()
    with app.app_context():
        db.create_all()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")

if __name__ == "__main__":
    print("=" * 60)
    print("–ú–ò–ì–†–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶–´ CHAPTERS")
    print("=" * 60)
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    db_path = Path(__file__).parent / 'instance' / 'novel_translator.db'
    if not db_path.exists():
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        create_database()
    
    # –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    success = migrate_chapters_table()
    
    if success:
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤")
    else:
        print("\nüí• –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!") 