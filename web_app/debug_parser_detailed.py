#!/usr/bin/env python3
"""
–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –Ω–æ–≤–µ–ª–ª—ã "–ü–æ–∫—Ä—ã–≤–∞—è –ù–µ–±–µ—Å–∞"
"""
import sys
import os
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models import Novel, Chapter, Task
from app.services.parser_service import WebParserService

def test_parser_step_by_step():
    """–ü–æ—à–∞–≥–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞"""
    app = create_app()
    with app.app_context():
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê –ù–û–í–ï–õ–õ–´ '–ü–û–ö–†–´–í–ê–Ø –ù–ï–ë–ï–°–ê'")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.get(2)
        if not novel:
            print("‚ùå –ù–æ–≤–µ–ª–ª–∞ —Å ID=2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        print(f"üìñ –ù–æ–≤–µ–ª–ª–∞: {novel.title}")
        print(f"üîó URL: {novel.source_url}")
        print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {novel.config}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        chapters_before = Chapter.query.filter_by(novel_id=2, is_active=True).count()
        print(f"üìö –ì–ª–∞–≤ –≤ –ë–î –¥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {chapters_before}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = WebParserService()
        
        try:
            print("\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–ê–†–°–ò–ù–ì...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥–ª–∞–≤
            print("\n1Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤...")
            chapters_data = parser.parse_novel_chapters(novel)
            
            if not chapters_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤")
                return
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(chapters_data)}")
            for i, chapter in enumerate(chapters_data[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   –ì–ª–∞–≤–∞ {chapter['number']}: {chapter['title']} - {chapter['url']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã
            if chapters_data:
                print(f"\n2Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≥–ª–∞–≤—ã {chapters_data[0]['number']}...")
                content = parser.parse_chapter_content(chapters_data[0]['url'], chapters_data[0]['number'])
                
                if content:
                    print(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—É—á–µ–Ω–æ: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üìÑ –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: {content[:200]}...")
                    
                    # –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
                    print(f"\n3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≥–ª–∞–≤–∞
                    existing = Chapter.query.filter_by(
                        novel_id=2,
                        chapter_number=chapters_data[0]['number']
                    ).first()
                    
                    if existing:
                        print(f"‚ö†Ô∏è –ì–ª–∞–≤–∞ {chapters_data[0]['number']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥–ª–∞–≤—É
                        chapter = Chapter(
                            novel_id=2,
                            chapter_number=chapters_data[0]['number'],
                            original_title=chapters_data[0]['title'],
                            url=chapters_data[0]['url'],
                            original_text=content,
                            status='parsed'
                        )
                        
                        try:
                            db.session.add(chapter)
                            db.session.commit()
                            print(f"‚úÖ –ì–ª–∞–≤–∞ {chapters_data[0]['number']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
                            db.session.rollback()
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            chapters_after = Chapter.query.filter_by(novel_id=2, is_active=True).count()
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print(f"   –ì–ª–∞–≤ –≤ –ë–î –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {chapters_after}")
            print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤: {chapters_after - chapters_before}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            parser.cleanup_driver()

def check_database_state():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    app = create_app()
    with app.app_context():
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 40)
        
        # –ù–æ–≤–µ–ª–ª–∞
        novel = Novel.query.get(2)
        print(f"üìñ –ù–æ–≤–µ–ª–ª–∞: {novel.title}")
        print(f"   ID: {novel.id}")
        print(f"   –í—Å–µ–≥–æ –≥–ª–∞–≤: {novel.total_chapters}")
        print(f"   –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {novel.parsed_chapters}")
        print(f"   –°—Ç–∞—Ç—É—Å: {novel.status}")
        print(f"   –ê–∫—Ç–∏–≤–Ω–∞: {novel.is_active}")
        
        # –ì–ª–∞–≤—ã
        chapters = Chapter.query.filter_by(novel_id=2).all()
        print(f"\nüìö –ì–ª–∞–≤—ã –≤ –ë–î (–≤—Å–µ): {len(chapters)}")
        for chapter in chapters:
            print(f"   –ì–ª–∞–≤–∞ {chapter.chapter_number}: {chapter.status} (–∞–∫—Ç–∏–≤–Ω–∞: {chapter.is_active})")
        
        # –ó–∞–¥–∞—á–∏
        tasks = Task.query.filter_by(novel_id=2, task_type='parse').order_by(Task.created_at.desc()).all()
        print(f"\nüìã –ó–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(tasks)}")
        for task in tasks:
            print(f"   –ó–∞–¥–∞—á–∞ {task.id}: {task.status} - {task.progress}% (—Å–æ–∑–¥–∞–Ω–∞: {task.created_at})")

if __name__ == '__main__':
    print("üîß –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –¥–æ —Ç–µ—Å—Ç–∞
    check_database_state()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
    test_parser_step_by_step()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    check_database_state()
    
    print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê") 