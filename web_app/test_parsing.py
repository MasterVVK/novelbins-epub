#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models import Novel, Chapter, Task
from app.services.parser_service import WebParserService
import time

def test_parsing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    app = create_app()
    
    with app.app_context():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –Ω–æ–≤–µ–ª–ª—É
            novel = Novel.query.filter_by(is_active=True).first()
            if not novel:
                print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–µ–ª–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –Ω–æ–≤–µ–ª–ª—ã: {novel.title}")
            print(f"üìñ URL: {novel.source_url}")
            print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {novel.config}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if novel.config:
                max_chapters = novel.config.get('max_chapters', 10)
                request_delay = novel.config.get('request_delay', 1.0)
                print(f"üìä –ú–∞–∫—Å–∏–º—É–º –≥–ª–∞–≤: {max_chapters}")
                print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {request_delay}")
            else:
                print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–æ–≤–µ–ª–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            task = Task(
                novel_id=novel.id,
                task_type='parse',
                status='running',
                progress=0
            )
            db.session.add(task)
            db.session.commit()
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task.id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
            start_time = time.time()
            
            parser = WebParserService()
            success = parser.parse_novel(novel.id)
            
            end_time = time.time()
            duration = end_time - start_time
            
            print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'—É—Å–ø–µ—à–Ω–æ' if success else '—Å –æ—à–∏–±–∫–æ–π'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            chapters_count = Chapter.query.filter_by(novel_id=novel.id, is_active=True).count()
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ –≥–ª–∞–≤: {chapters_count}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            task.status = 'completed' if success else 'failed'
            task.progress = 100 if success else 0
            db.session.commit()
            
            if success:
                print("üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

if __name__ == '__main__':
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    test_parsing()
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ") 