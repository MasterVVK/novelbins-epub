#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

from app import create_app
from app.utils.status_colors import status_colors


def test_flask_filters():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Flask"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Flask\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = create_app('testing')
    
    with app.app_context():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        test_cases = [
            ('novel', 'completed', 'success'),
            ('novel', 'pending', 'secondary'),
            ('chapter', 'translated', 'primary'),
            ('chapter', 'error', 'danger'),
            ('task_status', 'running', 'warning'),
            ('task_status', 'failed', 'danger'),
            ('task_type', 'parse', 'info'),
            ('task_type', 'edit', 'warning'),
        ]
        
        print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:")
        for entity_type, status, expected_color in test_cases:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä status_color
            color = app.jinja_env.filters['status_color'](status, entity_type)
            result = "‚úÖ" if color == expected_color else "‚ùå"
            print(f"  {result} {entity_type}.{status} ‚Üí {color} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_color})")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä status_badge_class
            badge_class = app.jinja_env.filters['status_badge_class'](status, entity_type)
            expected_class = f"badge bg-{expected_color}"
            result = "‚úÖ" if badge_class == expected_class else "‚ùå"
            print(f"  {result} badge_class ‚Üí {badge_class}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä status_icon
            icon = app.jinja_env.filters['status_icon'](status, entity_type)
            print(f"  üìå icon ‚Üí {icon}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä status_text
            text = app.jinja_env.filters['status_text'](status, entity_type)
            print(f"  üìù text ‚Üí {text}")
            print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        print("üîß –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:")
        
        # novel_status_color
        color = app.jinja_env.filters['novel_status_color']('completed')
        print(f"  novel_status_color('completed') ‚Üí {color}")
        
        # chapter_status_color
        color = app.jinja_env.filters['chapter_status_color']('translated')
        print(f"  chapter_status_color('translated') ‚Üí {color}")
        
        # task_status_color
        color = app.jinja_env.filters['task_status_color']('running')
        print(f"  task_status_color('running') ‚Üí {color}")
        
        # task_type_color
        color = app.jinja_env.filters['task_type_color']('parse')
        print(f"  task_type_color('parse') ‚Üí {color}")
        
        # log_level_color
        color = app.jinja_env.filters['log_level_color']('ERROR')
        print(f"  log_level_color('ERROR') ‚Üí {color}")
        
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞
        print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞:")
        
        template_code = """
        <span class="{{ status|status_badge_class('novel') }}">
            <i class="{{ status|status_icon('novel') }}"></i>
            {{ status|status_text('novel') }}
        </span>
        """
        
        template = app.jinja_env.from_string(template_code)
        rendered = template.render(status='completed')
        
        print(f"  –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è status='completed':")
        print(f"  {rendered}")
        
        print()
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Flask —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FLASK –§–ò–õ–¨–¢–†–û–í")
    print("=" * 60)
    
    try:
        test_flask_filters()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == '__main__':
    exit(main()) 