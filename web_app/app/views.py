from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, current_app
from app.models import Novel, Chapter, Task, PromptTemplate, SystemSettings
from app import db, socketio
from sqlalchemy.orm.attributes import flag_modified
from app.services.translator_service import TranslatorService
from app.services.parser_service import WebParserService
from app.services.editor_service import EditorService
from app.services.log_service import LogService
from app.services.parser_integration import ParserIntegrationService
import threading
import time
import logging
from datetime import datetime
from app import create_app

logger = logging.getLogger(__name__)

main_bp = Blueprint('main', __name__)


@main_bp.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –¥–∞—à–±–æ—Ä–¥"""
    novels = Novel.query.filter_by(is_active=True).all()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_novels = len(novels)
    total_chapters = sum(n.total_chapters for n in novels)
    translated_chapters = sum(n.translated_chapters for n in novels)
    edited_chapters = sum(n.edited_chapters for n in novels)

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    active_tasks = Task.query.filter_by(status='running').order_by(Task.priority, Task.created_at).limit(10).all()

    return render_template('dashboard.html',
                         novels=novels,
                         total_novels=total_novels,
                         total_chapters=total_chapters,
                         translated_chapters=translated_chapters,
                         edited_chapters=edited_chapters,
                         active_tasks=active_tasks)


@main_bp.route('/novels')
def novels():
    """–°–ø–∏—Å–æ–∫ –Ω–æ–≤–µ–ª–ª"""
    novels = Novel.query.filter_by(is_active=True).order_by(Novel.created_at.desc()).all()
    return render_template('novels.html', novels=novels)


@main_bp.route('/novels/deleted')
def deleted_novels():
    """–°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–µ–ª–ª"""
    novels = Novel.query.filter_by(is_active=False).order_by(Novel.updated_at.desc()).all()
    return render_template('deleted_novels.html', novels=novels)


@main_bp.route('/novels/new', methods=['GET', 'POST'])
def new_novel():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–≤–µ–ª–ª—ã"""
    if request.method == 'POST':
        title = request.form.get('title')
        source_url = request.form.get('source_url')
        source_type = request.form.get('source_type', 'novelbins')
        auto_detect = request.form.get('auto_detect', 'false') == 'true'

        if not title:
            flash('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã', 'error')
            return redirect(url_for('main.new_novel'))

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è EPUB –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if source_type == 'epub':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            epub_file = request.files.get('epub_file')
            if epub_file and epub_file.filename:
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
                if not epub_file.filename.lower().endswith('.epub'):
                    flash('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .epub', 'error')
                    return redirect(url_for('main.new_novel'))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (100MB)
                epub_file.seek(0, 2)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                file_size = epub_file.tell()
                epub_file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
                
                max_size = 100 * 1024 * 1024  # 100MB
                if file_size > max_size:
                    flash(f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.1f}MB (–º–∞–∫—Å–∏–º—É–º 100MB)', 'error')
                    return redirect(url_for('main.new_novel'))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                import os
                from werkzeug.utils import secure_filename
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è EPUB —Ñ–∞–π–ª–æ–≤
                epub_dir = os.path.join(current_app.instance_path, 'epub_files')
                os.makedirs(epub_dir, exist_ok=True)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                filename = secure_filename(epub_file.filename)
                base_name, ext = os.path.splitext(filename)
                counter = 1
                while os.path.exists(os.path.join(epub_dir, filename)):
                    filename = f"{base_name}_{counter}{ext}"
                    counter += 1
                
                epub_path = os.path.join(epub_dir, filename)
                epub_file.save(epub_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ EPUB
                try:
                    import zipfile
                    with zipfile.ZipFile(epub_path, 'r') as epub_zip:
                        if 'META-INF/container.xml' not in epub_zip.namelist():
                            os.remove(epub_path)  # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª
                            flash('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º EPUB —Ñ–∞–π–ª–æ–º', 'error')
                            return redirect(url_for('main.new_novel'))
                except Exception as e:
                    if os.path.exists(epub_path):
                        os.remove(epub_path)
                    flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ EPUB —Ñ–∞–π–ª–∞: {str(e)}', 'error')
                    return redirect(url_for('main.new_novel'))
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–∫ source_url
                source_url = epub_path
                flash(f'EPUB —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}', 'info')
            elif not source_url:
                flash('–î–ª—è EPUB –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª', 'error')
                return redirect(url_for('main.new_novel'))
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL
            if not source_url:
                flash('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞', 'error')
                return redirect(url_for('main.new_novel'))

        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if auto_detect and source_url:
            detected_source = ParserIntegrationService.detect_source_from_url(source_url)
            if detected_source:
                source_type = detected_source
                flash(f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {detected_source}', 'info')
            else:
                flash('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π', 'warning')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è URL –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if source_url and not ParserIntegrationService.validate_url_for_source(source_url, source_type):
            detected = ParserIntegrationService.detect_source_from_url(source_url)
            if detected and detected != source_type:
                if source_type == 'epub':
                    flash(f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ EPUB —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å.', 'warning')
                else:
                    flash(f'–í–Ω–∏–º–∞–Ω–∏–µ: URL –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "{detected}", –Ω–æ –≤—ã–±—Ä–∞–Ω "{source_type}"', 'warning')

        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        editing_quality_mode = request.form.get('editing_quality_mode', 'balanced')
        editing_temperature_map = {
            'fast': 0.5,
            'balanced': 0.7,
            'quality': 0.9
        }
        editing_temperature = editing_temperature_map.get(editing_quality_mode, 0.7)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ü–∏—é "–≤—Å–µ –≥–ª–∞–≤—ã"
        all_chapters = request.form.get('all_chapters', 'false') == 'true'
        
        novel = Novel(
            title=title,
            source_url=source_url,
            source_type=source_type,
            config={
                'max_chapters': int(request.form.get('max_chapters', 100)),
                'start_chapter': int(request.form.get('start_chapter', 1)),
                'all_chapters': all_chapters,
                'request_delay': float(request.form.get('request_delay', 1.0)),
                'translation_model': request.form.get('translation_model', 'gemini-2.5-flash'),
                'translation_temperature': float(request.form.get('translation_temperature', 0.1)),
                'editing_temperature': editing_temperature,
                'editing_quality_mode': editing_quality_mode,
                'filter_text': request.form.get('filter_text', '').strip()
            }
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ EPUB —Ñ–∞–π–ª—É –µ—Å–ª–∏ —ç—Ç–æ EPUB –∏—Å—Ç–æ—á–Ω–∏–∫
        if source_type == 'epub':
            novel.set_epub_file(source_url)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SOCKS –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        proxy_enabled = request.form.get('proxy_enabled', 'false') == 'true'
        socks_proxy = request.form.get('socks_proxy', '').strip()
        
        if proxy_enabled and socks_proxy:
            novel.set_socks_proxy(socks_proxy)
            print(f"üåê SOCKS –ø—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–π –Ω–æ–≤–µ–ª–ª—ã: {socks_proxy}")

        db.session.add(novel)
        db.session.commit()

        flash(f'–ù–æ–≤–µ–ª–ª–∞ "{title}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º {source_type}', 'success')
        return redirect(url_for('main.novel_detail', novel_id=novel.id))

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
    available_sources = ParserIntegrationService.get_available_sources_with_info()
    return render_template('new_novel.html', available_sources=available_sources)


@main_bp.route('/api/preview-epub', methods=['POST'])
def api_preview_epub():
    """API endpoint –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ EPUB —Ñ–∞–π–ª–∞"""
    try:
        if 'epub_file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}), 400
        
        epub_file = request.files['epub_file']
        if not epub_file.filename:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if not epub_file.filename.lower().endswith('.epub'):
            return jsonify({'error': '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .epub'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        epub_file.seek(0, 2)
        file_size = epub_file.tell()
        epub_file.seek(0)
        
        max_size = 100 * 1024 * 1024  # 100MB
        if file_size > max_size:
            return jsonify({'error': f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.1f}MB'}), 400
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        import tempfile
        import os
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.epub') as temp_file:
            epub_file.save(temp_file.name)
            temp_path = temp_file.name
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º EPUB
            from parsers.sources.epub_parser import EPUBParser
            
            parser = EPUBParser(epub_path=temp_path)
            if not parser.chapters:
                return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≥–ª–∞–≤—ã –∏–∑ EPUB —Ñ–∞–π–ª–∞'}), 400
            
            book_info = parser.get_book_info()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö –≥–ª–∞–≤–∞—Ö
            preview_chapters = []
            for i, chapter in enumerate(parser.chapters[:5]):  # –ü–µ—Ä–≤—ã–µ 5 –≥–ª–∞–≤
                preview_chapters.append({
                    'number': chapter['number'],
                    'title': chapter['title'],
                    'word_count': chapter['word_count']
                })
            
            result = {
                'success': True,
                'book_info': {
                    'title': book_info['title'],
                    'author': book_info['author'],
                    'total_chapters': book_info['total_chapters'],
                    'language': book_info['language']
                },
                'preview_chapters': preview_chapters,
                'file_size_mb': round(file_size / 1024 / 1024, 1)
            }
            
            return jsonify(result)
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                os.unlink(temp_path)
                
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ EPUB: {str(e)}'}), 500


@main_bp.route('/api/detect-source', methods=['POST'])
def api_detect_source():
    """API endpoint –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ URL"""
    try:
        data = request.get_json()
        url = data.get('url')
        
        if not url:
            return jsonify({'error': 'URL –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        
        detected = ParserIntegrationService.detect_source_from_url(url)
        
        if detected:
            source_info = ParserIntegrationService.get_parser_info(detected)
            return jsonify({
                'detected': True,
                'source': detected,
                'info': source_info
            })
        else:
            return jsonify({
                'detected': False,
                'message': '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω'
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


@main_bp.route('/novels/<int:novel_id>/edit', methods=['GET', 'POST'])
def edit_novel(novel_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã"""
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    db.session.expire_all()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π SQLAlchemy –∑–∞–ø—Ä–æ—Å
    novel = Novel.query.get_or_404(novel_id)
    
    prompt_templates = PromptTemplate.query.filter_by(is_active=True).all()
    
    if request.method == 'POST':
        title = request.form.get('title')
        original_title = request.form.get('original_title')
        author = request.form.get('author')
        source_url = request.form.get('source_url')
        source_type = request.form.get('source_type', 'novelbins')
        prompt_template_id = request.form.get('prompt_template_id')
        
        if not title or not source_url:
            flash('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error')
            return redirect(url_for('main.edit_novel', novel_id=novel_id))

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        novel.title = title
        novel.original_title = original_title if original_title else None
        novel.author = author if author else None
        novel.source_url = source_url
        novel.source_type = source_type
        
        # –î–ª—è EPUB –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ epub_file_path
        if source_type == 'epub':
            novel.epub_file_path = source_url
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ URL/–ø—É—Ç–∏ –∏ —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if source_url and not ParserIntegrationService.validate_url_for_source(source_url, source_type):
            detected = ParserIntegrationService.detect_source_from_url(source_url)
            if detected and detected != source_type:
                if source_type == 'epub':
                    flash(f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ EPUB —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å.', 'warning')
                else:
                    flash(f'–í–Ω–∏–º–∞–Ω–∏–µ: URL –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "{detected}", –Ω–æ –≤—ã–±—Ä–∞–Ω "{source_type}"', 'warning')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
        if prompt_template_id:
            novel.prompt_template_id = int(prompt_template_id) if prompt_template_id != 'none' else None
        else:
            novel.prompt_template_id = None

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not novel.config:
            novel.config = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        max_chapters = request.form.get('max_chapters')
        start_chapter = request.form.get('start_chapter')
        request_delay = request.form.get('request_delay')
        translation_model = request.form.get('translation_model')
        translation_temperature = request.form.get('translation_temperature')
        editing_quality_mode = request.form.get('editing_quality_mode')
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        editing_temperature_map = {
            'fast': 0.5,
            'balanced': 0.7,
            'quality': 0.9
        }
        editing_temperature = editing_temperature_map.get(editing_quality_mode, 0.7)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è '{novel.title}':")
        print(f"   max_chapters: {max_chapters} (—Ç–∏–ø: {type(max_chapters)})")
        print(f"   request_delay: {request_delay} (—Ç–∏–ø: {type(request_delay)})")
        print(f"   translation_model: {translation_model}")
        print(f"   translation_temperature: {translation_temperature}")
        print(f"   editing_quality_mode: {editing_quality_mode} -> editing_temperature: {editing_temperature}")
        print(f"   –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {novel.config}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ü–∏—é "–≤—Å–µ –≥–ª–∞–≤—ã"
        all_chapters = request.form.get('all_chapters', 'false') == 'true'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏–π
        new_config = {
            'max_chapters': int(max_chapters) if max_chapters else 100,
            'start_chapter': int(start_chapter) if start_chapter else 1,
            'all_chapters': all_chapters,
            'request_delay': float(request_delay) if request_delay else 1.0,
            'translation_model': translation_model or 'gemini-2.5-flash',
            'translation_temperature': float(translation_temperature) if translation_temperature else 0.1,
            'editing_temperature': float(editing_temperature) if editing_temperature else 0.7,
            'editing_quality_mode': editing_quality_mode or 'balanced',
            'filter_text': request.form.get('filter_text', '').strip()
        }
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ config
        novel.config = new_config
        
        # –í–∞–∂–Ω–æ! –£–≤–µ–¥–æ–º–ª—è–µ–º SQLAlchemy –æ —Ç–æ–º, —á—Ç–æ JSON –ø–æ–ª–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        flag_modified(novel, 'config')
        
        print(f"   –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {novel.config}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth_enabled = request.form.get('auth_enabled', 'false') == 'true'
        auth_cookies = request.form.get('auth_cookies', '').strip()
        
        if auth_enabled and auth_cookies:
            novel.set_auth_cookies(auth_cookies)
            print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {len(auth_cookies)} —Å–∏–º–≤–æ–ª–æ–≤ cookies")
        else:
            novel.clear_auth()
            print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º VIP –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        vip_cookies_enabled = request.form.get('vip_cookies_enabled', 'false') == 'true'
        vip_cookies = request.form.get('vip_cookies', '').strip()
        
        if vip_cookies_enabled and vip_cookies:
            novel.set_vip_cookies(vip_cookies)
            print(f"üíé VIP –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {len(vip_cookies)} —Å–∏–º–≤–æ–ª–æ–≤ cookies")
        else:
            novel.vip_cookies = None
            novel.vip_cookies_enabled = False
            print(f"üíé VIP –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SOCKS –ø—Ä–æ–∫—Å–∏
        proxy_enabled = request.form.get('proxy_enabled', 'false') == 'true'
        socks_proxy = request.form.get('socks_proxy', '').strip()
        
        if proxy_enabled and socks_proxy:
            novel.set_socks_proxy(socks_proxy)
            print(f"üåê SOCKS –ø—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω: {socks_proxy}")
        else:
            novel.clear_proxy()
            print(f"üåê SOCKS –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EPUB
        epub_add_chapter_prefix = request.form.get('epub_add_chapter_prefix', 'auto')
        epub_chapter_prefix_text = request.form.get('epub_chapter_prefix_text', '–ì–ª–∞–≤–∞').strip()
        
        novel.epub_add_chapter_prefix = epub_add_chapter_prefix
        novel.epub_chapter_prefix_text = epub_chapter_prefix_text or '–ì–ª–∞–≤–∞'
        
        print(f"üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∏ EPUB: –ø—Ä–µ—Ñ–∏–∫—Å={epub_add_chapter_prefix}, —Ç–µ–∫—Å—Ç='{epub_chapter_prefix_text}'")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–µ—Å—Å–∏–∏
        db.session.add(novel)
        db.session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –±–∞–∑–µ
        db.session.refresh(novel)
        print(f"üîç –ü–æ—Å–ª–µ commit - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {novel.config}")
        print(f"   max_chapters –ø–æ—Å–ª–µ commit: {novel.config.get('max_chapters')}")
        
        flash(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–µ–ª–ª—ã "{title}" –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success')
        return redirect(url_for('main.novel_detail', novel_id=novel.id))

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–∞
    print(f"üîç GET –∑–∞–ø—Ä–æ—Å –¥–ª—è '{novel.title}' - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {novel.config}")
    if novel.config:
        print(f"   max_chapters: {novel.config.get('max_chapters')}")
        print(f"   request_delay: {novel.config.get('request_delay')}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
    available_sources = ParserIntegrationService.get_available_sources_with_info()
    return render_template('edit_novel.html', novel=novel, prompt_templates=prompt_templates, available_sources=available_sources)


@main_bp.route('/novels/<int:novel_id>/delete', methods=['POST'])
def delete_novel(novel_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã"""
    novel = Novel.query.get_or_404(novel_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    novel_title = novel.title
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
    novel.soft_delete()
    db.session.commit()
    
    flash(f'–ù–æ–≤–µ–ª–ª–∞ "{novel_title}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', 'success')
    return redirect(url_for('main.novels'))


@main_bp.route('/novels/<int:novel_id>/restore', methods=['POST'])
def restore_novel(novel_id):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã"""
    novel = Novel.query.get_or_404(novel_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    novel_title = novel.title
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
    novel.restore()
    db.session.commit()
    
    flash(f'–ù–æ–≤–µ–ª–ª–∞ "{novel_title}" —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'success')
    return redirect(url_for('main.novels'))


@main_bp.route('/novels/<int:novel_id>')
def novel_detail(novel_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–µ–ª–ª—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 50, type=int)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 –≥–ª–∞–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if per_page > 100:
        per_page = 100
    elif per_page < 10:
        per_page = 10
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    db.session.expire_all()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π SQLAlchemy –∑–∞–ø—Ä–æ—Å, –Ω–æ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    novel = Novel.query.get_or_404(novel_id)
    db.session.refresh(novel)
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    chapters_query = Chapter.query.filter_by(novel_id=novel_id).order_by(Chapter.chapter_number)
    chapters_pagination = chapters_query.paginate(
        page=page, 
        per_page=per_page, 
        error_out=False
    )
    chapters = chapters_pagination.items
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤–µ–ª–ª—ã (–≤–∫–ª—é—á–∞—è EPUB)
    tasks = Task.query.filter_by(novel_id=novel_id).order_by(Task.updated_at.desc()).all()

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–µ–ª–ª—ã '{novel.title}' - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {novel.config}")
    if novel.config:
        if isinstance(novel.config, dict):
            print(f"   max_chapters: {novel.config.get('max_chapters')} (—Ç–∏–ø: {type(novel.config.get('max_chapters'))})")
            print(f"   request_delay: {novel.config.get('request_delay')}")
        else:
            print(f"   config —Ç–∏–ø: {type(novel.config)}")
            print(f"   config –∑–Ω–∞—á–µ–Ω–∏–µ: {novel.config}")

    return render_template('novel_detail.html', 
                         novel=novel, 
                         chapters=chapters, 
                         chapters_pagination=chapters_pagination,
                         tasks=tasks,
                         current_page=page,
                         per_page=per_page)


@main_bp.route('/novels/<int:novel_id>/parse', methods=['POST'])
def start_parsing(novel_id):
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–µ–ª–ª—ã —á–µ—Ä–µ–∑ Celery"""
    print(f"üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–µ–ª–ª—ã {novel_id}")

    novel = Novel.query.get_or_404(novel_id)
    print(f"üìñ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–µ–ª–ª–∞: {novel.title}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–∞—Ä—Å–∏–Ω–≥
    if novel.parsing_task_id:
        from celery.result import AsyncResult
        from app import celery
        task = AsyncResult(novel.parsing_task_id, app=celery)
        if task.state in ['PENDING', 'STARTED', 'PROGRESS']:
            flash('–ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–π –Ω–æ–≤–µ–ª–ª—ã', 'warning')
            return redirect(url_for('main.novel_detail', novel_id=novel_id))

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–æ–≤–µ–ª–ª—ã
    start_chapter = None
    max_chapters = None

    if novel.config:
        start_chapter = novel.config.get('start_chapter')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏—é "–≤—Å–µ –≥–ª–∞–≤—ã"
        if novel.config.get('all_chapters'):
            max_chapters = None  # None = –≤—Å–µ –≥–ª–∞–≤—ã
        else:
            max_chapters = novel.config.get('max_chapters')

    # –ó–∞–ø—É—Å–∫–∞–µ–º Celery –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏ czbooks_queue
    try:
        from app.celery_tasks import parse_novel_chapters_task

        task = parse_novel_chapters_task.apply_async(
            kwargs={
                'novel_id': novel_id,
                'start_chapter': start_chapter,
                'max_chapters': max_chapters,
                'use_xvfb': True
            },
            queue='czbooks_queue'
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id
        novel.parsing_task_id = task.id
        novel.status = 'parsing'
        db.session.commit()

        print(f"‚úÖ Celery –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task.id}")
        flash('–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Celery. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–¥–∞—á–∏".', 'info')

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Celery –∑–∞–¥–∞—á–∏: {e}")
        flash(f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Celery worker –∑–∞–ø—É—â–µ–Ω.', 'error')

    return redirect(url_for('main.novel_detail', novel_id=novel_id))


@main_bp.route('/novels/<int:novel_id>/translate', methods=['POST'])
def start_translation(novel_id):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–æ–≤–µ–ª–ª—ã"""
    print(f"üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –Ω–æ–≤–µ–ª–ª—ã {novel_id}")
    
    novel = Novel.query.get_or_404(novel_id)
    print(f"üìñ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–µ–ª–ª–∞: {novel.title}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞
    prompt_template = novel.get_prompt_template()
    if not prompt_template:
        flash('–ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.', 'error')
        return redirect(url_for('main.novel_detail', novel_id=novel_id))

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    # –ò–∑–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É: –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –≥–ª–∞–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å 'translated'
    chapters = Chapter.query.filter(
        Chapter.novel_id == novel_id,
        Chapter.status == 'parsed',
        Chapter.id.isnot(None)
    ).order_by(Chapter.chapter_number).all()

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {len(chapters)}")
    for ch in chapters:
        print(f"  - –ì–ª–∞–≤–∞ {ch.chapter_number}: {ch.original_title} (—Å—Ç–∞—Ç—É—Å: {ch.status})")

    if not chapters:
        flash('–ù–µ—Ç –≥–ª–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞', 'warning')
        return redirect(url_for('main.novel_detail', novel_id=novel_id))

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–≤–æ–¥–∞
    task = Task(
        novel_id=novel_id,
        task_type='translate',
        priority=2,
        status='running',
        progress=0
    )
    db.session.add(task)
    db.session.commit()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    task_id = task.id
    prompt_template_id = prompt_template.id
    chapter_ids = [ch.id for ch in chapters]
    def translate_novel():
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        app = create_app()
        with app.app_context():
            try:
                from app.services.translator_service import TranslatorService
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–æ–ø–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                task = Task.query.get(task_id)
                novel = Novel.query.get(novel_id)
                prompt_template = PromptTemplate.query.get(prompt_template_id)
                chapters = [Chapter.query.get(cid) for cid in chapter_ids]
                
                if not task or not novel or not prompt_template:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–æ–≤–µ–ª–ª—ã
                config = {}
                if novel.config:
                    config['model_name'] = novel.config.get('translation_model')
                    config['temperature'] = novel.config.get('translation_temperature')
                    print(f"üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–æ–≤–µ–ª–ª—ã: model={config.get('model_name')}, temp={config.get('temperature')}")
                translator = TranslatorService(config=config)
                total_chapters = len(chapters)
                print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ {total_chapters} –≥–ª–∞–≤")
                
                for i, chapter in enumerate(chapters):
                    try:
                        print(f"üìù –ü–µ—Ä–µ–≤–æ–¥–∏–º –≥–ª–∞–≤—É {i+1}/{total_chapters}: {chapter.chapter_number}")
                        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∫–æ–ø–∏—é –≥–ª–∞–≤—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        chapter = Chapter.query.get(chapter.id)
                        if not chapter:
                            print(f"‚ùå –ì–ª–∞–≤–∞ {i+1} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                            return
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        progress = (i / total_chapters) * 100
                        task.update_progress(progress / 100, f"–ü–µ—Ä–µ–≤–æ–¥ –≥–ª–∞–≤—ã {chapter.chapter_number}")
                        emit_task_update(task.id, progress, 'running')
                        
                        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≥–ª–∞–≤—É
                        success = translator.translate_chapter(chapter)
                        if not success:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤—ã {chapter.chapter_number}")
                            task.fail(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤—ã {chapter.chapter_number}")
                            return
                        
                        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–ª–∞–≤–∞–º–∏
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤—ã {i+1}: {e}")
                        task.fail(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤—ã {i+1}: {e}")
                        return
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
                task.complete({
                    'translated_chapters': total_chapters,
                    'novel_id': novel_id,
                    'template_used': prompt_template.name
                })
                novel.update_stats()
                emit_task_update(task.id, 100, 'completed')
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                if 'task' in locals() and task:
                    task.fail(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                    emit_task_update(task.id, 0, 'failed')
    
    thread = threading.Thread(target=translate_novel)
    thread.start()
    
    flash(f'–ó–∞–ø—É—â–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–æ–≤–µ–ª–ª—ã "{novel.title}" —Å —à–∞–±–ª–æ–Ω–æ–º "{prompt_template.name}"', 'success')
    return redirect(url_for('main.novel_detail', novel_id=novel_id))


@main_bp.route('/novels/<int:novel_id>/start-editing', methods=['POST'])
def start_editing(novel_id):
    """–ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –Ω–æ–≤–µ–ª–ª—ã"""
    logger.info(f"üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—É –Ω–æ–≤–µ–ª–ª—ã {novel_id}")
    novel = Novel.query.get_or_404(novel_id)
    logger.info(f"üìñ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–µ–ª–ª–∞: {novel.title}")

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã
    chapters = Chapter.query.filter_by(
        novel_id=novel_id,
        status='translated',

    ).order_by(Chapter.chapter_number).all()

    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã: {len(chapters)}")
    for ch in chapters:
        logger.info(f"  - –ì–ª–∞–≤–∞ {ch.chapter_number}: {ch.original_title} (—Å—Ç–∞—Ç—É—Å: {ch.status})")

    if not chapters:
        logger.warning("‚ùå –ù–µ—Ç –≥–ª–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã")
        flash('–ù–µ—Ç –≥–ª–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã', 'warning')
        return redirect(url_for('main.novel_detail', novel_id=novel_id))

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ä–µ–¥–∞–∫—Ç—É—Ä—ã
    task = Task(
        novel_id=novel_id,
        task_type='editing',
        priority=2
    )
    db.session.add(task)
    db.session.commit()

    def edit_novel(task_id, chapter_ids):
        logger.info(f"üéØ –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –∑–∞–ø—É—â–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        from app import create_app
        app = create_app()
        
        with app.app_context():
            try:
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω")
                logger.info(f"üìù ID –≥–ª–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã: {chapter_ids}")
                logger.info(f"üìù ID –∑–∞–¥–∞—á–∏: {task_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ running
                fresh_task = Task.query.get(task_id)
                if fresh_task:
                    fresh_task.status = 'running'
                    fresh_task.started_at = datetime.utcnow()
                    db.session.add(fresh_task)
                    db.session.commit()
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å 'running'")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É {task_id}")
                    return
                
                from app.services.translator_service import TranslatorService
                from app.services.editor_service import EditorService
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –æ–±—ä–µ–∫—Ç –Ω–æ–≤–µ–ª–ª—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                fresh_novel = Novel.query.get(novel_id)
                if not fresh_novel:
                    logger.error(f"‚ùå –ù–æ–≤–µ–ª–ª–∞ —Å ID {novel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ –Ω–æ–≤–µ–ª–ª—ã
                config = {}
                if fresh_novel.config:
                    config['model_name'] = fresh_novel.config.get('translation_model')
                    config['temperature'] = fresh_novel.config.get('editing_temperature', fresh_novel.config.get('translation_temperature'))
                translator_service = TranslatorService(config=config)
                editor_service = EditorService(translator_service)
                
                total_chapters = len(chapter_ids)
                success_count = 0
                
                logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç—É—Ä—É {total_chapters} –≥–ª–∞–≤")
                
                for i, chapter_id in enumerate(chapter_ids, 1):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –æ–±—ä–µ–∫—Ç –≥–ª–∞–≤—ã –≤ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–∏
                        fresh_chapter = Chapter.query.get(chapter_id)
                        if not fresh_chapter:
                            logger.error(f"‚ùå –ì–ª–∞–≤–∞ —Å ID {chapter_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
                            continue
                        
                        logger.info(f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤—É {fresh_chapter.chapter_number} ({i}/{total_chapters})")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        progress = (i / total_chapters) * 100
                        fresh_task = Task.query.get(task_id)
                        if fresh_task:
                            fresh_task.update_progress(progress / 100, f"–†–µ–¥–∞–∫—Ç—É—Ä–∞ –≥–ª–∞–≤—ã {fresh_chapter.chapter_number}")
                            emit_task_update(task_id, progress, 'running')
                        
                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤—É
                        success = editor_service.edit_chapter(fresh_chapter)
                        if success:
                            success_count += 1
                            LogService.log_info(f"‚úÖ –ì–ª–∞–≤–∞ {fresh_chapter.chapter_number} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞", 
                                              novel_id=novel_id, chapter_id=fresh_chapter.id)
                        else:
                            LogService.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –≥–ª–∞–≤—ã {fresh_chapter.chapter_number}", 
                                               novel_id=novel_id, chapter_id=fresh_chapter.id)
                        
                        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–ª–∞–≤–∞–º–∏
                        
                    except Exception as e:
                        LogService.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –≥–ª–∞–≤—ã {i}: {e}", novel_id=novel_id)
                        import traceback
                        LogService.log_error(f"üìÑ Traceback: {traceback.format_exc()}", novel_id=novel_id)
                        continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤
                if success_count > 0:
                    novel_obj = Novel.query.get(novel_id)
                    if novel_obj:
                        novel_obj.edited_chapters = success_count
                        db.session.add(novel_obj)
                        db.session.commit()
                        LogService.log_info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤: {success_count}", novel_id=novel_id)
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
                if success_count == total_chapters:
                    task.complete(f"–†–µ–¥–∞–∫—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{total_chapters} –≥–ª–∞–≤")
                else:
                    task.complete(f"–†–µ–¥–∞–∫—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏: {success_count}/{total_chapters} –≥–ª–∞–≤")
                
                LogService.log_info(f"‚úÖ –†–µ–¥–∞–∫—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{total_chapters} –≥–ª–∞–≤", novel_id=novel_id)
                
            except Exception as e:
                LogService.log_error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã: {e}", novel_id=novel_id)
                import traceback
                LogService.log_error(f"‚ùå Traceback: {traceback.format_exc()}", novel_id=novel_id)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–∏
                task_id = task.id
                fresh_task = Task.query.get(task_id)
                if fresh_task:
                    fresh_task.fail(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                else:
                    LogService.log_error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É {task_id} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", novel_id=novel_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç—É—Ä—É –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    chapter_ids = [ch.id for ch in chapters]
    thread = threading.Thread(target=edit_novel, args=(task.id, chapter_ids))
    thread.daemon = True
    thread.start()

    LogService.log_info(f"üéØ –†–µ–¥–∞–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è {len(chapters)} –≥–ª–∞–≤", novel_id=novel_id)
    flash(f'–†–µ–¥–∞–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {len(chapters)} –≥–ª–∞–≤', 'success')
    return redirect(url_for('main.novel_detail', novel_id=novel_id))


@main_bp.route('/novels/<int:novel_id>/epub', methods=['POST'])
def generate_epub(novel_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è EPUB"""
    from app.services.epub_service import EPUBService
    
    novel = Novel.query.get_or_404(novel_id)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ EPUB
    task = Task(
        novel_id=novel_id,
        task_type='generate_epub',
        priority=2,
        status='running'
    )
    db.session.add(task)
    db.session.commit()

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        epub_service = EPUBService(current_app)
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã –¥–ª—è EPUB
        chapters = epub_service.get_edited_chapters_from_db(novel_id)
        
        if not chapters:
            task.status = 'failed'
            task.error_message = '–ù–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è EPUB'
            db.session.commit()
            flash('–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è EPUB', 'error')
            return redirect(url_for('main.novel_detail', novel_id=novel_id))

        # –°–æ–∑–¥–∞–µ–º EPUB
        epub_path = epub_service.create_epub(novel_id, chapters)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        task.status = 'completed'
        task.result = epub_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        db.session.commit()
        
        logger.info(f"EPUB —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {epub_path}")
        flash('EPUB —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ EPUB: {e}")
        task.status = 'failed'
        task.error_message = str(e)
        db.session.commit()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ EPUB: {str(e)}', 'error')

    return redirect(url_for('main.novel_detail', novel_id=novel_id))


@main_bp.route('/novels/<int:novel_id>/epub/download')
def download_epub(novel_id):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ EPUB —Ñ–∞–π–ª–∞"""
    from flask import send_file
    from pathlib import Path

    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ EPUB
    task = Task.query.filter_by(
        novel_id=novel_id,
        task_type='generate_epub',
        status='completed'
    ).order_by(Task.updated_at.desc()).first()

    if not task or not task.result:
        flash('EPUB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ EPUB.', 'error')
        return redirect(url_for('main.novel_detail', novel_id=novel_id))

    epub_path = Path(task.result)  # task.result —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

    if not epub_path.exists():
        flash('EPUB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ.', 'error')
        return redirect(url_for('main.novel_detail', novel_id=novel_id))

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    novel = Novel.query.get(novel_id)
    filename = f"{novel.title.replace(' ', '_')}.epub" if novel else epub_path.name

    return send_file(
        epub_path,
        as_attachment=True,
        download_name=filename,
        mimetype='application/epub+zip'
    )


@main_bp.route('/novels/<int:novel_id>/epub-bilingual', methods=['POST'])
def generate_bilingual_epub(novel_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–≤—É—è–∑—ã—á–Ω–æ–≥–æ EPUB —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —Ä—É—Å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞"""
    from app.services.epub_service import EPUBService

    novel = Novel.query.get_or_404(novel_id)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–≤—É—è–∑—ã—á–Ω–æ–≥–æ EPUB
    task = Task(
        novel_id=novel_id,
        task_type='generate_bilingual_epub',
        priority=2,
        status='running'
    )
    db.session.add(task)
    db.session.commit()

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        epub_service = EPUBService(current_app)

        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã –¥–ª—è EPUB
        chapters = epub_service.get_edited_chapters_from_db(novel_id)

        if not chapters:
            task.status = 'failed'
            task.error_message = '–ù–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è EPUB'
            db.session.commit()
            flash('–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è EPUB', 'error')
            return redirect(url_for('main.novel_detail', novel_id=novel_id))

        # –°–æ–∑–¥–∞–µ–º –¥–≤—É—è–∑—ã—á–Ω—ã–π EPUB
        epub_path = epub_service.create_bilingual_epub(novel_id, chapters)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        task.status = 'completed'
        task.result = epub_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        db.session.commit()

        logger.info(f"–î–≤—É—è–∑—ã—á–Ω—ã–π EPUB —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {epub_path}")
        flash('–î–≤—É—è–∑—ã—á–Ω—ã–π EPUB —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–≤—É—è–∑—ã—á–Ω–æ–≥–æ EPUB: {e}")
        task.status = 'failed'
        task.error_message = str(e)
        db.session.commit()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–≤—É—è–∑—ã—á–Ω–æ–≥–æ EPUB: {str(e)}', 'error')

    return redirect(url_for('main.novel_detail', novel_id=novel_id))


@main_bp.route('/novels/<int:novel_id>/epub-bilingual/download')
def download_bilingual_epub(novel_id):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–≤—É—è–∑—ã—á–Ω–æ–≥–æ EPUB —Ñ–∞–π–ª–∞"""
    from flask import send_file
    from pathlib import Path

    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–≤—É—è–∑—ã—á–Ω–æ–≥–æ EPUB
    task = Task.query.filter_by(
        novel_id=novel_id,
        task_type='generate_bilingual_epub',
        status='completed'
    ).order_by(Task.updated_at.desc()).first()

    if not task or not task.result:
        flash('–î–≤—É—è–∑—ã—á–Ω—ã–π EPUB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –¥–≤—É—è–∑—ã—á–Ω—ã–π EPUB.', 'error')
        return redirect(url_for('main.novel_detail', novel_id=novel_id))

    epub_path = Path(task.result)

    if not epub_path.exists():
        flash('–î–≤—É—è–∑—ã—á–Ω—ã–π EPUB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ.', 'error')
        return redirect(url_for('main.novel_detail', novel_id=novel_id))

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    novel = Novel.query.get(novel_id)
    filename = f"{novel.title.replace(' ', '_')}_bilingual.epub" if novel else epub_path.name

    return send_file(
        epub_path,
        as_attachment=True,
        download_name=filename,
        mimetype='application/epub+zip'
    )


@main_bp.route('/chapters/<int:chapter_id>')
def chapter_detail(chapter_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–ª–∞–≤—ã"""
    chapter = Chapter.query.get_or_404(chapter_id)

    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é –≥–ª–∞–≤—ã
    previous_chapter = Chapter.query.filter_by(
        novel_id=chapter.novel_id,
        chapter_number=chapter.chapter_number - 1
    ).first()

    next_chapter = Chapter.query.filter_by(
        novel_id=chapter.novel_id,
        chapter_number=chapter.chapter_number + 1
    ).first()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–ª–∞–≤—ã
    prompt_history = []
    prompt_groups = {}
    
    try:
        from app.models import PromptHistory
        prompt_history = PromptHistory.query.filter_by(
            chapter_id=chapter_id
        ).order_by(PromptHistory.created_at.desc()).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        translation_prompts = []
        editing_prompts = []
        
        for prompt in prompt_history:
            if prompt.prompt_type in ['translation', 'summary', 'terms_extraction']:
                translation_prompts.append(prompt)
            elif prompt.prompt_type.startswith('editing_'):
                editing_prompts.append(prompt)
            else:
                # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–µ–≤–æ–¥
                translation_prompts.append(prompt)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        prompt_groups = {
            'translation': translation_prompts,
            'editing': editing_prompts
        }
        

    except Exception as e:
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤—É –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        prompt_history = []
        prompt_groups = {}
    
    return render_template('chapter_detail.html', 
                         chapter=chapter, 
                         previous_chapter=previous_chapter,
                         next_chapter=next_chapter,
                         prompt_history=prompt_history,
                         prompt_groups=prompt_groups)


@main_bp.route('/api/chapters/<int:chapter_id>/prompt-history')
def api_chapter_prompt_history(chapter_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –≥–ª–∞–≤—ã"""
    chapter = Chapter.query.get_or_404(chapter_id)
    
    history_data = []
    
    try:
        from app.models import PromptHistory
        prompt_history = PromptHistory.query.filter_by(
            chapter_id=chapter_id
        ).order_by(PromptHistory.created_at.desc()).all()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
        for prompt in prompt_history:
            history_data.append({
                'id': prompt.id,
                'prompt_type': prompt.prompt_type,
                'system_prompt': prompt.system_prompt,
                'user_prompt': prompt.user_prompt,
                'response': prompt.response,
                'success': prompt.success,
                'error_message': prompt.error_message,
                'api_key_index': prompt.api_key_index,
                'model_used': prompt.model_used,
                'temperature': prompt.temperature,
                'tokens_used': prompt.tokens_used,
                'finish_reason': prompt.finish_reason,
                'execution_time': prompt.execution_time,
                'created_at': prompt.created_at.isoformat() if prompt.created_at else None
            })
    except Exception as e:
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        history_data = []
    
    return jsonify({
        'chapter_id': chapter_id,
        'chapter_number': chapter.chapter_number,
        'total_prompts': len(history_data),
        'prompt_history': history_data
    })


@main_bp.route('/chapters/<int:chapter_id>/edit', methods=['GET', 'POST'])
def edit_chapter(chapter_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã"""
    chapter = Chapter.query.get_or_404(chapter_id)

    if request.method == 'POST':
        translated_text = request.form.get('translated_text')
        if translated_text:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
            from app.models import Translation
            translation = Translation(
                chapter_id=chapter_id,
                translated_text=translated_text,
                translation_type='manual',
                api_used='manual'
            )
            db.session.add(translation)
            chapter.status = 'edited'
            db.session.commit()

            flash('–ì–ª–∞–≤–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞', 'success')
            return redirect(url_for('main.chapter_detail', chapter_id=chapter_id))

    return render_template('edit_chapter.html', chapter=chapter)


@main_bp.route('/chapters/<int:chapter_id>/delete', methods=['POST'])
def delete_chapter(chapter_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥–ª–∞–≤—ã"""
    chapter = Chapter.query.get_or_404(chapter_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    novel_id = chapter.novel_id
    chapter_number = chapter.chapter_number
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    return_page = request.form.get('return_page', 1, type=int)
    return_per_page = request.form.get('return_per_page', 50, type=int)
    
    # –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥–ª–∞–≤—ã (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–º–ø—Ç—ã)
    db.session.delete(chapter)
    db.session.commit()
    
    flash(f'–ì–ª–∞–≤–∞ {chapter_number} –∏ –≤—Å—è —Å–≤—è–∑–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', 'success')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    return redirect(url_for('main.novel_detail', 
                          novel_id=novel_id, 
                          page=return_page, 
                          per_page=return_per_page))





@main_bp.route('/tasks')
def tasks():
    """–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏
    cleanup_hanging_tasks()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–µ–ª–ª–∞–º–∏
    tasks = Task.query.options(db.joinedload(Task.novel)).order_by(Task.created_at.desc()).limit(50).all()
    return render_template('tasks.html', tasks=tasks)


def cleanup_hanging_tasks():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á"""
    try:
        from datetime import datetime, timedelta
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏ (running –±–æ–ª–µ–µ 1 —á–∞—Å–∞)
        cutoff_time = datetime.utcnow() - timedelta(hours=1)
        
        hanging_tasks = Task.query.filter(
            Task.status == 'running',
            Task.created_at < cutoff_time
        ).all()
        
        if hanging_tasks:
            for task in hanging_tasks:
                task.status = 'failed'
                task.error_message = '–ó–∞–¥–∞—á–∞ –∑–∞–≤–∏—Å–ª–∞ –∏ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            
            db.session.commit()
            print(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–æ {len(hanging_tasks)} –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞—á: {e}")
        db.session.rollback()


@main_bp.route('/tasks/<int:task_id>/delete', methods=['POST'])
def delete_task(task_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    task = Task.query.get_or_404(task_id)
    
    try:
        db.session.delete(task)
        db.session.commit()
        flash(f'–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}', 'error')
    
    return redirect(url_for('main.tasks'))


@main_bp.route('/tasks/clear-completed', methods=['POST'])
def clear_completed_tasks():
    """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    try:
        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è
        from datetime import datetime, timedelta
        cutoff_date = datetime.utcnow() - timedelta(days=1)
        
        completed_tasks = Task.query.filter(
            Task.status.in_(['completed', 'failed']),
            Task.created_at < cutoff_date
        ).all()
        
        deleted_count = 0
        for task in completed_tasks:
            db.session.delete(task)
            deleted_count += 1
        
        db.session.commit()
        flash(f'–£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á', 'success')
        
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞—á: {e}', 'error')
    
    return redirect(url_for('main.tasks'))


@main_bp.route('/tasks/clear-all', methods=['POST'])
def clear_all_tasks():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
    try:
        all_tasks = Task.query.all()
        deleted_count = 0
        
        for task in all_tasks:
            db.session.delete(task)
            deleted_count += 1
        
        db.session.commit()
        flash(f'–£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–¥–∞—á', 'success')
        
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞—á: {e}', 'error')
    
    return redirect(url_for('main.tasks'))


@main_bp.route('/logs')
def logs():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
    return render_template('logs.html')

@main_bp.route('/console-test')
def console_test():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Å–æ–ª–∏"""
    return render_template('console_working.html')


@main_bp.route('/settings', methods=['GET', 'POST'])
def settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    if request.method == 'POST':
        # –í–∞–ª–∏–¥–∞—Ü–∏—è max_tokens
        max_tokens = int(request.form.get('max_tokens', 24000))
        if max_tokens < 1000 or max_tokens > 128000:
            flash('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1000 –¥–æ 128000', 'error')
            return redirect(url_for('main.settings'))
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        translation_accuracy_mode = request.form.get('default_translation_accuracy_mode', 'balanced')
        translation_temperature_map = {
            'maximum': 0.1,
            'balanced': 0.3,
            'free': 0.5
        }
        translation_temperature = translation_temperature_map.get(translation_accuracy_mode, 0.3)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        editing_quality_mode = request.form.get('default_editing_quality_mode', 'balanced')
        editing_temperature_map = {
            'fast': 0.5,
            'balanced': 0.7,
            'quality': 0.9
        }
        editing_temperature = editing_temperature_map.get(editing_quality_mode, 0.7)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_data = {
            'gemini_api_keys': request.form.get('gemini_api_keys', ''),
            'openai_api_key': request.form.get('openai_api_key', ''),
            'default_translation_model': request.form.get('default_translation_model'),
            'default_translation_temperature': translation_temperature,
            'default_translation_accuracy_mode': translation_accuracy_mode,
            'default_editing_temperature': editing_temperature,
            'default_editing_quality_mode': editing_quality_mode,
            'max_tokens': max_tokens,
            'max_chapters': int(request.form.get('max_chapters', 10)),
            'request_delay': float(request.form.get('request_delay', 1.0)),
            'quality_threshold': int(request.form.get('quality_threshold', 7))
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for key, value in settings_data.items():
            setting = SystemSettings.query.filter_by(key=key).first()
            if setting:
                setting.value = str(value)
            else:
                setting = SystemSettings(key=key, value=str(value))
                db.session.add(setting)
        
        db.session.commit()
        flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success')
        return redirect(url_for('main.settings'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings_dict = {}
    for setting in SystemSettings.query.all():
        try:
            if setting.key in ['default_translation_temperature', 'default_editing_temperature', 'request_delay']:
                settings_dict[setting.key] = float(setting.value)
            elif setting.key in ['max_tokens', 'max_chapters', 'quality_threshold']:
                settings_dict[setting.key] = int(setting.value)
            else:
                settings_dict[setting.key] = setting.value
        except:
            settings_dict[setting.key] = setting.value
    
    return render_template('settings.html', settings=settings_dict)


@main_bp.route('/prompt-templates')
def prompt_templates():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    from app.services.prompt_template_service import PromptTemplateService
    
    templates = PromptTemplateService.get_all_templates()
    categories = PromptTemplateService.get_categories()
    
    return render_template('prompt_templates.html', 
                         templates=templates, 
                         categories=categories)


@main_bp.route('/prompt-templates/new', methods=['GET', 'POST'])
def new_prompt_template():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞"""
    from app.services.prompt_template_service import PromptTemplateService
    
    if request.method == 'POST':
        data = {
            'name': request.form.get('name'),
            'description': request.form.get('description'),
            'category': request.form.get('category'),
            'translation_prompt': request.form.get('translation_prompt'),
            'summary_prompt': request.form.get('summary_prompt'),
            'terms_extraction_prompt': request.form.get('terms_extraction_prompt'),
            'editing_analysis_prompt': request.form.get('editing_analysis_prompt'),
            'editing_style_prompt': request.form.get('editing_style_prompt'),
            'editing_dialogue_prompt': request.form.get('editing_dialogue_prompt'),
            'editing_final_prompt': request.form.get('editing_final_prompt'),
            'temperature': float(request.form.get('temperature', 0.1)),
            'max_tokens': int(request.form.get('max_tokens', 24000))
        }
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validation = PromptTemplateService.validate_template_data(data)
        if not validation['valid']:
            flash('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' + ', '.join(validation['errors']), 'error')
            return render_template('new_prompt_template.html', 
                                 template=data, 
                                 categories=PromptTemplateService.get_categories())
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template = PromptTemplateService.create_template(data)
        flash(f'–®–∞–±–ª–æ–Ω "{template.name}" —Å–æ–∑–¥–∞–Ω', 'success')
        return redirect(url_for('main.prompt_templates'))
    
    categories = PromptTemplateService.get_categories()
    return render_template('new_prompt_template.html', 
                         template={}, 
                         categories=categories)


@main_bp.route('/prompt-templates/<int:template_id>/edit', methods=['GET', 'POST'])
def edit_prompt_template(template_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞"""
    from app.services.prompt_template_service import PromptTemplateService
    
    template = PromptTemplateService.get_template_by_id(template_id)
    if not template:
        flash('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('main.prompt_templates'))
    
    if request.method == 'POST':
        data = {
            'name': request.form.get('name'),
            'description': request.form.get('description'),
            'category': request.form.get('category'),
            'translation_prompt': request.form.get('translation_prompt'),
            'summary_prompt': request.form.get('summary_prompt'),
            'terms_extraction_prompt': request.form.get('terms_extraction_prompt'),
            'editing_analysis_prompt': request.form.get('editing_analysis_prompt'),
            'editing_style_prompt': request.form.get('editing_style_prompt'),
            'editing_dialogue_prompt': request.form.get('editing_dialogue_prompt'),
            'editing_final_prompt': request.form.get('editing_final_prompt'),
            'temperature': float(request.form.get('temperature', 0.1)),
            'max_tokens': int(request.form.get('max_tokens', 24000))
        }
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validation = PromptTemplateService.validate_template_data(data)
        if not validation['valid']:
            flash('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' + ', '.join(validation['errors']), 'error')
            return render_template('edit_prompt_template.html', 
                                 template=template, 
                                 categories=PromptTemplateService.get_categories())
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        updated_template = PromptTemplateService.update_template(template_id, data)
        flash(f'–®–∞–±–ª–æ–Ω "{updated_template.name}" –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')
        return redirect(url_for('main.prompt_templates'))
    
    categories = PromptTemplateService.get_categories()
    return render_template('edit_prompt_template.html', 
                         template=template, 
                         categories=categories)


@main_bp.route('/prompt-templates/<int:template_id>/delete', methods=['POST'])
def delete_prompt_template(template_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞"""
    from app.services.prompt_template_service import PromptTemplateService
    
    template = PromptTemplateService.get_template_by_id(template_id)
    if not template:
        flash('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('main.prompt_templates'))
    
    if template.is_default:
        flash('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', 'error')
        return redirect(url_for('main.prompt_templates'))
    
    template_name = template.name
    PromptTemplateService.delete_template(template_id)
    
    flash(f'–®–∞–±–ª–æ–Ω "{template_name}" —É–¥–∞–ª–µ–Ω', 'success')
    return redirect(url_for('main.prompt_templates'))


@main_bp.route('/novels/<int:novel_id>/glossary')
def novel_glossary(novel_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–ª–æ—Å—Å–∞—Ä–∏—è –Ω–æ–≤–µ–ª–ª—ã"""
    from app.services.glossary_service import GlossaryService
    
    novel = Novel.query.get_or_404(novel_id)
    glossary = GlossaryService.get_glossary_for_novel(novel_id)
    stats = GlossaryService.get_term_statistics(novel_id)
    categories = GlossaryService.get_categories()
    
    return render_template('novel_glossary.html', 
                         novel=novel,
                         glossary=glossary,
                         stats=stats,
                         categories=categories)


@main_bp.route('/novels/<int:novel_id>/glossary/add', methods=['GET', 'POST'])
def add_glossary_term(novel_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–π"""
    from app.services.glossary_service import GlossaryService
    
    novel = Novel.query.get_or_404(novel_id)
    
    if request.method == 'POST':
        data = {
            'english_term': request.form.get('english_term'),
            'russian_term': request.form.get('russian_term'),
            'category': request.form.get('category'),
            'description': request.form.get('description'),
            'first_appearance_chapter': request.form.get('first_appearance_chapter')
        }
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validation = GlossaryService.validate_term_data(data)
        if not validation['valid']:
            flash('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' + ', '.join(validation['errors']), 'error')
            return render_template('add_glossary_term.html', 
                                 novel=novel,
                                 term=data,
                                 categories=GlossaryService.get_categories())
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
        term = GlossaryService.add_term(
            novel_id=novel_id,
            english_term=data['english_term'],
            russian_term=data['russian_term'],
            category=data['category'],
            description=data.get('description', ''),
            chapter_number=int(data['first_appearance_chapter']) if data['first_appearance_chapter'] else None
        )
        
        flash(f'–¢–µ—Ä–º–∏–Ω "{term.english_term}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–π', 'success')
        return redirect(url_for('main.novel_glossary', novel_id=novel_id))
    
    categories = GlossaryService.get_categories()
    return render_template('add_glossary_term.html', 
                         novel=novel,
                         term={},
                         categories=categories)


@main_bp.route('/novels/<int:novel_id>/glossary/<int:term_id>/edit', methods=['POST'])
def edit_glossary_term(novel_id, term_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–∏"""
    from app.services.glossary_service import GlossaryService
    
    novel = Novel.query.get_or_404(novel_id)
    
    data = {
        'english_term': request.form.get('english_term'),
        'russian_term': request.form.get('russian_term'),
        'category': request.form.get('category'),
        'description': request.form.get('description'),
        'first_appearance_chapter': request.form.get('first_appearance_chapter')
    }
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    validation = GlossaryService.validate_term_data(data)
    if not validation['valid']:
        flash('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' + ', '.join(validation['errors']), 'error')
        return redirect(url_for('main.novel_glossary', novel_id=novel_id))
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
    updated_term = GlossaryService.update_term(term_id, data)
    if not updated_term:
        flash('–¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('main.novel_glossary', novel_id=novel_id))
    
    flash(f'–¢–µ—Ä–º–∏–Ω "{updated_term.english_term}" –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')
    return redirect(url_for('main.novel_glossary', novel_id=novel_id))


@main_bp.route('/novels/<int:novel_id>/glossary/<int:term_id>/delete', methods=['POST'])
def delete_glossary_term(novel_id, term_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –∏–∑ –≥–ª–æ—Å—Å–∞—Ä–∏—è"""
    from app.services.glossary_service import GlossaryService
    
    novel = Novel.query.get_or_404(novel_id)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
    success = GlossaryService.delete_term(term_id)
    if not success:
        flash('–¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('main.novel_glossary', novel_id=novel_id))
    
    flash('–¢–µ—Ä–º–∏–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –≥–ª–æ—Å—Å–∞—Ä–∏—è', 'success')
    return redirect(url_for('main.novel_glossary', novel_id=novel_id))


@main_bp.route('/novels/<int:novel_id>/glossary/clear', methods=['POST'])
def clear_glossary(novel_id):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –≥–ª–æ—Å—Å–∞—Ä–∏—è –Ω–æ–≤–µ–ª–ª—ã"""
    from app.services.glossary_service import GlossaryService
    from app.models import Novel
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã
    novel = Novel.query.get_or_404(novel_id)
    
    # –û—á–∏—â–∞–µ–º –≥–ª–æ—Å—Å–∞—Ä–∏–π
    deleted_count = GlossaryService.clear_glossary(novel_id)
    
    flash(f'–ì–ª–æ—Å—Å–∞—Ä–∏–π –Ω–æ–≤–µ–ª–ª—ã "{novel.title}" –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Ä–º–∏–Ω–æ–≤.', 'success')
    return redirect(url_for('main.novel_glossary', novel_id=novel_id))


# WebSocket —Å–æ–±—ã—Ç–∏—è
@socketio.on('connect')
def handle_connect():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    print('Client connected')


@socketio.on('disconnect')
def handle_disconnect():
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    print('Client disconnected')


def emit_task_update(task_id, progress, status, message=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ WebSocket"""
    socketio.emit('task_update', {
        'task_id': task_id,
        'progress': progress,
        'status': status,
        'message': message
    })


@main_bp.route('/download-extension')
def download_extension():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Browser Extension"""
    return render_template('download_extension.html') 