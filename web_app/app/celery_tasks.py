"""
Celery –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""
import sys
import os
import signal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from celery import Task
from celery.exceptions import SoftTimeLimitExceeded, Terminated
from app import create_app, celery, db
from app.models import Novel, Chapter
from app.services.log_service import LogService
from parsers import create_parser_from_url
import time


# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã
_cancel_requested = False


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω—ã"""
    global _cancel_requested
    _cancel_requested = True
    raise Terminated("Task cancelled by user")


class CallbackTask(Task):
    """–ë–∞–∑–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π callback –∏ –æ—Ç–º–µ–Ω—ã"""

    def __call__(self, *args, **kwargs):
        app = create_app()
        with app.app_context():
            return self.run(*args, **kwargs)

    def on_failure(self, exc, task_id, args, kwargs, einfo):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏"""
        app = create_app()
        with app.app_context():
            novel_id = args[0] if args else kwargs.get('novel_id')
            if novel_id:
                novel = Novel.query.get(novel_id)
                if novel:
                    novel.status = 'error'
                    novel.parsing_task_id = None
                    db.session.commit()


@celery.task(bind=True, base=CallbackTask, soft_time_limit=86400, time_limit=86400)  # 24 —á–∞—Å–∞
def parse_novel_chapters_task(self, novel_id, start_chapter=None, max_chapters=None, use_xvfb=True):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–ª–∞–≤ –Ω–æ–≤–µ–ª–ª—ã

    Args:
        novel_id: ID –Ω–æ–≤–µ–ª–ª—ã
        start_chapter: –ù–æ–º–µ—Ä –≥–ª–∞–≤—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ (None = —Å –Ω–∞—á–∞–ª–∞)
        max_chapters: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤ (None = –≤—Å–µ)
        use_xvfb: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Xvfb (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True –¥–ª—è czbooks)
    """
    global _cancel_requested
    _cancel_requested = False

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ SIGTERM –¥–ª—è –æ—Ç–º–µ–Ω—ã
    old_handler = signal.signal(signal.SIGTERM, signal_handler)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.get(novel_id)
        if not novel:
            raise ValueError(f"Novel {novel_id} not found")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        novel.status = 'parsing'
        novel.parsing_task_id = self.request.id
        db.session.commit()

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        LogService.log_info(f"üöÄ [Novel:{novel_id}] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥: {novel.title}", novel_id=novel_id)

        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = create_parser_from_url(
            novel.source_url,
            auth_cookies=novel.get_auth_cookies() if novel.is_auth_enabled() else None,
            socks_proxy=novel.get_socks_proxy() if novel.is_proxy_enabled() else None,
            headless=False  # –î–ª—è czbooks –Ω—É–∂–µ–Ω non-headless
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤
        self.update_state(state='PROGRESS', meta={'status': '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤', 'progress': 0})
        chapters = parser.get_chapter_list(novel.source_url)

        if not chapters:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤")

        # –û–±–Ω–æ–≤–ª—è–µ–º total_chapters
        novel.total_chapters = len(chapters)
        db.session.commit()

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤
        LogService.log_info(f"üìö [Novel:{novel_id}] –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(chapters)}", novel_id=novel_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        if start_chapter:
            chapters = chapters[start_chapter - 1:]
        if max_chapters:
            chapters = chapters[:max_chapters]

        total = len(chapters)
        saved_count = 0

        # –ü–∞—Ä—Å–∏–º –≥–ª–∞–≤—ã
        for i, ch in enumerate(chapters, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–¥–∞—á–∏ (—á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ –∏ —á–µ—Ä–µ–∑ –ë–î)
            db.session.refresh(novel)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
            if _cancel_requested or novel.status == 'parsing_cancelled':
                LogService.log_warning(f"üõë [Novel:{novel_id}] –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count}/{total} –≥–ª–∞–≤", novel_id=novel_id)
                novel.status = 'parsing_cancelled'
                novel.parsing_task_id = None
                db.session.commit()
                parser.close()
                return {
                    'status': 'cancelled',
                    'message': '–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                    'saved_chapters': saved_count,
                    'total_chapters': total
                }

            chapter_number = start_chapter + i - 1 if start_chapter else i

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = int((i / total) * 100)
            self.update_state(
                state='PROGRESS',
                meta={
                    'status': f'–ü–∞—Ä—Å–∏–Ω–≥ –≥–ª–∞–≤—ã {i}/{total}',
                    'progress': progress,
                    'current_chapter': chapter_number,
                    'saved_chapters': saved_count
                }
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            existing = Chapter.query.filter_by(
                novel_id=novel_id,
                chapter_number=chapter_number
            ).first()

            if existing:
                continue

            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                content_data = parser.get_chapter_content(ch['url'])
                if not content_data or not content_data.get('content'):
                    continue

                content = content_data['content']

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if novel.config and novel.config.get('filter_text'):
                    filter_text = novel.config.get('filter_text')
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                    filters = [f.strip() for f in filter_text.split('\n') if f.strip()]
                    for filter_pattern in filters:
                        if filter_pattern:
                            original_len = len(content)
                            content = content.replace(filter_pattern, '')
                            if len(content) != original_len:
                                LogService.log_info(
                                    f"üîß [Novel:{novel_id}, Ch:{chapter_number}] "
                                    f"–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä: '{filter_pattern}' "
                                    f"(—É–¥–∞–ª–µ–Ω–æ {original_len - len(content)} —Å–∏–º–≤–æ–ª–æ–≤)",
                                    novel_id=novel_id
                                )

                # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤—É
                chapter = Chapter(
                    novel_id=novel_id,
                    chapter_number=chapter_number,
                    original_title=ch['title'],
                    url=ch['url'],
                    original_text=content,
                    word_count_original=len(content),
                    status='parsed'
                )
                db.session.add(chapter)
                db.session.commit()

                saved_count += 1
                novel.parsed_chapters = saved_count
                db.session.commit()

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies –ø–æ—Å–ª–µ 10 —É—Å–ø–µ—à–Ω—ã—Ö –≥–ª–∞–≤
                if saved_count == 10 and hasattr(parser, 'get_cookies'):
                    try:
                        extracted_cookies = parser.get_cookies()
                        if extracted_cookies and not novel.is_auth_enabled():
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
                            novel.auth_cookies = extracted_cookies
                            novel.auth_enabled = True
                            db.session.commit()
                            LogService.log_info(
                                f"üç™ [Novel:{novel_id}] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã cookies –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ (Cloudflare –ø—Ä–æ–π–¥–µ–Ω –≤—Ä—É—á–Ω—É—é)",
                                novel_id=novel_id
                            )
                    except Exception as e:
                        LogService.log_warning(f"‚ö†Ô∏è [Novel:{novel_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å cookies: {e}", novel_id=novel_id)

                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–ª–∞–≤—ã
                if saved_count % 10 == 0 or saved_count == total:  # –ö–∞–∂–¥—É—é 10-—é –≥–ª–∞–≤—É
                    LogService.log_info(f"üìñ [Novel:{novel_id}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count}/{total} –≥–ª–∞–≤ ({progress}%)", novel_id=novel_id)

            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                LogService.log_warning(f"‚ö†Ô∏è [Novel:{novel_id}, Ch:{chapter_number}] –û—à–∏–±–∫–∞: {str(e)}", novel_id=novel_id)
                continue

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        parser.close()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–µ–ª–ª—ã
        novel.status = 'parsed'
        novel.parsing_task_id = None
        db.session.commit()

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        LogService.log_info(f"‚úÖ [Novel:{novel_id}] –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –≥–ª–∞–≤ –∏–∑ {total}", novel_id=novel_id)

        return {
            'status': 'completed',
            'message': f'–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –≥–ª–∞–≤ –∏–∑ {total}',
            'saved_chapters': saved_count,
            'total_chapters': total
        }

    except Terminated:
        # –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
        if 'parser' in locals():
            parser.close()
        novel = Novel.query.get(novel_id)
        if novel:
            saved = saved_count if 'saved_count' in locals() else 0
            total_ch = total if 'total' in locals() else 0
            LogService.log_warning(f"üõë [Novel:{novel_id}] –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω (SIGTERM). –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved}/{total_ch} –≥–ª–∞–≤", novel_id=novel_id)
            novel.status = 'parsing_cancelled'
            novel.parsing_task_id = None
            db.session.commit()
        return {
            'status': 'cancelled',
            'message': '–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
            'saved_chapters': saved_count if 'saved_count' in locals() else 0,
            'total_chapters': total if 'total' in locals() else 0
        }

    except SoftTimeLimitExceeded:
        if 'parser' in locals():
            parser.close()
        novel = Novel.query.get(novel_id)
        if novel:
            saved = saved_count if 'saved_count' in locals() else 0
            total_ch = total if 'total' in locals() else 0
            LogService.log_error(f"‚è±Ô∏è [Novel:{novel_id}] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved}/{total_ch} –≥–ª–∞–≤", novel_id=novel_id)
            novel.status = 'parsing_timeout'
            novel.parsing_task_id = None
            db.session.commit()
        raise

    except Exception as e:
        if 'parser' in locals():
            parser.close()
        novel = Novel.query.get(novel_id)
        if novel:
            saved = saved_count if 'saved_count' in locals() else 0
            total_ch = total if 'total' in locals() else 0
            LogService.log_error(f"‚ùå [Novel:{novel_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved}/{total_ch} –≥–ª–∞–≤", novel_id=novel_id)
            novel.status = 'parsing_error'
            novel.parsing_task_id = None
            db.session.commit()
        raise

    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞
        signal.signal(signal.SIGTERM, old_handler)


@celery.task(bind=True, base=CallbackTask)
def cancel_parsing_task(self, task_id):
    """
    –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞

    Args:
        task_id: ID –∑–∞–¥–∞—á–∏ Celery
    """
    try:
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
        celery.control.revoke(task_id, terminate=True, signal='SIGTERM')

        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤–µ–ª–ª—É —Å —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π
        novel = Novel.query.filter_by(parsing_task_id=task_id).first()
        if novel:
            novel.status = 'parsing_cancelled'
            novel.parsing_task_id = None
            db.session.commit()

        return {
            'status': 'success',
            'message': '–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'
        }

    except Exception as e:
        return {
            'status': 'error',
            'message': str(e)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ ParallelEditorService –ø–æ task_id
_editor_services = {}


@celery.task(bind=True, base=CallbackTask, soft_time_limit=172800, time_limit=172800)  # 48 —á–∞—Å–æ–≤
def edit_novel_chapters_task(self, novel_id, chapter_ids, parallel_threads=3):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –≥–ª–∞–≤ –Ω–æ–≤–µ–ª–ª—ã

    Args:
        novel_id: ID –Ω–æ–≤–µ–ª–ª—ã
        chapter_ids: –°–ø–∏—Å–æ–∫ ID –≥–ª–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã
        parallel_threads: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–æ–≤–µ–ª–ª—ã)
    """
    from app.services.translator_service import TranslatorService
    from app.services.original_aware_editor_service import OriginalAwareEditorService
    from app.services.log_service import LogService
    from concurrent.futures import ThreadPoolExecutor, as_completed
    from threading import Lock

    # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã
    global _cancel_requested
    _cancel_requested = False

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ SIGTERM –¥–ª—è –æ—Ç–º–µ–Ω—ã
    old_handler = signal.signal(signal.SIGTERM, signal_handler)

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—á–µ—Ç—á–∏–∫–∞–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    counter_lock = Lock()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.get(novel_id)
        if not novel:
            raise ValueError(f"Novel {novel_id} not found")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        novel.status = 'editing'
        novel.editing_task_id = self.request.id
        db.session.commit()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–æ–≤–µ–ª–ª—ã
        if novel.config:
            parallel_threads = novel.config.get('editing_threads', parallel_threads)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        config = {}
        if novel.config:
            config['model_name'] = novel.config.get('translation_model')
            config['temperature'] = novel.config.get('editing_temperature', novel.config.get('translation_temperature'))

        translator_service = TranslatorService(config=config)
        editor_service = OriginalAwareEditorService(translator_service)

        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã
        from app.models import Chapter
        chapters = Chapter.query.filter(Chapter.id.in_(chapter_ids)).order_by(Chapter.chapter_number).all()

        if not chapters:
            raise ValueError("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        total_chapters = len(chapters)
        success_count = 0
        processed_count = 0

        self.update_state(state='PROGRESS', meta={'status': '–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç—É—Ä—É', 'progress': 0})
        LogService.log_info(f"üìù [Novel:{novel_id}] –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç—É—Ä—É {total_chapters} –≥–ª–∞–≤(—ã) –≤ {parallel_threads} –ø–æ—Ç–æ–∫–æ–≤", novel_id=novel_id)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –≥–ª–∞–≤—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def edit_single_chapter(chapter_id):
            nonlocal success_count, processed_count

            # –ö–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ—é Flask app context –∏ —Å–µ—Å—Å–∏—é –ë–î
            from app import create_app
            app = create_app()

            with app.app_context():
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—É –∏ –Ω–æ–≤–µ–ª–ª—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
                from app.models import Chapter, Novel
                chapter = Chapter.query.get(chapter_id)
                if not chapter:
                    return False

                # –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ —É–∂–µ –≥–ª–∞–≤–∞
                if chapter.status == 'edited':
                    LogService.log_info(f"‚è≠Ô∏è [Novel:{novel_id}, Ch:{chapter.chapter_number}] –£–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", novel_id=novel_id)
                    with counter_lock:
                        processed_count += 1
                    return False

                novel_check = Novel.query.get(novel_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
                if _cancel_requested or (novel_check and novel_check.status == 'editing_cancelled'):
                    return None

                # –ü–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã —Å –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
                max_attempts = 2

                for attempt in range(1, max_attempts + 1):
                    try:
                        if attempt == 1:
                            LogService.log_info(f"üîÑ [Novel:{novel_id}, Ch:{chapter.chapter_number}] –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –≥–ª–∞–≤—É", novel_id=novel_id)
                        else:
                            LogService.log_info(f"üîÑ [Novel:{novel_id}, Ch:{chapter.chapter_number}] –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}", novel_id=novel_id)

                        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π editor_service –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                        thread_translator = TranslatorService(config=config)
                        thread_editor = OriginalAwareEditorService(thread_translator)

                        result = thread_editor.edit_chapter(chapter)

                        if result:
                            # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–¥–∞–∫—Ç—É—Ä–∞
                            with counter_lock:
                                success_count += 1
                                processed_count += 1

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –Ω–æ–≤–µ–ª–ª–µ
                                novel_update = Novel.query.get(novel_id)
                                if novel_update:
                                    novel_update.edited_chapters = success_count
                                    db.session.commit()

                            LogService.log_info(f"‚úÖ [Novel:{novel_id}, Ch:{chapter.chapter_number}] –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ ({success_count}/{total_chapters})", novel_id=novel_id)
                            return True
                        else:
                            # –†–µ–¥–∞–∫—Ç—É—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (—Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)
                            if attempt < max_attempts:
                                LogService.log_warning(f"‚ö†Ô∏è [Novel:{novel_id}, Ch:{chapter.chapter_number}] –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å (—Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è). –ü–æ–≤—Ç–æ—Ä—è–µ–º...", novel_id=novel_id)
                                continue
                            else:
                                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å - –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                LogService.log_warning(f"‚ö†Ô∏è [Novel:{novel_id}, Ch:{chapter.chapter_number}] –í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å.", novel_id=novel_id)

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                                from app.models import Translation
                                initial_translation = Translation.query.filter_by(
                                    chapter_id=chapter.id,
                                    translation_type='initial'
                                ).order_by(Translation.created_at.desc()).first()

                                if initial_translation:
                                    edited_translation = Translation(
                                        chapter_id=chapter.id,
                                        translated_title=initial_translation.translated_title,
                                        translated_text=initial_translation.translated_text,  # –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                        translation_type='edited',
                                        api_used='ollama',
                                        model_used=config.get('ai_model', {}).get('name', 'unknown'),
                                        quality_score=5,  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                                        translation_time=0.0
                                    )
                                    db.session.add(edited_translation)

                                    # –û–±–Ω–æ–≤–ª—è–µ–º edited_text –≥–ª–∞–≤—ã
                                    chapter.edited_text = initial_translation.translated_text

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–ª–∞–≤—ã –Ω–∞ 'edited'
                                chapter.status = 'edited'
                                db.session.commit()

                                with counter_lock:
                                    success_count += 1
                                    processed_count += 1

                                    novel_update = Novel.query.get(novel_id)
                                    if novel_update:
                                        novel_update.edited_chapters = success_count
                                        db.session.commit()

                                LogService.log_info(f"‚úÖ [Novel:{novel_id}, Ch:{chapter.chapter_number}] –ü—Ä–∏–Ω—è—Ç–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ({success_count}/{total_chapters})", novel_id=novel_id)
                                return True

                    except Exception as e:
                        if attempt < max_attempts:
                            LogService.log_warning(f"‚ö†Ô∏è [Novel:{novel_id}, Ch:{chapter.chapter_number}] –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}/{max_attempts}: {e}. –ü–æ–≤—Ç–æ—Ä—è–µ–º...", novel_id=novel_id)
                            continue
                        else:
                            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
                            with counter_lock:
                                processed_count += 1
                            error_msg = f"‚ùå [Novel:{novel_id}, Ch:{chapter.chapter_number}] –í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–∞–º–∏: {e}"
                            LogService.log_error(error_msg, novel_id=novel_id)
                            return False

        # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤
        with ThreadPoolExecutor(max_workers=parallel_threads) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≥–ª–∞–≤ (–ø–µ—Ä–µ–¥–∞–µ–º ID, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç—ã)
            future_to_chapter_id = {
                executor.submit(edit_single_chapter, chapter.id): chapter.id
                for chapter in chapters
            }

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for future in as_completed(future_to_chapter_id):
                chapter_id = future_to_chapter_id[future]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
                db.session.refresh(novel)
                if _cancel_requested or novel.status == 'editing_cancelled':
                    if novel.status != 'editing_cancelled':
                        novel.status = 'editing_cancelled'
                        novel.editing_task_id = None
                        db.session.commit()

                    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
                    for f in future_to_chapter_id:
                        f.cancel()

                    LogService.log_warning(f"üõë [Novel:{novel_id}] –†–µ–¥–∞–∫—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count}/{total_chapters} –≥–ª–∞–≤(—ã)", novel_id=novel_id)
                    return {
                        'status': 'cancelled',
                        'message': '–†–µ–¥–∞–∫—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                        'edited_chapters': success_count,
                        'total_chapters': total_chapters
                    }

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try:
                    result = future.result()

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    with counter_lock:
                        progress = int((processed_count / total_chapters) * 100)
                        self.update_state(
                            state='PROGRESS',
                            meta={
                                'status': f'–†–µ–¥–∞–∫—Ç—É—Ä–∞: {processed_count}/{total_chapters} –≥–ª–∞–≤',
                                'progress': progress,
                                'edited_chapters': success_count
                            }
                        )
                except Exception as e:
                    LogService.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≥–ª–∞–≤—ã ID={chapter_id}: {e}", novel_id=novel_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–µ–ª–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if success_count > 0:
            novel.status = 'edited'
            completion_msg = f'üéâ [Novel:{novel_id}] –†–µ–¥–∞–∫—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{total_chapters} –≥–ª–∞–≤(—ã) –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ'
            LogService.log_info(completion_msg, novel_id=novel_id)
        else:
            novel.status = 'editing_error'
            error_msg = f'‚ùå [Novel:{novel_id}] –†–µ–¥–∞–∫—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ë–ï–ó –£–°–ü–ï–®–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í: 0/{total_chapters} –≥–ª–∞–≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ'
            LogService.log_error(error_msg, novel_id=novel_id)

        novel.editing_task_id = None
        db.session.commit()

        return {
            'status': 'completed' if success_count > 0 else 'failed',
            'message': f'–†–µ–¥–∞–∫—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count} –≥–ª–∞–≤ –∏–∑ {total_chapters}',
            'edited_chapters': success_count,
            'total_chapters': total_chapters
        }

    except Terminated:
        # –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
        novel = Novel.query.get(novel_id)
        if novel:
            novel.status = 'editing_cancelled'
            novel.editing_task_id = None
            db.session.commit()
        LogService.log_warning(f"üõë [Novel:{novel_id}] –†–µ–¥–∞–∫—Ç—É—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É SIGTERM", novel_id=novel_id)
        return {
            'status': 'cancelled',
            'message': '–†–µ–¥–∞–∫—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
            'edited_chapters': success_count if 'success_count' in locals() else 0,
            'total_chapters': total_chapters if 'total_chapters' in locals() else 0
        }

    except SoftTimeLimitExceeded:
        novel = Novel.query.get(novel_id)
        if novel:
            novel.status = 'editing_timeout'
            novel.editing_task_id = None
            db.session.commit()
        LogService.log_error(f"‚è±Ô∏è [Novel:{novel_id}] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã (48 —á–∞—Å–æ–≤)", novel_id=novel_id)
        raise

    except Exception as e:
        novel = Novel.query.get(novel_id)
        if novel:
            novel.status = 'editing_error'
            novel.editing_task_id = None
            db.session.commit()
        LogService.log_error(f"‚ùå [Novel:{novel_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã: {str(e)}", novel_id=novel_id)
        raise

    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞
        signal.signal(signal.SIGTERM, old_handler)

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—á–∏—â–∞–µ–º editing_task_id –¥–∞–∂–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        try:
            novel = Novel.query.get(novel_id)
            if novel and novel.editing_task_id == self.request.id:
                novel.editing_task_id = None
                db.session.commit()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ


@celery.task(bind=True, base=CallbackTask)
def cancel_editing_task(self, task_id):
    """
    –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã

    Args:
        task_id: ID –∑–∞–¥–∞—á–∏ Celery
    """
    try:
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Celery
        celery.control.revoke(task_id, terminate=True, signal='SIGTERM')

        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤–µ–ª–ª—É —Å —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π
        novel = Novel.query.filter_by(editing_task_id=task_id).first()
        if novel:
            novel.status = 'editing_cancelled'
            novel.editing_task_id = None
            db.session.commit()

        return {
            'status': 'success',
            'message': '–ó–∞–¥–∞—á–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–∞'
        }

    except Exception as e:
        return {
            'status': 'error',
            'message': str(e)
        }
