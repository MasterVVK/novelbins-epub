#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
–ú–æ—Å—Ç–∏–∫ –º–µ–∂–¥—É –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π –ø–∞—Ä—Å–µ—Ä–æ–≤
"""
import sys
import os
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
sys.path.insert(0, project_root)

try:
    from parsers import get_available_sources, create_parser, create_parser_from_url, detect_source
    PARSERS_AVAILABLE = True
except ImportError as e:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º —Å –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")
    PARSERS_AVAILABLE = False
    
    # Fallback - –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def get_available_sources():
        return ['novelbins']
    
    def create_parser(source):
        return None
    
    def create_parser_from_url(url):
        return None
    
    def detect_source(url):
        if 'qidian.com' in url.lower():
            return 'qidian'
        return 'novelbins'


class ParserIntegrationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    
    # –û–ø–∏—Å–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    SOURCE_DESCRIPTIONS = {
        'qidian': {
            'name': 'Qidian (Ëµ∑ÁÇπ‰∏≠ÊñáÁΩë)',
            'description': '–ö–∏—Ç–∞–π—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤–µ–±-–Ω–æ–≤–µ–ª–ª',
            'supported_languages': ['zh'],
            'example_url': 'https://www.qidian.com/book/1209977/',
            'features': ['–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–û–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã', '–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è']
        },
        'novelbins': {
            'name': 'NovelBins',
            'description': '–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
            'supported_languages': ['en'],
            'example_url': 'https://novelbins.net/novel/...',
            'features': ['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä']
        }
    }
    
    @classmethod
    def get_available_sources_with_info(cls) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        """
        available = get_available_sources()
        sources_info = []
        
        for source in available:
            info = cls.SOURCE_DESCRIPTIONS.get(source, {
                'name': source.capitalize(),
                'description': f'–ü–∞—Ä—Å–µ—Ä –¥–ª—è {source}',
                'supported_languages': ['unknown'],
                'example_url': '',
                'features': ['–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'] if not PARSERS_AVAILABLE else []
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
            if not PARSERS_AVAILABLE and source == 'novelbins':
                info['features'].append('Fallback —Ä–µ–∂–∏–º')
            
            sources_info.append({
                'id': source,
                'name': info['name'],
                'description': info['description'],
                'supported_languages': info['supported_languages'],
                'example_url': info['example_url'],
                'features': info['features']
            })
        
        return sources_info
    
    @classmethod
    def detect_source_from_url(cls, url: str) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ URL
        
        Args:
            url: URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–ª–∏ None
        """
        try:
            return detect_source(url)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
            return None
    
    @classmethod
    def create_parser_for_url(cls, url: str):
        """
        –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Å–µ—Ä –¥–ª—è URL
        
        Args:
            url: URL –∫–Ω–∏–≥–∏
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            return create_parser_from_url(url)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return None
    
    @classmethod
    def create_parser_by_type(cls, source_type: str):
        """
        –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Å–µ—Ä –ø–æ —Ç–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        
        Args:
            source_type: –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            return create_parser(source_type)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ {source_type}: {e}")
            return None
    
    @classmethod
    def validate_url_for_source(cls, url: str, expected_source: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ URL –æ–∂–∏–¥–∞–µ–º–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
        
        Args:
            url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            expected_source: –û–∂–∏–¥–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            
        Returns:
            True –µ—Å–ª–∏ URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫—É
        """
        detected = cls.detect_source_from_url(url)
        return detected == expected_source
    
    @classmethod
    def get_parser_info(cls, source: str) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Å–µ—Ä–µ
        
        Args:
            source: –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä—Å–µ—Ä–µ
        """
        return cls.SOURCE_DESCRIPTIONS.get(source, {
            'name': source.capitalize(),
            'description': f'–ü–∞—Ä—Å–µ—Ä –¥–ª—è {source}',
            'supported_languages': ['unknown'],
            'example_url': '',
            'features': []
        })


def test_integration():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤
    """
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–ê–†–°–ï–†–û–í")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    sources = ParserIntegrationService.get_available_sources_with_info()
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(sources)}):")
    for source in sources:
        print(f"  üìö {source['id']}: {source['name']}")
        print(f"     {source['description']}")
        print(f"     –Ø–∑—ã–∫–∏: {', '.join(source['supported_languages'])}")
        print(f"     –§—É–Ω–∫—Ü–∏–∏: {', '.join(source['features'])}")
        print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    test_urls = [
        "https://www.qidian.com/book/1209977/",
        "https://m.qidian.com/book/1209977/",
        "https://novelbins.net/novel/test"
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
    for url in test_urls:
        detected = ParserIntegrationService.detect_source_from_url(url)
        print(f"  {url} -> {detected or '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω'}")
    
    print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")


if __name__ == "__main__":
    test_integration()