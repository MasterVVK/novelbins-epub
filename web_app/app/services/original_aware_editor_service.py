#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å —Ä–µ–¥–∞–∫—Ç—É—Ä—ã —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–ª–æ—Å—Å–∞—Ä–∏—è
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ–º–∞–Ω–∞ "–û–¥–Ω–∞ –º—ã—Å–ª—å –æ –≤–µ—á–Ω–æ—Å—Ç–∏" –∏ –¥—Ä—É–≥–∏—Ö —Å—è–Ω—å—Å—è
"""

import time
import json
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime

from app import db
from app.models import Chapter, Novel, Task, Translation, GlossaryItem
from app.services.translator_service import TranslatorService
from app.services.glossary_aware_editor_service import GlossaryAwareEditorService
from app.services.log_service import LogService
from app.services.prompt_template_service import PromptTemplateService
from app.services.glossary_service import GlossaryService

logger = logging.getLogger(__name__)


class OriginalAwareEditorService(GlossaryAwareEditorService):
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–∏—Å —Ä–µ–¥–∞–∫—Ç—É—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–ª–æ—Å—Å–∞—Ä–∏—è.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–≤–µ—Ä–∫—É —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º.
    """

    def __init__(self, translator_service: TranslatorService):
        super().__init__(translator_service)
        self.translator = translator_service
        self.template_service = PromptTemplateService
        self.glossary_service = GlossaryService

    def edit_chapter(self, chapter: Chapter) -> bool:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã —Å –ø–æ–ª–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –≥–ª–æ—Å—Å–∞—Ä–∏—è
        """
        print(f"‚úèÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Ä–µ–¥–∞–∫—Ç—É—Ä—É –≥–ª–∞–≤—ã {chapter.chapter_number} —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∏ –≥–ª–æ—Å—Å–∞—Ä–∏–µ–º")
        LogService.log_info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç—É—Ä—É —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –¥–ª—è –≥–ª–∞–≤—ã {chapter.chapter_number}",
                          novel_id=chapter.novel_id, chapter_id=chapter.id)

        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        original_text = chapter.original_text  # –ü–û–õ–ù–´–ô –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        if not original_text:
            LogService.log_error(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!",
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            print(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–∞–≤—ã {chapter.chapter_number}")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        latest_translation = Translation.query.filter_by(
            chapter_id=chapter.id,
            translation_type='initial'
        ).order_by(Translation.created_at.desc()).first()

        if not latest_translation or not latest_translation.translated_text:
            LogService.log_error(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –Ω–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            return False

        translated_text = latest_translation.translated_text

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –≥–ª–æ—Å—Å–∞—Ä–∏–π
        glossary = self._load_prioritized_glossary(chapter.novel_id)
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        total_terms = sum(len(terms) for terms in glossary.get('all_terms', {}).values())
        LogService.log_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –≥–ª–æ—Å—Å–∞—Ä–∏–π: {total_terms} —Ç–µ—Ä–º–∏–Ω–æ–≤",
                          novel_id=chapter.novel_id, chapter_id=chapter.id)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        original_length = len(original_text)
        translated_length = len(translated_text)
        print(f"üìä –†–∞–∑–º–µ—Ä—ã: –æ—Ä–∏–≥–∏–Ω–∞–ª {original_length} —Å–∏–º–≤–æ–ª–æ–≤, –ø–µ—Ä–µ–≤–æ–¥ {translated_length} —Å–∏–º–≤–æ–ª–æ–≤")

        start_time = time.time()

        try:
            # –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
            print(f"üîç –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º...")
            strategy = self.analyze_with_original(original_text, translated_text, glossary, chapter.id)
            quality_score = strategy.get('quality_score', 5)
            missing_details = strategy.get('missing_details', [])

            print(f"üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score}/10")
            if missing_details:
                print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(missing_details)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
                LogService.log_warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: {missing_details[:5]}", chapter_id=chapter.id)

            edited_text = translated_text

            # –≠—Ç–∞–ø 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∏ –≥–ª–æ—Å—Å–∞—Ä–∏–µ–º
            if strategy.get('needs_glossary_fix') or missing_details:
                print(f"üîß –≠—Ç–∞–ø 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º...")
                LogService.log_info("–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∏ –≥–ª–æ—Å—Å–∞—Ä–∏–µ–º", chapter_id=chapter.id)
                edited_text = self.fix_with_original(original_text, edited_text, glossary, chapter.id)

            # –≠—Ç–∞–ø 3: –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
            if strategy.get('needs_style'):
                print(f"‚ú® –≠—Ç–∞–ø 3: –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Å —É—á–µ—Ç–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª–∞...")
                LogService.log_info("–£–ª—É—á—à–∞–µ–º —Å—Ç–∏–ª—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º", chapter_id=chapter.id)
                edited_text = self.improve_style_with_original(original_text, edited_text, glossary, chapter.id)

            # –≠—Ç–∞–ø 4: –ü–æ–ª–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
            if strategy.get('needs_dialogue'):
                print(f"üí¨ –≠—Ç–∞–ø 4: –ü–æ–ª–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—É...")
                LogService.log_info("–ü–æ–ª–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º", chapter_id=chapter.id)
                edited_text = self.polish_dialogues_with_original(original_text, edited_text, glossary, chapter.id)

            # –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            if strategy.get('needs_polish'):
                print(f"üéØ –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
                edited_text = self.final_polish_with_original(original_text, edited_text, glossary, chapter.id)

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if not self.validate_with_original(original_text, edited_text, glossary):
                LogService.log_error(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞",
                                   novel_id=chapter.novel_id, chapter_id=chapter.id)
                return False

            editing_time = time.time() - start_time

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            self.save_edited_with_original_metadata(
                chapter, edited_text, original_text, editing_time, quality_score, strategy, glossary
            )

            print(f"‚úÖ –ì–ª–∞–≤–∞ {chapter.chapter_number} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {editing_time:.1f} —Å–µ–∫")
            print(f"üìà –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–≤—ã—à–µ–Ω–æ —Å {quality_score} –¥–æ {min(quality_score + 3, 10)}/10")
            LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∑–∞ {editing_time:.1f} —Å–µ–∫",
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            return True

        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –≥–ª–∞–≤—ã {chapter.chapter_number}: {e}",
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return False

    def analyze_with_original(self, original: str, translated: str,
                              glossary: Dict, chapter_id: int) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø–æ–ª–Ω–æ–π —Å–≤–µ—Ä–∫–æ–π —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
        """
        glossary_text = self._format_entire_glossary(glossary)
        novel_info = self._get_novel_info(chapter_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î
        prompt_template = self._get_prompt_from_template(chapter_id, 'analysis')
        if not prompt_template:
            LogService.log_warning("–ü—Ä–æ–º–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", chapter_id=chapter_id)
            # Fallback –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î
            prompt_template = """
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤—ã.
{novel_info}

===== –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–ö–°–¢ (–ü–û–õ–ù–´–ô) =====
{original_text}

===== –¢–ï–ö–£–©–ò–ô –ü–ï–†–ï–í–û–î =====
{translated_text}

===== –ì–õ–û–°–°–ê–†–ò–ô –¢–ï–†–ú–ò–ù–û–í =====
{glossary}

–ü–†–û–í–ï–†–¨ –¢–û–ß–ù–û–°–¢–¨ –ü–ï–†–ï–í–û–î–ê –∏ –≤–µ—Ä–Ω–∏:
–ö–ê–ß–ï–°–¢–í–û: [—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10]
–ü–†–û–ü–£–©–ï–ù–û: [–¥–µ—Ç–∞–ª–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞]
–ù–ï–¢–û–ß–ù–´–ï_–¢–ï–†–ú–ò–ù–´: [—Ç–µ—Ä–º–∏–Ω—ã –Ω–µ –ø–æ –≥–ª–æ—Å—Å–∞—Ä–∏—é]
–°–¢–†–ê–¢–ï–ì–ò–Ø: [style/dialogue/polish/glossary_fix/all]
"""

        prompt = prompt_template.format(
            novel_info=novel_info,
            original_text=original,
            translated_text=translated,
            glossary=glossary_text
        )

        try:
            if chapter_id:
                self.translator.translator.current_chapter_id = chapter_id
                self.translator.translator.current_prompt_type = 'editing_analysis_original'
                self.translator.translator.request_start_time = time.time()

            result = self.translator.translator.translate_text(translated, prompt, "", chapter_id)

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            strategy = self._parse_analysis_result(result)
            strategy['has_original'] = True
            strategy['original_length'] = len(original)

            return strategy

        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º: {e}", chapter_id=chapter_id)
            return {
                'quality_score': 5,
                'needs_style': True,
                'needs_dialogue': True,
                'needs_polish': True,
                'needs_glossary_fix': True
            }

    def fix_with_original(self, original: str, translated: str,
                          glossary: Dict, chapter_id: int) -> str:
        """
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∏ –≥–ª–æ—Å—Å–∞—Ä–∏–µ–º
        """
        glossary_text = self._format_entire_glossary(glossary)
        novel_info = self._get_novel_info(chapter_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î
        prompt_template = self._get_prompt_from_template(chapter_id, 'fix')
        if not prompt_template:
            prompt_template = """
–ò—Å–ø—Ä–∞–≤—å –≤—Å–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∏ –≥–ª–æ—Å—Å–∞—Ä–∏–µ–º.
{novel_info}
===== –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–ö–°–¢ =====
{original_text}
===== –¢–ï–ö–£–©–ò–ô –ü–ï–†–ï–í–û–î =====
{translated_text}
===== –ì–õ–û–°–°–ê–†–ò–ô =====
{glossary}
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
"""

        prompt = prompt_template.format(
            novel_info=novel_info,
            original_text=original,
            translated_text=translated,
            glossary=glossary_text
        )

        try:
            if chapter_id:
                self.translator.translator.current_chapter_id = chapter_id
                self.translator.translator.current_prompt_type = 'editing_fix_original'
                self.translator.translator.request_start_time = time.time()

            result = self.translator.translator.translate_text(translated, prompt, "", chapter_id)
            return result if result else translated
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º: {e}", chapter_id=chapter_id)
            return translated

    def improve_style_with_original(self, original: str, translated: str,
                                   glossary: Dict, chapter_id: int) -> str:
        """
        –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Å —É—á–µ—Ç–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        """
        glossary_text = self._format_entire_glossary(glossary)
        novel_info = self._get_novel_info(chapter_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î
        prompt_template = self._get_prompt_from_template(chapter_id, 'style')
        if not prompt_template:
            prompt_template = """
–£–ª—É—á—à–∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞, —Å–≤–µ—Ä—è—è—Å—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º.
{novel_info}
===== –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–ö–°–¢ =====
{original_text}
===== –¢–ï–ö–£–©–ò–ô –ü–ï–†–ï–í–û–î =====
{translated_text}
===== –ì–õ–û–°–°–ê–†–ò–ô =====
{glossary}
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
"""

        prompt = prompt_template.format(
            novel_info=novel_info,
            original_text=original,
            translated_text=translated,
            glossary=glossary_text
        )

        try:
            if chapter_id:
                self.translator.translator.current_chapter_id = chapter_id
                self.translator.translator.current_prompt_type = 'editing_style_original'
                self.translator.translator.request_start_time = time.time()

            result = self.translator.translator.translate_text(translated, prompt, "", chapter_id)
            return result if result else translated
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∏–ª—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º: {e}", chapter_id=chapter_id)
            return translated

    def polish_dialogues_with_original(self, original: str, translated: str,
                                       glossary: Dict, chapter_id: int) -> str:
        """
        –ü–æ–ª–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å —É—á–µ—Ç–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        """
        characters_info = self._extract_characters_from_glossary(glossary)
        novel_info = self._get_novel_info(chapter_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î
        prompt_template = self._get_prompt_from_template(chapter_id, 'dialogue')
        if not prompt_template:
            prompt_template = """
–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –¥–∏–∞–ª–æ–≥–∏, —Å–≤–µ—Ä—è—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º.
{novel_info}
===== –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –î–ò–ê–õ–û–ì–ò =====
{original_text}
===== –ü–ï–†–ï–í–ï–î–ï–ù–ù–´–ï –î–ò–ê–õ–û–ì–ò =====
{translated_text}
===== –ü–ï–†–°–û–ù–ê–ñ–ò =====
{characters}
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
"""

        prompt = prompt_template.format(
            novel_info=novel_info,
            original_text=original,
            translated_text=translated,
            characters=characters_info
        )

        try:
            if chapter_id:
                self.translator.translator.current_chapter_id = chapter_id
                self.translator.translator.current_prompt_type = 'editing_dialogue_original'
                self.translator.translator.request_start_time = time.time()

            result = self.translator.translator.translate_text(translated, prompt, "", chapter_id)
            return result if result else translated
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–∏—Ä–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º: {e}", chapter_id=chapter_id)
            return translated

    def final_polish_with_original(self, original: str, translated: str,
                                   glossary: Dict, chapter_id: int) -> str:
        """
        –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
        """
        glossary_text = self._format_entire_glossary(glossary)
        novel_info = self._get_novel_info(chapter_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î
        prompt_template = self._get_prompt_from_template(chapter_id, 'final')
        if not prompt_template:
            prompt_template = """
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.
{novel_info}
===== –û–†–ò–ì–ò–ù–ê–õ =====
{original_text}
===== –¢–ï–ö–£–©–ò–ô –ü–ï–†–ï–í–û–î =====
{translated_text}
===== –ì–õ–û–°–°–ê–†–ò–ô =====
{glossary}
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –≥–æ—Ç–æ–≤—ã–π –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
"""

        prompt = prompt_template.format(
            novel_info=novel_info,
            original_text=original,
            translated_text=translated,
            glossary=glossary_text
        )

        try:
            if chapter_id:
                self.translator.translator.current_chapter_id = chapter_id
                self.translator.translator.current_prompt_type = 'editing_final_original'
                self.translator.translator.request_start_time = time.time()

            result = self.translator.translator.translate_text(translated, prompt, "", chapter_id)
            # –û—á–∏—â–∞–µ–º –æ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Gemini
            if result:
                result = self._clean_ai_response(result)
            return result if result else translated
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ä–æ–≤–∫–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º: {e}", chapter_id=chapter_id)
            return translated

    def validate_with_original(self, original: str, edited: str, glossary: Dict) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
        """
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã
        if not edited:
            LogService.log_error("–í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—É—Å—Ç–æ–π –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
            return False

        if len(edited) < len(original) * 0.3:
            LogService.log_error(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(edited)} < {len(original) * 0.3})")
            return False

        if len(edited) > len(original) * 3.0:  # –£–≤–µ–ª–∏—á–∏–ª —Å 2.5 –¥–æ 3.0
            LogService.log_warning(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π ({len(edited)} > {len(original) * 3.0}), –Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ")
            # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False - —ç—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–µ –æ—à–∏–±–∫–∞

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ –≥–ª–æ—Å—Å–∞—Ä–∏—è
        missing_critical = []
        critical_terms = glossary.get('priority', {}).get('critical', {})
        for term, translation in critical_terms.items():
            if translation not in edited:
                missing_critical.append(translation)

        if missing_critical:
            LogService.log_warning(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {len(missing_critical)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤: {missing_critical[:5]}")

        # –°—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ –±–æ–ª–µ–µ 30% –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        if critical_terms and len(missing_critical) > len(critical_terms) * 0.3:
            LogService.log_error(f"–í–∞–ª–∏–¥–∞—Ü–∏—è FAILED: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {len(missing_critical)}/{len(critical_terms)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤")
            return False

        return True

    def save_edited_with_original_metadata(self, chapter: Chapter, edited_text: str,
                                          original_text: str, editing_time: float,
                                          quality_score: int, strategy: Dict, glossary: Dict):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–ª–∞–≤—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            original_translation = Translation.query.filter_by(
                chapter_id=chapter.id,
                translation_type='initial'
            ).first()

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ legacy –∏ –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
            model_name = 'gemini-2.5-flash'  # default
            if hasattr(self.translator, 'config') and hasattr(self.translator.config, 'model_name'):
                model_name = self.translator.config.model_name
            elif hasattr(self.translator, 'translator') and hasattr(self.translator.translator, 'config'):
                model_name = self.translator.translator.config.model_name

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ä–º–∏–Ω–æ–≤
            total_glossary_terms = sum(len(terms) for terms in glossary.get('all_terms', {}).values())

            translation = Translation(
                chapter_id=chapter.id,
                translated_title=original_translation.translated_title if original_translation else f"–ì–ª–∞–≤–∞ {chapter.chapter_number}",
                translated_text=edited_text,
                summary=original_translation.summary if original_translation else None,
                translation_type='edited',
                api_used='gemini-editor-original',
                model_used=model_name,
                quality_score=min(quality_score + 3, 10),  # +3 –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –≥–ª–æ—Å—Å–∞—Ä–∏—è
                translation_time=editing_time,
                context_used={
                    'editing_time': editing_time,
                    'quality_score_before': quality_score,
                    'quality_score_after': min(quality_score + 3, 10),
                    'strategy_used': strategy,
                    'glossary_terms_used': total_glossary_terms,
                    'critical_terms': len(glossary.get('priority', {}).get('critical', {})),
                    'original_text_length': len(original_text),
                    'edited_text_length': len(edited_text),
                    'used_original': True,
                    'used_full_glossary': True,
                    'missing_details_fixed': strategy.get('missing_details', []),
                    'edited_at': datetime.now().isoformat()
                }
            )

            db.session.add(translation)
            chapter.status = 'edited'
            db.session.commit()

            LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞",
                              novel_id=chapter.novel_id, chapter_id=chapter.id)

        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–∞–≤—ã: {e}", chapter_id=chapter.id)
            db.session.rollback()

    def _get_prompt_from_template(self, chapter_id: int, prompt_type: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –≤ –ë–î

        Args:
            chapter_id: ID –≥–ª–∞–≤—ã
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞ (analysis, fix, style, dialogue, final)

        Returns:
            –ü—Ä–æ–º–ø—Ç –∏–∑ –ë–î –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            from app.models import Chapter, PromptTemplate
            chapter = Chapter.query.get(chapter_id)
            if not chapter or not chapter.novel or not chapter.novel.prompt_template_id:
                return ""

            template = PromptTemplate.query.get(chapter.novel.prompt_template_id)
            if not template:
                return ""

            # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ –≤ –ë–î
            prompt_fields = {
                'analysis': 'editing_analysis_prompt',
                'fix': 'editing_fix_prompt',
                'style': 'editing_style_prompt',
                'dialogue': 'editing_dialogue_prompt',
                'final': 'editing_final_prompt'
            }

            field_name = prompt_fields.get(prompt_type)
            if not field_name:
                return ""

            prompt = getattr(template, field_name, None)
            return prompt if prompt else ""

        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_type}: {e}", chapter_id=chapter_id)
            return ""

    def _get_novel_info(self, chapter_id: int) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∂–∞–Ω—Ä–æ–º, –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ—Ä–æ–º –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        """
        try:
            from app.models import Chapter
            chapter = Chapter.query.get(chapter_id)
            if not chapter or not chapter.novel:
                return ""

            novel = chapter.novel
            info_parts = []

            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∂–∞–Ω—Ä–∞
            if novel.prompt_template_id:
                from app.models import PromptTemplate
                template = PromptTemplate.query.get(novel.prompt_template_id)
                if template and template.category:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —á–∏—Ç–∞–µ–º—ã–π –∂–∞–Ω—Ä
                    genre_map = {
                        'xianxia': '—Å—è–Ω—å—Å—è',
                        'wuxia': '—É—Å—è',
                        'modern': '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–æ–º–∞–Ω',
                        'fantasy': '—Ñ—ç–Ω—Ç–µ–∑–∏',
                        'scifi': '–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'
                    }
                    genre = genre_map.get(template.category, template.category)
                    info_parts.append(f"–ñ–∞–Ω—Ä: {genre}")

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if novel.original_title:
                info_parts.append(f"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {novel.original_title}")
            elif novel.title:
                info_parts.append(f"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {novel.title}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if novel.author:
                info_parts.append(f"–ê–≤—Ç–æ—Ä: {novel.author}")

            if info_parts:
                return "\n".join(info_parts) + "\n"
            return ""

        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏: {e}")
            return ""

    def _format_entire_glossary(self, glossary: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–û–õ–ù–û–ì–û –≥–ª–æ—Å—Å–∞—Ä–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        result = []

        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        if glossary.get('priority', {}).get('critical'):
            result.append("–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –¢–ï–†–ú–ò–ù–´ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!):")
            for eng, rus in glossary['priority']['critical'].items():
                result.append(f"  {eng} = {rus}")
            result.append("")

        # –í–∞–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        if glossary.get('priority', {}).get('important'):
            result.append("–í–ê–ñ–ù–´–ï –¢–ï–†–ú–ò–ù–´:")
            for eng, rus in glossary['priority']['important'].items():
                result.append(f"  {eng} = {rus}")
            result.append("")

        # –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
        if glossary.get('characters'):
            result.append("–ü–ï–†–°–û–ù–ê–ñ–ò:")
            for eng, rus in list(glossary['characters'].items())[:50]:  # –¢–æ–ø 50 –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                result.append(f"  {eng} = {rus}")
            result.append("")

        # –õ–æ–∫–∞—Ü–∏–∏
        if glossary.get('locations'):
            result.append("–õ–û–ö–ê–¶–ò–ò:")
            for eng, rus in list(glossary['locations'].items())[:30]:
                result.append(f"  {eng} = {rus}")
            result.append("")

        # –¢–µ—Ö–Ω–∏–∫–∏
        if glossary.get('techniques'):
            result.append("–¢–ï–•–ù–ò–ö–ò –ò –°–ü–û–°–û–ë–ù–û–°–¢–ò:")
            for eng, rus in list(glossary['techniques'].items())[:30]:
                result.append(f"  {eng} = {rus}")
            result.append("")

        # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        if glossary.get('artifacts'):
            result.append("–ê–†–¢–ï–§–ê–ö–¢–´:")
            for eng, rus in list(glossary['artifacts'].items())[:20]:
                result.append(f"  {eng} = {rus}")
            result.append("")

        # –û–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        if glossary.get('terms'):
            result.append("–¢–ï–†–ú–ò–ù–´ –ö–£–õ–¨–¢–ò–í–ê–¶–ò–ò:")
            for eng, rus in list(glossary['terms'].items())[:50]:
                result.append(f"  {eng} = {rus}")

        return "\n".join(result)

    def _extract_characters_from_glossary(self, glossary: Dict) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö –∏–∑ –≥–ª–æ—Å—Å–∞—Ä–∏—è
        """
        result = []

        # –ì–ª–∞–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ)
        critical_chars = {}
        for eng, rus in glossary.get('priority', {}).get('critical', {}).items():
            if any(word in eng.lower() for word in ['bai', 'li', 'zhang', 'wang', 'chen']):
                critical_chars[eng] = rus

        if critical_chars:
            result.append("–ì–õ–ê–í–ù–´–ï –ü–ï–†–°–û–ù–ê–ñ–ò:")
            for eng, rus in critical_chars.items():
                result.append(f"  {eng} = {rus}")
            result.append("")

        # –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if glossary.get('characters'):
            result.append("–í–°–ï –ü–ï–†–°–û–ù–ê–ñ–ò:")
            for eng, rus in list(glossary['characters'].items())[:100]:
                result.append(f"  {eng} = {rus}")

        return "\n".join(result)

    def _parse_analysis_result(self, result: str) -> Dict:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        strategy = {
            'quality_score': 5,
            'needs_style': False,
            'needs_dialogue': False,
            'needs_polish': False,
            'needs_glossary_fix': False,
            'missing_details': []
        }

        if not result:
            return strategy

        lines = result.split('\n')
        for line in lines:
            line = line.strip()

            if line.startswith('–ö–ê–ß–ï–°–¢–í–û:'):
                try:
                    score = line.split(':')[1].strip()
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    import re
                    numbers = re.findall(r'\d+', score)
                    if numbers:
                        strategy['quality_score'] = int(numbers[0])
                except:
                    pass

            elif line.startswith('–ü–†–û–ü–£–©–ï–ù–û:'):
                missing = line.split(':', 1)[1].strip()
                if missing and missing != '[]':
                    strategy['missing_details'] = [m.strip() for m in missing.split(',')]
                    strategy['needs_glossary_fix'] = True

            elif line.startswith('–ù–ï–¢–û–ß–ù–´–ï_–¢–ï–†–ú–ò–ù–´:'):
                terms = line.split(':', 1)[1].strip()
                if terms and terms != '[]':
                    strategy['needs_glossary_fix'] = True

            elif line.startswith('–°–¢–†–ê–¢–ï–ì–ò–Ø:'):
                strat = line.split(':', 1)[1].strip().lower()
                if 'style' in strat or 'all' in strat:
                    strategy['needs_style'] = True
                if 'dialogue' in strat or 'all' in strat:
                    strategy['needs_dialogue'] = True
                if 'polish' in strat or 'all' in strat:
                    strategy['needs_polish'] = True
                if 'glossary' in strat:
                    strategy['needs_glossary_fix'] = True

        # –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∑–∫–æ–µ, –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
        if strategy['quality_score'] <= 6:
            strategy['needs_style'] = True
            strategy['needs_dialogue'] = True
            strategy['needs_polish'] = True

        return strategy

    def _clean_ai_response(self, text: str) -> str:
        """
        –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Gemini
        –£–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
        """
        import re

        # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        markers = [
            r'–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–ö–°–¢[,:\s]+–ì–û–¢–û–í–´–ô –ö –ü–£–ë–õ–ò–ö–ê–¶–ò–ò[:\s]*',
            r'---+\s*\**–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–ö–°–¢[^:]*:[:\s]*',
            r'–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞[^\n]+–∑–∞–≤–µ—Ä—à–µ–Ω–∞[^\n]+\n+',
        ]

        for marker in markers:
            match = re.search(marker, text, re.IGNORECASE | re.MULTILINE)
            if match:
                # –ë–µ—Ä–µ–º –≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞
                clean_text = text[match.end():].strip()
                LogService.log_info(f"–û—á–∏—â–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–æ {match.end()} —Å–∏–º–≤–æ–ª–æ–≤)")
                return clean_text

        # –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å –ø–æ—è—Å–Ω–µ–Ω–∏–π
        if text.startswith(('–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞', '–í–Ω–µ—Å–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ', '–°–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è')):
            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ö–æ–∂ –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–æ–º–∞–Ω–∞ (–∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏)
            lines = text.split('\n')
            for i, line in enumerate(lines):
                line = line.strip()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –º–∞—Ä–∫–¥–∞—É–Ω
                if not line or line.startswith('#') or line.startswith('*') or line.startswith('-'):
                    continue
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
                if line and line[0].isupper() and len(line) > 20 and not line.endswith(':'):
                    clean_text = '\n'.join(lines[i:]).strip()
                    LogService.log_info(f"–û—á–∏—â–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—â–µ–Ω–æ {i} —Å—Ç—Ä–æ–∫)")
                    return clean_text

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return text

        return strategy