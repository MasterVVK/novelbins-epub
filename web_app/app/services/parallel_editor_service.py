#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–µ–¥–∞–∫—Ç—É—Ä—ã —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import time
import json
import logging
import asyncio
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Semaphore

from app import db
from app.models import Chapter, Novel, Task, Translation
from app.services.translator_service import TranslatorService
from app.services.log_service import LogService
from app.services.prompt_template_service import PromptTemplateService

logger = logging.getLogger(__name__)


class ParallelEditorService:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–µ–¥–∞–∫—Ç—É—Ä—ã —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    
    def __init__(self, translator_service: TranslatorService, max_concurrent_requests: int = 2):
        self.translator = translator_service
        self.template_service = PromptTemplateService
        self.max_concurrent_requests = max_concurrent_requests
        self.api_semaphore = Semaphore(max_concurrent_requests)
        
    def edit_chapters_batch(self, chapters: List[Chapter], max_parallel_chapters: int = 3) -> Dict[int, bool]:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –≥–ª–∞–≤ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        results = {}
        
        with ThreadPoolExecutor(max_workers=max_parallel_chapters) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            future_to_chapter = {
                executor.submit(self.edit_chapter_with_context, chapter): chapter 
                for chapter in chapters[:max_parallel_chapters]
            }
            
            for future in as_completed(future_to_chapter):
                chapter = future_to_chapter[future]
                try:
                    result = future.result()
                    results[chapter.id] = result
                    LogService.log_info(
                        f"–ì–ª–∞–≤–∞ {chapter.chapter_number} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞: {'—É—Å–ø–µ—à–Ω–æ' if result else '—Å –æ—à–∏–±–∫–æ–π'}",
                        novel_id=chapter.novel_id, chapter_id=chapter.id
                    )
                except Exception as e:
                    results[chapter.id] = False
                    LogService.log_error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–ª–∞–≤—ã {chapter.chapter_number}: {e}",
                        novel_id=chapter.novel_id, chapter_id=chapter.id
                    )
                    
        return results
        
    def edit_chapter_with_context(self, chapter: Chapter) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–ª–∞–≤"""
        print(f"‚úèÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç—É—Ä—É –≥–ª–∞–≤—ã {chapter.chapter_number} —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
        LogService.log_info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç—É—Ä—É –≥–ª–∞–≤—ã {chapter.chapter_number} —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º", 
                          novel_id=chapter.novel_id, chapter_id=chapter.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–ª–∞–≤
        context = self._get_chapter_context(chapter)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        latest_translation = Translation.query.filter_by(
            chapter_id=chapter.id,
            translation_type='initial'
        ).order_by(Translation.created_at.desc()).first()
        
        if not latest_translation or not latest_translation.translated_text:
            LogService.log_error(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –Ω–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞", 
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            return False
            
        start_time = time.time()
        original_text = latest_translation.translated_text
        
        try:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–æ–≤ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã
            edited_text = self._parallel_edit_stages(original_text, chapter, context)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not self._validate_edit(original_text, edited_text):
                LogService.log_error(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞", 
                                   novel_id=chapter.novel_id, chapter_id=chapter.id)
                return False
                
            editing_time = time.time() - start_time
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            self._save_edited_chapter(chapter, edited_text, editing_time, context)
            
            print(f"‚úÖ –ì–ª–∞–≤–∞ {chapter.chapter_number} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {editing_time:.1f} —Å–µ–∫")
            LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {editing_time:.1f} —Å–µ–∫", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            return True
            
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –≥–ª–∞–≤—ã {chapter.chapter_number}: {e}", 
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            return False
            
    def _get_chapter_context(self, chapter: Chapter, context_size: int = 5) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–ª–∞–≤"""
        context = {
            'previous_summaries': [],
            'characters': set(),
            'locations': set(),
            'key_events': []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–ª–∞–≤—ã
        previous_chapters = Chapter.query.filter(
            Chapter.novel_id == chapter.novel_id,
            Chapter.chapter_number < chapter.chapter_number,
            Chapter.status.in_(['translated', 'edited'])
        ).order_by(Chapter.chapter_number.desc()).limit(context_size).all()
        
        for prev_chapter in previous_chapters:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å —Ä–µ–∑—é–º–µ
            translation = Translation.query.filter_by(
                chapter_id=prev_chapter.id
            ).filter(Translation.summary.isnot(None)).order_by(
                Translation.created_at.desc()
            ).first()
            
            if translation and translation.summary:
                context['previous_summaries'].append({
                    'chapter_number': prev_chapter.chapter_number,
                    'summary': translation.summary
                })
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if translation.context_used and isinstance(translation.context_used, dict):
                    context_data = translation.context_used
                    if 'characters' in context_data:
                        context['characters'].update(context_data['characters'])
                    if 'locations' in context_data:
                        context['locations'].update(context_data['locations'])
                        
        return context
        
    def _parallel_edit_stages(self, text: str, chapter: Chapter, context: Dict) -> str:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–æ–≤ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã"""
        
        # –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ (–≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π)
        with self.api_semaphore:
            strategy = self._analyze_with_context(text, chapter.id, context)
            quality_score = strategy.get('quality_score', 5)
            
        print(f"üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–ª–∞–≤—ã {chapter.chapter_number}: {quality_score}/10")
        LogService.log_info(f"–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score}/10, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}", 
                          novel_id=chapter.novel_id, chapter_id=chapter.id)
        
        # –≠—Ç–∞–ø—ã 2-3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–ª—è –∏ –¥–∏–∞–ª–æ–≥–æ–≤
        edited_texts = {}
        with ThreadPoolExecutor(max_workers=2) as executor:
            futures = {}
            
            if strategy.get('needs_style'):
                futures['style'] = executor.submit(
                    self._improve_style_with_context, text, chapter.id, context
                )
                
            if strategy.get('needs_dialogue'):
                futures['dialogue'] = executor.submit(
                    self._polish_dialogues_with_context, text, chapter.id, context
                )
                
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for stage, future in futures.items():
                try:
                    with self.api_semaphore:
                        edited_texts[stage] = future.result()
                except Exception as e:
                    LogService.log_error(f"–û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ {stage}: {e}", chapter_id=chapter.id)
                    edited_texts[stage] = text
                    
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ –±–µ—Ä–µ–º –ª—É—á—à–∏–π
        if edited_texts:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            result_text = list(edited_texts.values())[-1]
        else:
            result_text = text
            
        # –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if strategy.get('needs_polish'):
            with self.api_semaphore:
                result_text = self._final_polish_with_context(result_text, chapter.id, context)
                
        return result_text
        
    def _analyze_with_context(self, text: str, chapter_id: int, context: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        template_name = self._get_template_name_for_chapter(chapter_id)
        prompt_template = self.template_service.get_template(template_name, 'editing_analysis')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø—Ä–æ–º–ø—Ç
        context_str = self._format_context_for_prompt(context, max_length=500)
        prompt = prompt_template.format(
            text=text[:2000] + "...",
            context=context_str
        )
        
        try:
            result = self.translator.translator.translate_text(text, prompt, "", chapter_id, temperature=self.translator.temperature)
            return self._parse_analysis_result(result)
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", chapter_id=chapter_id)
            return {'quality_score': 5, 'needs_style': True, 'needs_dialogue': True, 'needs_polish': True}
            
    def _improve_style_with_context(self, text: str, chapter_id: int, context: Dict) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        template_name = self._get_template_name_for_chapter(chapter_id)
        prompt_template = self.template_service.get_template(template_name, 'editing_style')
        
        context_str = self._format_context_for_prompt(context, max_length=300)
        prompt = prompt_template.format(text=text, context=context_str)
        
        try:
            result = self.translator.translator.translate_text(text, prompt, "", chapter_id, temperature=self.translator.temperature)
            return result if result else text
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∏–ª—è: {e}", chapter_id=chapter_id)
            return text
            
    def _polish_dialogues_with_context(self, text: str, chapter_id: int, context: Dict) -> str:
        """–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å —É—á–µ—Ç–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        template_name = self._get_template_name_for_chapter(chapter_id)
        prompt_template = self.template_service.get_template(template_name, 'editing_dialogue')
        
        # –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        characters_info = "\n".join([f"- {char}" for char in list(context.get('characters', []))[:10]])
        prompt = prompt_template.format(
            text=text,
            characters=characters_info if characters_info else "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        )
        
        try:
            result = self.translator.translator.translate_text(text, prompt, "", chapter_id, temperature=self.translator.temperature)
            return result if result else text
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–∏—Ä–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}", chapter_id=chapter_id)
            return text
            
    def _final_polish_with_context(self, text: str, chapter_id: int, context: Dict) -> str:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏"""
        template_name = self._get_template_name_for_chapter(chapter_id)
        prompt_template = self.template_service.get_template(template_name, 'editing_final')
        
        # –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        prev_events = "\n".join([
            f"–ì–ª–∞–≤–∞ {s['chapter_number']}: {s['summary'][:100]}..." 
            for s in context.get('previous_summaries', [])[:3]
        ])
        
        prompt = prompt_template.format(
            text=text,
            previous_events=prev_events if prev_events else "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π"
        )
        
        try:
            result = self.translator.translator.translate_text(text, prompt, "", chapter_id, temperature=self.translator.temperature)
            return result if result else text
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ä–æ–≤–∫–∏: {e}", chapter_id=chapter_id)
            return text
            
    def _format_context_for_prompt(self, context: Dict, max_length: int = 500) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        parts = []
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        if context.get('previous_summaries'):
            recent = context['previous_summaries'][0]
            parts.append(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è –≥–ª–∞–≤–∞ {recent['chapter_number']}: {recent['summary'][:150]}")
            
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
        if context.get('characters'):
            chars = list(context['characters'])[:5]
            parts.append(f"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(chars)}")
            
        # –õ–æ–∫–∞—Ü–∏–∏
        if context.get('locations'):
            locs = list(context['locations'])[:3]
            parts.append(f"–õ–æ–∫–∞—Ü–∏–∏: {', '.join(locs)}")
            
        result = "\n".join(parts)
        return result[:max_length] if len(result) > max_length else result
        
    def _parse_analysis_result(self, result: str) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        strategy = {
            'quality_score': 5,
            'needs_style': False,
            'needs_dialogue': False,
            'needs_polish': False
        }
        
        if not result:
            return strategy
            
        lines = result.split('\n')
        for line in lines:
            line = line.strip()
            if '–ö–ê–ß–ï–°–¢–í–û:' in line or 'QUALITY:' in line:
                try:
                    score = int(''.join(filter(str.isdigit, line)))
                    strategy['quality_score'] = min(max(score, 1), 10)
                except:
                    pass
            elif '–°–¢–†–ê–¢–ï–ì–ò–Ø:' in line or 'STRATEGY:' in line:
                lower = line.lower()
                strategy['needs_style'] = 'style' in lower or '—Å—Ç–∏–ª—å' in lower
                strategy['needs_dialogue'] = 'dialogue' in lower or '–¥–∏–∞–ª–æ–≥' in lower
                strategy['needs_polish'] = 'polish' in lower or '–ø–æ–ª–∏—Ä–æ–≤–∫–∞' in lower
                
        # –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∑–∫–æ–µ, –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
        if strategy['quality_score'] < 6:
            strategy['needs_style'] = True
            strategy['needs_dialogue'] = True
            strategy['needs_polish'] = True
            
        return strategy
        
    def _validate_edit(self, original: str, edited: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã"""
        if len(edited) < len(original) * 0.3:
            LogService.log_warning(f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(edited)} vs {len(original)}")
            return False
        if len(edited) > len(original) * 2.5:
            LogService.log_warning(f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(edited)} vs {len(original)}")
            return False
        if not edited or len(edited.strip()) < 50:
            LogService.log_warning("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            return False
        return True
        
    def _save_edited_chapter(self, chapter: Chapter, edited_text: str, 
                            editing_time: float, context: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–ª–∞–≤—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        try:
            original_translation = Translation.query.filter_by(
                chapter_id=chapter.id,
                translation_type='initial'
            ).first()
            
            translation = Translation(
                chapter_id=chapter.id,
                translated_title=original_translation.translated_title if original_translation else f"–ì–ª–∞–≤–∞ {chapter.chapter_number}",
                translated_text=edited_text,
                summary=original_translation.summary if original_translation else None,
                translation_type='edited',
                api_used='gemini-editor',
                model_used=self.translator.config.model_name,
                quality_score=8,  # –û–±—ã—á–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –∫–∞—á–µ—Å—Ç–≤–æ ~8
                translation_time=editing_time,
                context_used={
                    'editing_time': editing_time,
                    'context_chapters': len(context.get('previous_summaries', [])),
                    'characters_count': len(context.get('characters', [])),
                    'locations_count': len(context.get('locations', [])),
                    'edited_at': datetime.now().isoformat()
                }
            )
            
            db.session.add(translation)
            chapter.status = 'edited'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            novel = Novel.query.get(chapter.novel_id)
            if novel:
                edited_count = db.session.query(Chapter).filter_by(
                    novel_id=chapter.novel_id,
                    status='edited'
                ).count()
                novel.edited_chapters = edited_count + 1
                
            db.session.commit()
            LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
        except Exception as e:
            db.session.rollback()
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", chapter_id=chapter.id)
            raise
            
    def _get_template_name_for_chapter(self, chapter_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≥–ª–∞–≤—ã"""
        chapter = Chapter.query.get(chapter_id)
        if chapter and chapter.novel:
            # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–æ–≤–µ–ª–ª
            return 'default'
        return 'default'