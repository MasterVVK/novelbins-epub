#!/usr/bin/env python3

import time
import json
import logging
from typing import Dict, List, Optional
from datetime import datetime

from app import db
from app.models import Chapter, Novel, Task
from app.services.translator_service import TranslatorService
from app.services.log_service import LogService
from app.services.prompt_template_service import PromptTemplateService

logger = logging.getLogger(__name__)

class EditorService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤"""
    
    def __init__(self, translator_service: TranslatorService):
        self.translator = translator_service
        self.template_service = PromptTemplateService
        
    def edit_chapter(self, chapter: Chapter) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –≥–ª–∞–≤—ã"""
        print(f"‚úèÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç—É—Ä—É –≥–ª–∞–≤—ã {chapter.chapter_number}")
        LogService.log_info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç—É—Ä—É –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                          novel_id=chapter.novel_id, chapter_id=chapter.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ INITIAL –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ)
        from app.models import Translation
        latest_translation = Translation.query.filter_by(
            chapter_id=chapter.id,
            translation_type='initial'
        ).order_by(Translation.created_at.desc()).first()
        
        if not latest_translation or not latest_translation.translated_text:
            LogService.log_error(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –Ω–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞", 
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            return False
            
        start_time = time.time()
        original_text = latest_translation.translated_text
        
        try:
            # –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
            strategy = self.analyze_text_quality(original_text, chapter.id)
            quality_score = strategy.get('quality_score', 5)
            
            print(f"üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–ª–∞–≤—ã {chapter.chapter_number}: {quality_score}/10")
            LogService.log_info(f"–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–ª–∞–≤—ã {chapter.chapter_number}: {quality_score}/10", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            edited_text = original_text
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            LogService.log_info(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã: needs_style={strategy.get('needs_style')}, "
                              f"needs_dialogue={strategy.get('needs_dialogue')}, "
                              f"needs_polish={strategy.get('needs_polish')}", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            # –≠—Ç–∞–ø 2: –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è
            if strategy.get('needs_style'):
                LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –Ω–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                edited_text = self.improve_text_style(edited_text, chapter.id)
                LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∞", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                
            # –≠—Ç–∞–ø 3: –†–∞–±–æ—Ç–∞ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
            if strategy.get('needs_dialogue'):
                LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–∏—Ä–æ–≤–∫—É –¥–∏–∞–ª–æ–≥–æ–≤", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                edited_text = self.polish_dialogues(edited_text, chapter.id)
                LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –¥–∏–∞–ª–æ–≥–∏ –æ—Ç–ø–æ–ª–∏—Ä–æ–≤–∞–Ω—ã", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                
            # –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞
            if strategy.get('needs_polish'):
                edited_text = self.final_polish(edited_text, chapter.id)
                LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not self.validate_edit(original_text, edited_text):
                LogService.log_error(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞", 
                                   novel_id=chapter.novel_id, chapter_id=chapter.id)
                return False
                
            editing_time = time.time() - start_time
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.save_edited_chapter(chapter, edited_text, editing_time, quality_score, strategy)
            
            print(f"‚úÖ –ì–ª–∞–≤–∞ {chapter.chapter_number} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {editing_time:.1f} —Å–µ–∫")
            LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {editing_time:.1f} —Å–µ–∫", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            return True
            
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –≥–ª–∞–≤—ã {chapter.chapter_number}: {e}", 
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            return False
            
    def analyze_text_quality(self, text: str, chapter_id: int = None) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–ª–∞–≤—ã
        template_name = self._get_template_name_for_chapter(chapter_id)
        prompt_template = self.template_service.get_template(template_name, 'editing_analysis')
        prompt = prompt_template.format(text=text[:2000] + "...")

        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            if chapter_id:
                self.translator.translator.current_chapter_id = chapter_id
                self.translator.translator.current_prompt_type = 'editing_analysis'
                self.translator.translator.request_start_time = time.time()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º translate_text –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            result = self.translator.translator.translate_text(text, prompt, "", chapter_id)
            if not result:
                LogService.log_info(f"–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", 
                                  chapter_id=chapter_id)
                return {'quality_score': 5, 'needs_style': True, 'needs_dialogue': True, 'needs_polish': True}
                
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            LogService.log_info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {result[:200]}...", chapter_id=chapter_id)
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            lines = result.split('\n')
            quality_score = 5
            needs_style = False
            needs_dialogue = False
            needs_polish = False
            
            for line in lines:
                line = line.strip()
                if line.startswith('–ö–ê–ß–ï–°–¢–í–û:'):
                    try:
                        quality_score = int(line.split(':')[1].strip())
                    except:
                        pass
                elif line.startswith('–°–¢–†–ê–¢–ï–ì–ò–Ø:'):
                    strategy = line.split(':')[1].strip().lower()
                    if 'style' in strategy or 'all' in strategy:
                        needs_style = True
                    if 'dialogue' in strategy or 'all' in strategy:
                        needs_dialogue = True
                    if 'polish' in strategy or 'all' in strategy:
                        needs_polish = True
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–∞—Ä–∫–µ—Ä—ã –≤ –æ—Ç–≤–µ—Ç–µ, –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–µ–¥–∞–∫—Ç—É—Ä—ã
            if '–ö–ê–ß–ï–°–¢–í–û:' not in result and '–°–¢–†–ê–¢–ï–ì–ò–Ø:' not in result:
                LogService.log_info(f"–ê–Ω–∞–ª–∏–∑ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä–∫–µ—Ä–æ–≤, –≤–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–¥–∞–∫—Ç—É—Ä—É", 
                                  chapter_id=chapter_id)
                needs_style = True
                needs_dialogue = True
                needs_polish = True
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ —á–∏—Å–ª–∞–º –≤ —Ç–µ–∫—Å—Ç–µ
                import re
                numbers = re.findall(r'\b([1-9]|10)\b', result[:100])
                if numbers:
                    quality_score = int(numbers[0])
                        
            return {
                'quality_score': quality_score,
                'needs_style': needs_style,
                'needs_dialogue': needs_dialogue,
                'needs_polish': needs_polish
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return {'quality_score': 5, 'needs_style': True, 'needs_dialogue': True, 'needs_polish': True}
            
    def improve_text_style(self, text: str, chapter_id: int = None) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–ª–∞–≤—ã
        template_name = self._get_template_name_for_chapter(chapter_id)
        prompt_template = self.template_service.get_template(template_name, 'editing_style')
        prompt = prompt_template.format(text=text)

        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∏–ª—è
            if chapter_id:
                self.translator.translator.current_chapter_id = chapter_id
                self.translator.translator.current_prompt_type = 'editing_style'
                self.translator.translator.request_start_time = time.time()
            
            result = self.translator.translator.translate_text(text, prompt, "", chapter_id)
            return result if result else text
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∏–ª—è: {e}")
            return text
            
    def polish_dialogues(self, text: str, chapter_id: int = None) -> str:
        """–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–ª–∞–≤—ã
        template_name = self._get_template_name_for_chapter(chapter_id)
        prompt_template = self.template_service.get_template(template_name, 'editing_dialogue')
        prompt = prompt_template.format(text=text)

        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–æ–ª–∏—Ä–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
            if chapter_id:
                self.translator.translator.current_chapter_id = chapter_id
                self.translator.translator.current_prompt_type = 'editing_dialogue'
                self.translator.translator.request_start_time = time.time()
            
            result = self.translator.translator.translate_text(text, prompt, "", chapter_id)
            return result if result else text
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–∏—Ä–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return text
            
    def final_polish(self, text: str, chapter_id: int = None) -> str:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–ª–∞–≤—ã
        template_name = self._get_template_name_for_chapter(chapter_id)
        prompt_template = self.template_service.get_template(template_name, 'editing_final')
        prompt = prompt_template.format(text=text)

        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ä–æ–≤–∫–∏
            if chapter_id:
                self.translator.translator.current_chapter_id = chapter_id
                self.translator.translator.current_prompt_type = 'editing_final'
                self.translator.translator.request_start_time = time.time()
            
            result = self.translator.translator.translate_text(text, prompt, "", chapter_id)
            return result if result else text
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ä–æ–≤–∫–∏: {e}")
            return text
            
    def validate_edit(self, original: str, edited: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º (—Å–º—è–≥—á–∞–µ–º –¥–æ 30%)
        if len(edited) < len(original) * 0.3:
            LogService.log_warning(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(edited)} vs {len(original)}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
        if len(edited) > len(original) * 2.5:
            LogService.log_warning(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(edited)} vs {len(original)}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not edited or len(edited.strip()) < 50:
            LogService.log_warning("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            return False
            
        return True
        
    def save_edited_chapter(self, chapter: Chapter, edited_text: str, editing_time: float, 
                          quality_score: int, strategy: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–ª–∞–≤—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            from app.models import Translation
            original_translation = Translation.query.filter_by(
                chapter_id=chapter.id,
                translation_type='initial'
            ).first()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å —Ç–∏–ø–æ–º 'edited'
            translation = Translation(
                chapter_id=chapter.id,
                translated_title=original_translation.translated_title if original_translation else f"–ì–ª–∞–≤–∞ {chapter.chapter_number}",
                translated_text=edited_text,
                summary=original_translation.summary if original_translation else None,
                translation_type='edited',
                api_used='gemini-editor',
                model_used=self.translator.config.model_name,
                quality_score=min(quality_score + 2, 9),
                translation_time=editing_time,
                context_used={
                    'editing_time': editing_time,
                    'quality_score_before': quality_score,
                    'quality_score_after': min(quality_score + 2, 9),
                    'strategy_used': strategy,
                    'edited_at': datetime.now().isoformat()
                }
            )
            
            db.session.add(translation)
            chapter.status = 'edited'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤ –≤ –Ω–æ–≤–µ–ª–ª–µ
            novel = Novel.query.get(chapter.novel_id)
            if novel:
                edited_count = db.session.query(Chapter).filter_by(
                    novel_id=chapter.novel_id,
                    status='edited'
                ).count()
                novel.edited_chapters = edited_count + 1  # +1 —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è –≥–ª–∞–≤–∞ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
                
            db.session.commit()
            
            LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–ª–∞–≤—ã {chapter.chapter_number}: {e}", 
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            db.session.rollback()
    
    def _get_template_name_for_chapter(self, chapter_id: int = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≥–ª–∞–≤—ã"""
        if not chapter_id:
            return '–°—è–Ω—å—Å—è (–ü–æ–∫—Ä—ã–≤–∞—è –ù–µ–±–µ—Å–∞)'
        
        try:
            from app.models import Chapter
            chapter = Chapter.query.get(chapter_id)
            if chapter and chapter.novel and chapter.novel.prompt_template:
                return chapter.novel.prompt_template.name
            return '–°—è–Ω—å—Å—è (–ü–æ–∫—Ä—ã–≤–∞—è –ù–µ–±–µ—Å–∞)'
        except:
            return '–°—è–Ω—å—Å—è (–ü–æ–∫—Ä—ã–≤–∞—è –ù–µ–±–µ—Å–∞)' 