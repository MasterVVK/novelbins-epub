#!/usr/bin/env python3

import time
import json
import logging
from typing import Dict, List, Optional
from datetime import datetime

from app import db
from app.models import Chapter, Novel, Task
from app.services.translator_service import TranslatorService
from app.services.log_service import LogService

logger = logging.getLogger(__name__)

class EditorService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤"""
    
    def __init__(self, translator_service: TranslatorService):
        self.translator = translator_service
        
    def edit_chapter(self, chapter: Chapter) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –≥–ª–∞–≤—ã"""
        print(f"‚úèÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç—É—Ä—É –≥–ª–∞–≤—ã {chapter.chapter_number}")
        LogService.log_info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç—É—Ä—É –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                          novel_id=chapter.novel_id, chapter_id=chapter.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        from app.models import Translation
        latest_translation = Translation.query.filter_by(
            chapter_id=chapter.id
        ).order_by(Translation.created_at.desc()).first()
        
        if not latest_translation or not latest_translation.translated_text:
            LogService.log_error(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –Ω–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞", 
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            return False
            
        start_time = time.time()
        original_text = latest_translation.translated_text
        
        try:
            # –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
            strategy = self.analyze_text_quality(original_text)
            quality_score = strategy.get('quality_score', 5)
            
            print(f"üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–ª–∞–≤—ã {chapter.chapter_number}: {quality_score}/10")
            LogService.log_info(f"–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–ª–∞–≤—ã {chapter.chapter_number}: {quality_score}/10", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            edited_text = original_text
            
            # –≠—Ç–∞–ø 2: –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è
            if strategy.get('needs_style'):
                edited_text = self.improve_text_style(edited_text)
                LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∞", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                
            # –≠—Ç–∞–ø 3: –†–∞–±–æ—Ç–∞ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
            if strategy.get('needs_dialogue') and ('‚Äî' in edited_text or '¬´' in edited_text):
                edited_text = self.polish_dialogues(edited_text)
                LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –¥–∏–∞–ª–æ–≥–∏ –æ—Ç–ø–æ–ª–∏—Ä–æ–≤–∞–Ω—ã", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                
            # –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞
            if strategy.get('needs_polish'):
                edited_text = self.final_polish(edited_text)
                LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not self.validate_edit(original_text, edited_text):
                LogService.log_error(f"–ì–ª–∞–≤–∞ {chapter.chapter_number}: –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞", 
                                   novel_id=chapter.novel_id, chapter_id=chapter.id)
                return False
                
            editing_time = time.time() - start_time
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.save_edited_chapter(chapter, edited_text, editing_time, quality_score, strategy)
            
            print(f"‚úÖ –ì–ª–∞–≤–∞ {chapter.chapter_number} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {editing_time:.1f} —Å–µ–∫")
            LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {editing_time:.1f} —Å–µ–∫", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            return True
            
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –≥–ª–∞–≤—ã {chapter.chapter_number}: {e}", 
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            return False
            
    def analyze_text_quality(self, text: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞"""
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–æ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–µ–¥–∞–∫—Ç—É—Ä—ã:

{text[:2000]}...

–û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ —à–∫–∞–ª–µ 1-10 –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –Ω—É–∂–Ω—ã.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ö–ê–ß–ï–°–¢–í–û: [—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10]
–ü–†–û–ë–õ–ï–ú–´: [—Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º]
–°–¢–†–ê–¢–ï–ì–ò–Ø: [style/dialogue/polish/all]
–û–ü–ò–°–ê–ù–ò–ï: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º]"""

        try:
            result = self.translator.translator.extract_terms(text, prompt, {})
            if not result:
                return {'quality_score': 5, 'needs_style': True, 'needs_dialogue': True, 'needs_polish': True}
                
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            lines = result.split('\n')
            quality_score = 5
            needs_style = False
            needs_dialogue = False
            needs_polish = False
            
            for line in lines:
                line = line.strip()
                if line.startswith('–ö–ê–ß–ï–°–¢–í–û:'):
                    try:
                        quality_score = int(line.split(':')[1].strip())
                    except:
                        pass
                elif line.startswith('–°–¢–†–ê–¢–ï–ì–ò–Ø:'):
                    strategy = line.split(':')[1].strip().lower()
                    if 'style' in strategy or 'all' in strategy:
                        needs_style = True
                    if 'dialogue' in strategy or 'all' in strategy:
                        needs_dialogue = True
                    if 'polish' in strategy or 'all' in strategy:
                        needs_polish = True
                        
            return {
                'quality_score': quality_score,
                'needs_style': needs_style,
                'needs_dialogue': needs_dialogue,
                'needs_polish': needs_polish
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return {'quality_score': 5, 'needs_style': True, 'needs_dialogue': True, 'needs_polish': True}
            
    def improve_text_style(self, text: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞"""
        prompt = f"""–£–ª—É—á—à–∏ —Å—Ç–∏–ª—å —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –°–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º:

{text}

–ü—Ä–∞–≤–∏–ª–∞:
- –£–ª—É—á—à–∏ –ø–ª–∞–≤–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –ò—Å–ø—Ä–∞–≤—å –Ω–µ–ª–æ–≤–∫–∏–µ –æ–±–æ—Ä–æ—Ç—ã
- –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
- –ù–µ –º–µ–Ω—è–π –∏–º–µ–Ω–∞ –∏ —Ç–µ—Ä–º–∏–Ω—ã"""

        try:
            result = self.translator.translator.extract_terms(text, prompt, {})
            return result if result else text
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∏–ª—è: {e}")
            return text
            
    def polish_dialogues(self, text: str) -> str:
        """–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        prompt = f"""–û—Ç–ø–æ–ª–∏—Ä—É–π –¥–∏–∞–ª–æ–≥–∏ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ. –°–¥–µ–ª–∞–π –∏—Ö –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏:

{text}

–ü—Ä–∞–≤–∏–ª–∞:
- –°–¥–µ–ª–∞–π –¥–∏–∞–ª–æ–≥–∏ –±–æ–ª–µ–µ –∂–∏–≤—ã–º–∏
- –ò—Å–ø—Ä–∞–≤—å –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
- –°–æ—Ö—Ä–∞–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
- –ù–µ –º–µ–Ω—è–π —Å–º—ã—Å–ª —Ä–µ–ø–ª–∏–∫"""

        try:
            result = self.translator.translator.extract_terms(text, prompt, {})
            return result if result else text
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–∏—Ä–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return text
            
    def final_polish(self, text: str) -> str:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞"""
        prompt = f"""–°–¥–µ–ª–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–ª–∏—Ä–æ–≤–∫—É —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:

{text}

–ü—Ä–∞–≤–∏–ª–∞:
- –ò—Å–ø—Ä–∞–≤—å –º–µ–ª–∫–∏–µ –æ—à–∏–±–∫–∏
- –£–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
- –ü—Ä–æ–≤–µ—Ä—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
- –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏"""

        try:
            result = self.translator.translator.extract_terms(text, prompt, {})
            return result if result else text
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ä–æ–≤–∫–∏: {e}")
            return text
            
    def validate_edit(self, original: str, edited: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º
        if len(edited) < len(original) * 0.5:
            LogService.log_warning("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
        if len(edited) > len(original) * 2.0:
            LogService.log_warning("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not edited or len(edited.strip()) < 100:
            LogService.log_warning("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            return False
            
        return True
        
    def save_edited_chapter(self, chapter: Chapter, edited_text: str, editing_time: float, 
                          quality_score: int, strategy: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–ª–∞–≤—ã"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å —Ç–∏–ø–æ–º 'edited'
            from app.models import Translation
            translation = Translation(
                chapter_id=chapter.id,
                translated_text=edited_text,
                translation_type='edited',
                api_used='gemini-editor',
                metadata=json.dumps({
                    'editing_time': editing_time,
                    'quality_score_before': quality_score,
                    'quality_score_after': min(quality_score + 2, 9),
                    'strategy_used': strategy,
                    'edited_at': datetime.now().isoformat()
                }, ensure_ascii=False)
            )
            
            db.session.add(translation)
            chapter.status = 'edited'
            db.session.commit()
            
            LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–ª–∞–≤—ã {chapter.chapter_number}: {e}", 
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            db.session.rollback() 