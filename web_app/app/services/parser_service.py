"""
–°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–ª–∞–≤ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import time
import re
from typing import List, Optional
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from app.models import Novel, Chapter, Task
from app import db
from app.services.settings_service import SettingsService


class WebParserService:
    """–°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        self.driver = None
        self.wait = None

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome"""
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--disable-extensions')
        chrome_options.add_argument('--disable-plugins')
        chrome_options.add_argument('--disable-images')
        chrome_options.binary_location = '/usr/bin/chromium-browser'

        self.driver = webdriver.Chrome(options=chrome_options)
        self.wait = WebDriverWait(self.driver, 10)

    def cleanup_driver(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()
            self.driver = None
            self.wait = None

    def extract_chapter_number(self, url: str) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤—ã –∏–∑ URL"""
        match = re.search(r'/chapter/(\d+)', url)
        return int(match.group(1)) if match else 0

    def parse_novel_chapters(self, novel: Novel) -> List[dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≥–ª–∞–≤ –Ω–æ–≤–µ–ª–ª—ã"""
        print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–µ–ª–ª—ã: {novel.title}")
        print(f"üìñ URL: {novel.source_url}")

        try:
            print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞...")
            self.setup_driver()
            print("‚úÖ –î—Ä–∞–π–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–µ–ª–ª—ã
            print("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–æ–≤–µ–ª–ª—ã...")
            self.driver.get(novel.source_url)
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–æ–∫ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
            try:
                print("üîç –ü–æ–∏—Å–∫ –≤–∫–ª–∞–¥–æ–∫...")
                self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, 'ul.nav-tabs a.ch')))
                print("‚úÖ –í–∫–ª–∞–¥–∫–∏ –Ω–∞–π–¥–µ–Ω—ã")

                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
                tabs = self.driver.find_elements(By.CSS_SELECTOR, 'ul.nav-tabs a.ch')
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∫–ª–∞–¥–æ–∫: {len(tabs)}")
            except Exception as e:
                print(f"‚ö†Ô∏è –í–∫–ª–∞–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
                print("üìÑ –¢–µ–∫—É—â–∏–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
                print(self.driver.page_source[:500] + "...")
                return []

            all_chapters = []
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–æ–≤–µ–ª–ª—ã
            max_chapters = novel.config.get('max_chapters', 10) if novel.config else 10

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–µ
            for i, tab in enumerate(tabs):
                if len(all_chapters) >= max_chapters:
                    print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–ª–∞–≤: {max_chapters}")
                    break

                tab_text = tab.text
                print(f"\nüìë –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–∫–∏ {i+1}/{len(tabs)}: {tab_text}")

                # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É
                tab.click()
                time.sleep(1)

                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–ª–∞–≤—ã
                chapter_links = self.driver.find_elements(By.CSS_SELECTOR, '#chapter-content a[href*="/chapter/"]')

                new_chapters = 0
                for link in chapter_links:
                    if len(all_chapters) >= max_chapters:
                        break

                    href = link.get_attribute('href')
                    title = link.text.strip()
                    chapter_num = self.extract_chapter_number(href)

                    if chapter_num > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                        if not any(ch['number'] == chapter_num for ch in all_chapters):
                            all_chapters.append({
                                'url': href,
                                'title': title,
                                'number': chapter_num
                            })
                            new_chapters += 1

                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chapter_links)} —Å—Å—ã–ª–æ–∫, –Ω–æ–≤—ã—Ö –≥–ª–∞–≤: {new_chapters}")

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É
            all_chapters.sort(key=lambda x: x['number'])
            print(f"\n‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(all_chapters)}")

            return all_chapters

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≥–ª–∞–≤: {e}")
            return []
        finally:
            self.cleanup_driver()

    def parse_chapter_content(self, chapter_url: str, chapter_number: int) -> Optional[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≥–ª–∞–≤—ã"""
        print(f"üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤—ã {chapter_number}: {chapter_url}")

        try:
            self.setup_driver()
            self.driver.get(chapter_url)

            # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, 'div.page-content-wrapper')))

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã
            content_element = self.driver.find_element(By.CSS_SELECTOR, 'div.page-content-wrapper')
            chapter_text = content_element.text

            if not chapter_text.strip():
                print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–ª–∞–≤—ã {chapter_number}")
                return None

            print(f"‚úÖ –ì–ª–∞–≤–∞ {chapter_number} –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(chapter_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return chapter_text

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤—ã {chapter_number}: {e}")
            return None
        finally:
            self.cleanup_driver()

    def parse_novel(self, novel_id: int, task_id: int = None) -> bool:
        """–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–µ–ª–ª—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
            novel = Novel.query.get(novel_id)
            if not novel:
                print(f"‚ùå –ù–æ–≤–µ–ª–ª–∞ {novel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
            if task_id:
                task = Task.query.get(task_id)
            else:
                task = Task.query.filter_by(novel_id=novel_id, task_type='parse').first()
            
            if task:
                task.status = 'running'
                db.session.commit()

            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–µ–ª–ª—ã: {novel.title}")

            # –ü–∞—Ä—Å–∏–º –≤—Å–µ –≥–ª–∞–≤—ã
            chapters_data = self.parse_novel_chapters(novel)
            if not chapters_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤")
                return False

            # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã
            success_count = 0
            for i, chapter_data in enumerate(chapters_data):
                print(f"\nüìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤—ã {i+1}/{len(chapters_data)}: {chapter_data['title']}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –≥–ª–∞–≤–∞
                existing_chapter = Chapter.query.filter_by(
                    novel_id=novel_id,
                    chapter_number=chapter_data['number'],
                    is_active=True
                ).first()

                if existing_chapter:
                    print(f"‚è≠Ô∏è –ì–ª–∞–≤–∞ {chapter_data['number']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞")
                    continue

                # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content = self.parse_chapter_content(chapter_data['url'], chapter_data['number'])
                if not content:
                    continue

                # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤—É –≤ –ë–î
                chapter = Chapter(
                    novel_id=novel_id,
                    chapter_number=chapter_data['number'],
                    original_title=chapter_data['title'],
                    url=chapter_data['url'],
                    original_text=content,
                    status='parsed'
                )
                db.session.add(chapter)
                success_count += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if task:
                    progress = int((i + 1) / len(chapters_data) * 100)
                    task.progress = progress
                    db.session.commit()

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                delay = novel.config.get('request_delay', 1.0) if novel.config else 1.0
                if delay > 0:
                    time.sleep(delay)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤–µ–ª–ª—ã
            novel.total_chapters = len(chapters_data)
            novel.parsed_chapters = success_count
            db.session.commit()

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            if task:
                task.status = 'completed'
                task.progress = 100
                db.session.commit()

            print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {success_count}/{len(chapters_data)} –≥–ª–∞–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–≤–µ–ª–ª—ã: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            task = Task.query.filter_by(novel_id=novel_id, task_type='parse').first()
            if task:
                task.status = 'failed'
                db.session.commit()

            return False 