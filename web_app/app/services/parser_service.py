"""
–°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–ª–∞–≤ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import time
import re
import logging
import requests
from bs4 import BeautifulSoup
from typing import List, Optional
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from app.models import Novel, Chapter, Task
from app import db
from app.services.settings_service import SettingsService
from app.services.log_service import LogService

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


class WebParserService:
    """–°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        self.driver = None
        self.wait = None

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        chrome_options = Options()
        # chrome_options.add_argument('--headless')  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        chrome_options.binary_location = '/usr/bin/chromium-browser'
        chrome_options.add_argument('--incognito')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ
        chrome_options.add_argument('--disable-extensions')
        chrome_options.add_argument('--disable-plugins')
        chrome_options.add_argument('--disable-background-timer-throttling')
        chrome_options.add_argument('--disable-backgrounding-occluded-windows')
        chrome_options.add_argument('--disable-renderer-backgrounding')
        chrome_options.add_argument('--disable-features=TranslateUI')
        chrome_options.add_argument('--disable-ipc-flooding-protection')
        
        self.driver = webdriver.Chrome(options=chrome_options)
        self.wait = WebDriverWait(self.driver, 30)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç

    def cleanup_driver(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()
            self.driver = None
            self.wait = None

    def extract_chapter_number(self, url: str) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤—ã –∏–∑ URL"""
        match = re.search(r'/chapter/(\d+)', url)
        return int(match.group(1)) if match else 0

    def parse_novel_chapters(self, novel: Novel) -> List[dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≥–ª–∞–≤ –Ω–æ–≤–µ–ª–ª—ã —Å –ø–æ–º–æ—â—å—é requests (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞)"""
        LogService.log_info(f"–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–µ–ª–ª—ã: {novel.title}", novel_id=novel.id)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL - –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        novel_url = novel.source_url
        if not novel_url.endswith('/'):
            novel_url += '/'
        
        LogService.log_info(f"URL: {novel_url}", novel_id=novel.id)

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–º–æ—â—å—é requests
            LogService.log_info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–æ–≤–µ–ª–ª—ã...", novel_id=novel.id)
            headers = {
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            }
            response = requests.get(novel_url, headers=headers, timeout=30)
            response.raise_for_status()
            LogService.log_info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", novel_id=novel.id)

            # –ü–∞—Ä—Å–∏–º HTML
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–ª–∞–≤—ã
            LogService.log_info("–ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥–ª–∞–≤—ã...", novel_id=novel.id)
            chapter_links = soup.find_all('a', href=re.compile(r'/chapter/\d+'))
            LogService.log_info(f"–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥–ª–∞–≤—ã: {len(chapter_links)}", novel_id=novel.id)

            all_chapters = []
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–æ–≤–µ–ª–ª—ã
            max_chapters = novel.config.get('max_chapters', 10) if novel.config else 10

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥–ª–∞–≤—ã —Å–Ω–∞—á–∞–ª–∞
            temp_chapters = []
            for link in chapter_links:
                href = link.get('href')
                title = link.text.strip()
                chapter_num = self.extract_chapter_number(href)

                if chapter_num > 0:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
                    if href.startswith('/'):
                        full_url = f"https://novelbins.com{href}"
                    else:
                        full_url = href
                        
                    temp_chapters.append({
                        'url': full_url,
                        'title': title,
                        'number': chapter_num
                    })

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –≥–ª–∞–≤—ã
            temp_chapters.sort(key=lambda x: x['number'])
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ max_chapters –≥–ª–∞–≤
            all_chapters = temp_chapters[:max_chapters]
            LogService.log_info(f"–í—ã–±—Ä–∞–Ω–æ –ø–µ—Ä–≤—ã—Ö {len(all_chapters)} –≥–ª–∞–≤ –∏–∑ {len(temp_chapters)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö", novel_id=novel.id)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É
            all_chapters.sort(key=lambda x: x['number'])
            LogService.log_info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(all_chapters)}", novel_id=novel.id)

            return all_chapters

        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≥–ª–∞–≤: {e}", novel_id=novel.id)
            return []

    def parse_chapter_content(self, chapter_url: str, chapter_number: int) -> Optional[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≥–ª–∞–≤—ã —Å –ø–æ–º–æ—â—å—é requests"""
        LogService.log_info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤—ã {chapter_number}: {chapter_url}")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–ª–∞–≤—ã
            headers = {
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            }
            response = requests.get(chapter_url, headers=headers, timeout=30)
            response.raise_for_status()

            # –ü–∞—Ä—Å–∏–º HTML
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            content_div = soup.find('div', class_='page-content-wrapper')
            if not content_div:
                LogService.log_error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for element in content_div.find_all(['script', 'style', 'nav', 'button']):
                element.decompose()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            paragraphs = []
            p_elements = content_div.find_all('p')

            for p in p_elements:
                text = p.get_text().strip()
                if text and len(text) > 30 and not text.startswith('Chapter'):
                    paragraphs.append(text)

            # –ï—Å–ª–∏ –º–∞–ª–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, –±–µ—Ä—ë–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            if len(paragraphs) < 5:
                text = content_div.get_text()
                lines = [line.strip() for line in text.split('\n') if line.strip()]
                paragraphs = [line for line in lines if len(line) > 50]

            content = '\n\n'.join(paragraphs)
            word_count = len(content.split())

            LogService.log_info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(paragraphs)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, {word_count} —Å–ª–æ–≤")

            return content

        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤—ã {chapter_number}: {e}")
            return None

    def parse_novel(self, novel_id: int, task_id: int = None) -> bool:
        """–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–µ–ª–ª—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
            novel = Novel.query.get(novel_id)
            if not novel:
                LogService.log_error(f"–ù–æ–≤–µ–ª–ª–∞ {novel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", novel_id=novel_id, task_id=task_id)
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
            if task_id:
                task = Task.query.get(task_id)
            else:
                task = Task.query.filter_by(novel_id=novel_id, task_type='parse').first()
            
            if task:
                task.status = 'running'
                db.session.commit()

            LogService.log_info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–µ–ª–ª—ã: {novel.title}", novel_id=novel_id, task_id=task_id)
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–µ–ª–ª—ã: {novel.title}")
            print(f"üìä –ó–∞–¥–∞—á–∞ #{task_id}: –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–µ–ª–ª—ã '{novel.title}'")

            # –ü–∞—Ä—Å–∏–º –≤—Å–µ –≥–ª–∞–≤—ã
            LogService.log_info("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤...", novel_id=novel_id, task_id=task_id)
            print(f"üîç –ü–æ–∏—Å–∫ –≥–ª–∞–≤ –¥–ª—è –Ω–æ–≤–µ–ª–ª—ã '{novel.title}'...")
            chapters_data = self.parse_novel_chapters(novel)
            if not chapters_data:
                LogService.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤", novel_id=novel_id, task_id=task_id)
                return False

            LogService.log_info(f"–ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(chapters_data)}", novel_id=novel_id, task_id=task_id)
            print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(chapters_data)} –≥–ª–∞–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")

            # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã
            success_count = 0
            for i, chapter_data in enumerate(chapters_data):
                LogService.log_info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤—ã {i+1}/{len(chapters_data)}: {chapter_data['title']}", 
                                  novel_id=novel_id, task_id=task_id)
                print(f"üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤—ã {i+1}/{len(chapters_data)}: {chapter_data['title']}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –≥–ª–∞–≤–∞
                existing_chapter = Chapter.query.filter_by(
                    novel_id=novel_id,
                    chapter_number=chapter_data['number'],
                    is_active=True
                ).first()

                if existing_chapter:
                    LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter_data['number']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞", 
                                      novel_id=novel_id, task_id=task_id)
                    continue

                # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                LogService.log_info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≥–ª–∞–≤—ã {chapter_data['number']}...", 
                                  novel_id=novel_id, task_id=task_id)
                content = self.parse_chapter_content(chapter_data['url'], chapter_data['number'])
                if not content:
                    LogService.log_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã {chapter_data['number']}", 
                                         novel_id=novel_id, task_id=task_id)
                    continue

                # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤—É –≤ –ë–î
                chapter = Chapter(
                    novel_id=novel_id,
                    chapter_number=chapter_data['number'],
                    original_title=chapter_data['title'],
                    url=chapter_data['url'],
                    original_text=content,
                    status='parsed'
                )
                db.session.add(chapter)
                success_count += 1
                LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter_data['number']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î", 
                                  novel_id=novel_id, task_id=task_id, chapter_id=chapter.id)

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if task:
                    progress = int((i + 1) / len(chapters_data) * 100)
                    task.progress = progress
                    db.session.commit()

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                delay = novel.config.get('request_delay', 1.0) if novel.config else 1.0
                if delay > 0:
                    LogService.log_info(f"–ü–∞—É–∑–∞ {delay} —Å–µ–∫—É–Ω–¥...", novel_id=novel_id, task_id=task_id)
                    time.sleep(delay)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤–µ–ª–ª—ã
            novel.total_chapters = len(chapters_data)
            novel.parsed_chapters = success_count
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–µ–ª–ª—ã
            if success_count > 0:
                novel.status = 'parsed'
            db.session.commit()

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            if task:
                task.status = 'completed'
                task.progress = 100
                db.session.commit()

            LogService.log_info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {success_count}/{len(chapters_data)} –≥–ª–∞–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", 
                              novel_id=novel_id, task_id=task_id)
            return True

        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–≤–µ–ª–ª—ã: {e}", novel_id=novel_id, task_id=task_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            task = Task.query.filter_by(novel_id=novel_id, task_type='parse').first()
            if task:
                task.status = 'failed'
                db.session.commit()

            return False 