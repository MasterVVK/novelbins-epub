"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –≥–ª–æ—Å—Å–∞—Ä–∏—è
"""
import os
import time
import json
import re
import logging
from typing import Dict, List, Optional, Tuple
import httpx
from httpx_socks import SyncProxyTransport
from app.models import Chapter, Translation, GlossaryItem, PromptTemplate
from app import db
from app.services.settings_service import SettingsService
from app.services.log_service import LogService

logger = logging.getLogger(__name__)


def preprocess_chapter_text(text: str) -> str:
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≥–ª–∞–≤—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–µ–π"""
    
    # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –¥–ª—è –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    # –ï—Å–ª–∏ 3 –∏ –±–æ–ª–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
    sound_effects = {
        r'W[oO]{3,}': 'Wooo...',
        r'A[hH]{3,}': 'Ahhh...',
        r'E[eE]{3,}': 'Eeee...',
        r'O[hH]{3,}': 'Ohhh...',
        r'U[uU]{3,}': 'Uuuu...',
        r'Y[aA]{3,}': 'Yaaa...',
        r'N[oO]{3,}': 'Nooo...',
        r'H[aA]{3,}': 'Haaa...',
        r'R[rR]{3,}': 'Rrrr...',
        r'S[sS]{3,}': 'Ssss...',
        r'Z[zZ]{3,}': 'Zzzz...',
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        r'M[mM]{3,}': 'Mmm...',
        r'G[rR]{3,}': 'Grrr...',
        r'B[rR]{3,}': 'Brrr...',
    }

    # –°—á—ë—Ç—á–∏–∫ –∑–∞–º–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    replacements_made = 0

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    for pattern, replacement in sound_effects.items():
        text, count = re.subn(pattern, replacement, text, flags=re.IGNORECASE)
        replacements_made += count

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±—É–∫–≤
    # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ª—é–±–∞—è –±—É–∫–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω–∞—è 5+ —Ä–∞–∑
    def replace_any_long_repetition(match):
        full_match = match.group(0)
        if len(full_match) > 5:
            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É, –ø–æ–≤—Ç–æ—Ä—è–µ–º 3 —Ä–∞–∑–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
            first_char = full_match[0]
            return first_char * 3 + '...'
        return full_match

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    text, count = re.subn(r'(\w)\1{4,}', replace_any_long_repetition, text)
    replacements_made += count

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if replacements_made > 0:
        logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ ({replacements_made} –∑–∞–º–µ–Ω)")

    return text


class TranslatorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"""
    def __init__(self, api_keys: List[str] = None, proxy_url: Optional[str] = None, 
                 model_name: str = None, temperature: float = None, max_output_tokens: int = None):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        self.api_keys = api_keys or SettingsService.get_gemini_api_keys()
        self.proxy_url = proxy_url or SettingsService.get_proxy_url() or os.getenv('PROXY_URL')
        self.model_name = model_name or SettingsService.get_default_model()
        self.temperature = temperature or SettingsService.get_default_temperature()
        self.max_output_tokens = max_output_tokens or SettingsService.get_max_tokens()


class LLMTranslator:
    """–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–µ—Ä–µ–∑ LLM API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏ –∏ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–µ–π"""

    def __init__(self, config: TranslatorConfig):
        self.config = config
        self.current_key_index = 0
        self.failed_keys = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–ª—é—á–µ–π
        self.full_cycles_without_success = 0  # –°—á—ë—Ç—á–∏–∫ –ø–æ–ª–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –±–µ–∑ —É—Å–ø–µ—Ö–∞
        self.last_finish_reason = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.save_prompt_history = True  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤

        # HTTP –∫–ª–∏–µ–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        timeout_config = httpx.Timeout(
            connect=30.0,      # –í—Ä–µ–º—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            read=300.0,        # –í—Ä–µ–º—è –Ω–∞ —á—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (5 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤)
            write=30.0,        # –í—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞
            pool=30.0          # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞
        )

        if config.proxy_url:
            self.transport = SyncProxyTransport.from_url(config.proxy_url)
            self.client = httpx.Client(transport=self.transport, timeout=timeout_config)
        else:
            self.client = httpx.Client(transport=self.transport, timeout=timeout_config)

        self.api_url = f"https://generativelanguage.googleapis.com/v1beta/models/{config.model_name}:generateContent"

    @property
    def current_key(self) -> str:
        return self.config.api_keys[self.current_key_index]

    def switch_to_next_key(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á"""
        self.current_key_index = (self.current_key_index + 1) % len(self.config.api_keys)
        print(f"  ‚Üª –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–ª—é—á #{self.current_key_index + 1}")

    def mark_key_as_failed(self):
        """–ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π"""
        self.failed_keys.add(self.current_key_index)
        print(f"  ‚ùå –ö–ª—é—á #{self.current_key_index + 1} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π")

    def reset_failed_keys(self):
        """–°–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–ª—é—á–µ–π"""
        self.failed_keys.clear()
        print("  üîÑ –°–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–ª—é—á–µ–π")

    def all_keys_failed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–ª—é—á–∏ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ"""
        return len(self.failed_keys) == len(self.config.api_keys)

    def set_save_prompt_history(self, save: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        self.save_prompt_history = save
        LogService.log_info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {'–≤–∫–ª—é—á–µ–Ω–æ' if save else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}")

    def get_prompt_history_status(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        return self.save_prompt_history

    def handle_full_cycle_failure(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –≤—Å–µ –∫–ª—é—á–∏ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ"""
        self.full_cycles_without_success += 1
        print(f"  ‚ö†Ô∏è  –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –±–µ–∑ —É—Å–ø–µ—Ö–∞ #{self.full_cycles_without_success}")
        
        if self.full_cycles_without_success >= 3:
            print(f"  ‚ùå 3 –ø–æ–ª–Ω—ã—Ö —Ü–∏–∫–ª–∞ –±–µ–∑ —É—Å–ø–µ—Ö–∞. –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç...")
            time.sleep(300)  # 5 –º–∏–Ω—É—Ç
            self.reset_failed_keys()
            self.full_cycles_without_success = 0
        else:
            print(f"  ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            time.sleep(30)
            self.reset_failed_keys()

    def make_request(self, system_prompt: str, user_prompt: str, temperature: float = None) -> Optional[str]:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API —Å —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π"""
        LogService.log_info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Gemini (–º–æ–¥–µ–ª—å: {self.config.model_name})")
        
        generation_config = {
            "temperature": temperature or self.config.temperature,
            "topP": 0.95,
            "topK": 40,
            "maxOutputTokens": self.config.max_output_tokens
        }

        attempts = 0
        max_attempts = len(self.config.api_keys) * 3  # 3 –ø–æ–ª–Ω—ã—Ö –∫—Ä—É–≥–∞ –º–∞–∫—Å–∏–º—É–º

        while attempts < max_attempts:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
            if self.current_key_index in self.failed_keys:
                self.switch_to_next_key()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –ö–ê–ñ–î–û–ì–û –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                if self.all_keys_failed():
                    self.handle_full_cycle_failure()
                    attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                    continue

            try:
                LogService.log_info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempts + 1}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á #{self.current_key_index + 1} –∏–∑ {len(self.config.api_keys)}")
                print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á #{self.current_key_index + 1} –∏–∑ {len(self.config.api_keys)}")

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å safety settings
                request_payload = {
                    "generationConfig": generation_config,
                    "contents": [{
                        "parts": [
                            {"text": system_prompt},
                            {"text": user_prompt}
                        ]
                    }],
                    "safetySettings": [
                        {
                            "category": "HARM_CATEGORY_HATE_SPEECH",
                            "threshold": "BLOCK_NONE"
                        },
                        {
                            "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                            "threshold": "BLOCK_NONE"
                        },
                        {
                            "category": "HARM_CATEGORY_HARASSMENT",
                            "threshold": "BLOCK_NONE"
                        },
                        {
                            "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                            "threshold": "BLOCK_NONE"
                        }
                    ]
                }
                
                # –õ–æ–≥–∏—Ä—É–µ–º safety settings –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                LogService.log_info(f"Safety settings: {request_payload['safetySettings']}")

                response = self.client.post(
                    self.api_url,
                    params={"key": self.current_key},
                    headers={"Content-Type": "application/json"},
                    json=request_payload
                )

                if response.status_code == 200:
                    data = response.json()

                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    candidates = data.get("candidates", [])

                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                    if "usageMetadata" in data:
                        usage = data["usageMetadata"]
                        LogService.log_info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: prompt={usage.get('promptTokenCount', 'N/A')}, candidates={usage.get('candidatesTokenCount', 'N/A')}, total={usage.get('totalTokenCount', 'N/A')}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –ø—Ä–æ–º–ø—Ç—É
                    if "promptFeedback" in data:
                        feedback = data["promptFeedback"]
                        if feedback.get("blockReason"):
                            LogService.log_error(f"–ü—Ä–æ–º–ø—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {feedback['blockReason']}")
                            print(f"  ‚ùå –ü—Ä–æ–º–ø—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {feedback['blockReason']}")
                            
                            # –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                            if "safetyRatings" in feedback:
                                LogService.log_info(f"Safety ratings: {feedback['safetyRatings']}")
                            
                            # –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ PROHIBITED_CONTENT, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç
                            if feedback.get("blockReason") == "PROHIBITED_CONTENT":
                                LogService.log_warning("PROHIBITED_CONTENT detected. Trying to split text...")
                                print(f"  üîÑ –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –º–µ–Ω—å—à–∏–µ —á–∞—Å—Ç–∏...")
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ user_prompt
                                if "–¢–ï–ö–°–¢ –î–õ–Ø –ü–ï–†–ï–í–û–î–ê:" in user_prompt:
                                    text_to_translate = user_prompt.split("–¢–ï–ö–°–¢ –î–õ–Ø –ü–ï–†–ï–í–û–î–ê:")[-1].strip()
                                else:
                                    text_to_translate = user_prompt
                                
                                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –±–æ–ª—å—à–æ–π, –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É
                                if len(text_to_translate) > 1500:
                                    half_text = text_to_translate[:len(text_to_translate)//2]
                                    new_user_prompt = user_prompt.replace(text_to_translate, half_text)
                                    
                                    LogService.log_info(f"Trying with reduced text: {len(half_text)} chars instead of {len(text_to_translate)}")
                                    
                                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                                    retry_response = self.client.post(
                                        self.api_url,
                                        params={"key": self.current_key},
                                        headers={"Content-Type": "application/json"},
                                        json={
                                            "generationConfig": generation_config,
                                            "contents": [{
                                                "parts": [
                                                    {"text": system_prompt},
                                                    {"text": new_user_prompt}
                                                ]
                                            }],
                                            "safetySettings": [
                                                {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
                                                {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
                                                {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
                                                {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"}
                                            ]
                                        }
                                    )
                                    
                                    if retry_response.status_code == 200:
                                        retry_data = retry_response.json()
                                        if "promptFeedback" not in retry_data or not retry_data.get("promptFeedback", {}).get("blockReason"):
                                            LogService.log_info("Reduced text passed! The problem is in text size or specific content.")
                                            print(f"  ‚úÖ –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—à—ë–ª! –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º.")
                                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                                            data = retry_data
                                        else:
                                            LogService.log_error(f"Even reduced text blocked: {retry_data.get('promptFeedback', {})}")
                                            return None
                                    else:
                                        LogService.log_error(f"Retry failed with status: {retry_response.status_code}")
                                        return None
                                else:
                                    LogService.log_error("Text too small to split further")
                                    return None
                            else:
                                return None

                    if candidates:
                        candidate = candidates[0]

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                        if candidate.get("finishReason") == "SAFETY":
                            LogService.log_warning(f"–û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                            print(f"  ‚ö†Ô∏è  –û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                            return None

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        finish_reason = candidate.get("finishReason")
                        self.last_finish_reason = finish_reason

                        if finish_reason == "MAX_TOKENS":
                            LogService.log_warning(f"–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤")
                            print(f"  ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤!")

                        content = candidate.get("content", {})
                        parts = content.get("parts", [])

                        if parts and parts[0].get("text"):
                            # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
                            self.full_cycles_without_success = 0
                            result_text = parts[0].get("text", "")
                            LogService.log_info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –¥–ª–∏–Ω–∞: {len(result_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                            if self.save_prompt_history and getattr(self, 'current_chapter_id', None):
                                try:
                                    from app.models import PromptHistory
                                    PromptHistory.save_prompt(
                                        chapter_id=self.current_chapter_id,
                                        prompt_type=getattr(self, 'current_prompt_type', 'translation'),
                                        system_prompt=system_prompt,
                                        user_prompt=user_prompt,
                                        response=result_text,
                                        api_key_index=self.current_key_index,
                                        model_used=self.config.model_name,
                                        temperature=temperature or self.config.temperature,
                                        tokens_used=usage.get('totalTokenCount') if 'usageMetadata' in data else None,
                                        finish_reason=finish_reason,
                                        execution_time=time.time() - getattr(self, 'request_start_time', time.time())
                                    )
                                    LogService.log_info(f"–ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–∏–ø: {getattr(self, 'current_prompt_type', 'translation')})")
                                except Exception as e:
                                    LogService.log_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
                            elif not self.save_prompt_history:
                                LogService.log_info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                            elif not getattr(self, 'current_chapter_id', None):
                                LogService.log_warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç: chapter_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                            
                            return result_text
                        else:
                            LogService.log_warning(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                            print(f"  ‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                    else:
                        LogService.log_warning(f"–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
                        print(f"  ‚ö†Ô∏è  –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")

                elif response.status_code == 429:
                    LogService.log_warning(f"Rate limit –¥–ª—è –∫–ª—é—á–∞ #{self.current_key_index + 1}")
                    print(f"  ‚ö†Ô∏è  –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è –∫–ª—é—á–∞ #{self.current_key_index + 1}")
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    try:
                        error_data = response.json()
                        if "error" in error_data:
                            error_msg = error_data["error"].get("message", "")
                            LogService.log_info(f"–î–µ—Ç–∞–ª–∏ rate limit: {error_msg}")
                    except:
                        pass
                    
                    self.mark_key_as_failed()
                    self.switch_to_next_key()

                elif response.status_code >= 500:
                    # –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ (500, 502, 503) - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Google
                    LogService.log_warning(f"–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ Google ({response.status_code}). –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...")
                    print(f"  ‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ Google ({response.status_code}). –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(30)
                    
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —Ç–µ–º –∂–µ –∫–ª—é—á–æ–º
                    retry_response = self.client.post(
                        self.api_url,
                        params={"key": self.current_key},
                        headers={"Content-Type": "application/json"},
                        json={
                            "generationConfig": generation_config,
                            "contents": [{
                                "parts": [
                                    {"text": system_prompt},
                                    {"text": user_prompt}
                                ]
                            }],
                            "safetySettings": [
                                {
                                    "category": "HARM_CATEGORY_HATE_SPEECH",
                                    "threshold": "BLOCK_NONE"
                                },
                                {
                                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                                    "threshold": "BLOCK_NONE"
                                },
                                {
                                    "category": "HARM_CATEGORY_HARASSMENT",
                                    "threshold": "BLOCK_NONE"
                                },
                                {
                                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                                    "threshold": "BLOCK_NONE"
                                }
                            ]
                        }
                    )

                    if retry_response.status_code == 200:
                        LogService.log_info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
                        print(f"  ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
                        response = retry_response
                        continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    elif retry_response.status_code >= 500:
                        LogService.log_error(f"–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –∫–ª—é—á...")
                        print(f"  ‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –∫–ª—é—á...")
                        self.switch_to_next_key()
                    else:
                        response = retry_response
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∏–∂–µ

                # –î–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (4xx) - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–æ–º –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º
                elif response.status_code >= 400 and response.status_code < 500:
                    LogService.log_error(f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ {response.status_code} –¥–ª—è –∫–ª—é—á–∞ #{self.current_key_index + 1}")
                    print(f"  ‚ùå –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ {response.status_code} –¥–ª—è –∫–ª—é—á–∞ #{self.current_key_index + 1}")
                    
                    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                    try:
                        error_data = response.json()
                        if "error" in error_data:
                            error_details = error_data['error']
                            LogService.log_error(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_details.get('message', '–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
                            LogService.log_error(f"–ö–æ–¥: {error_details.get('code', '–Ω–µ—Ç –∫–æ–¥–∞')}")
                    except:
                        LogService.log_error(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}...")
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–æ–ª—å–∫–æ –¥–ª—è 401, 403
                    if response.status_code in [401, 403]:
                        self.mark_key_as_failed()
                    self.switch_to_next_key()

            except httpx.TimeoutException as e:
                LogService.log_warning(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: {e}")
                print(f"  ‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: {e}")
                print(f"     –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(10)

                # –ù–ï –ø–æ–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
                attempts += 1

                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø–æ–¥—Ä—è–¥, –º–µ–Ω—è–µ–º –∫–ª—é—á
                if attempts % 3 == 0:
                    LogService.log_info(f"–ú–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –∫–ª—é—á...")
                    print(f"     –ú–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –∫–ª—é—á...")
                    self.switch_to_next_key()

            except httpx.NetworkError as e:
                LogService.log_warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
                print(f"  ‚ö†Ô∏è  –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
                print(f"     –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É/–ø—Ä–æ–∫—Å–∏")
                time.sleep(5)
                attempts += 1

            except Exception as e:
                LogService.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                error_str = str(e).lower()

                if any(x in error_str for x in ['timeout', 'timed out', 'connection', 'network']):
                    # –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã - –ù–ï –≤–∏–Ω–∞ –∫–ª—é—á–∞
                    LogService.log_info(f"–ü–æ—Ö–æ–∂–µ –Ω–∞ —Å–µ—Ç–µ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É. –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...")
                    print(f"     –ü–æ—Ö–æ–∂–µ –Ω–∞ —Å–µ—Ç–µ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É. –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(10)
                    attempts += 1
                else:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–æ–º
                    self.mark_key_as_failed()
                    self.switch_to_next_key()
                    attempts += 1

            attempts += 1

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
        LogService.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        if self.save_prompt_history and getattr(self, 'current_chapter_id', None):
            try:
                from app.models import PromptHistory
                PromptHistory.save_prompt(
                    chapter_id=self.current_chapter_id,
                    prompt_type=getattr(self, 'current_prompt_type', 'translation'),
                    system_prompt=system_prompt,
                    user_prompt=user_prompt,
                    response=None,
                    api_key_index=self.current_key_index,
                    model_used=self.config.model_name,
                    temperature=temperature or self.config.temperature,
                    success=False,
                    error_message=f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫",
                    execution_time=time.time() - getattr(self, 'request_start_time', time.time())
                )
                LogService.log_info(f"–ù–µ—É–¥–∞—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–∏–ø: {getattr(self, 'current_prompt_type', 'translation')})")
            except Exception as e:
                LogService.log_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
        elif not self.save_prompt_history:
            LogService.log_info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        elif not getattr(self, 'current_chapter_id', None):
            LogService.log_warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç: chapter_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")

    def translate_text(self, text: str, system_prompt: str, context: str = "", chapter_id: int = None, temperature: float = None) -> Optional[str]:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        self.current_chapter_id = chapter_id
        # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º current_prompt_type, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if not hasattr(self, 'current_prompt_type') or self.current_prompt_type == 'translation':
            self.current_prompt_type = 'translation'
        self.request_start_time = time.time()
        
        user_prompt = f"{context}\n\n–¢–ï–ö–°–¢ –î–õ–Ø –ü–ï–†–ï–í–û–î–ê:\n{text}"
        return self.make_request(system_prompt, user_prompt, temperature=temperature)

    def generate_summary(self, text: str, summary_prompt: str, chapter_id: int = None) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ –≥–ª–∞–≤—ã"""
        self.current_chapter_id = chapter_id
        # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º current_prompt_type, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if not hasattr(self, 'current_prompt_type') or self.current_prompt_type == 'translation':
            self.current_prompt_type = 'summary'
        self.request_start_time = time.time()
        
        user_prompt = f"–¢–ï–ö–°–¢ –ì–õ–ê–í–´:\n{text}"
        return self.make_request(summary_prompt, user_prompt, temperature=0.3)

    def extract_terms(self, text: str, extraction_prompt: str, existing_glossary: Dict, chapter_id: int = None) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        self.current_chapter_id = chapter_id
        # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º current_prompt_type, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if not hasattr(self, 'current_prompt_type') or self.current_prompt_type == 'translation':
            self.current_prompt_type = 'terms_extraction'
        self.request_start_time = time.time()
        
        glossary_text = self.format_glossary_for_prompt(existing_glossary)
        user_prompt = f"–°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ì–õ–û–°–°–ê–†–ò–ô:\n{glossary_text}\n\n–¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{text}"
        return self.make_request(extraction_prompt, user_prompt, temperature=0.2)

    def format_glossary_for_prompt(self, glossary: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ—Å—Å–∞—Ä–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        lines = []
        
        if glossary.get('characters'):
            lines.append("–ü–ï–†–°–û–ù–ê–ñ–ò:")
            for eng, rus in sorted(glossary['characters'].items()):
                lines.append(f"- {eng} = {rus}")
            lines.append("")
        
        if glossary.get('locations'):
            lines.append("–õ–û–ö–ê–¶–ò–ò:")
            for eng, rus in sorted(glossary['locations'].items()):
                lines.append(f"- {eng} = {rus}")
            lines.append("")
        
        if glossary.get('terms'):
            lines.append("–¢–ï–†–ú–ò–ù–´:")
            for eng, rus in sorted(glossary['terms'].items()):
                lines.append(f"- {eng} = {rus}")
            lines.append("")
        
        if glossary.get('techniques'):
            lines.append("–¢–ï–•–ù–ò–ö–ò:")
            for eng, rus in sorted(glossary['techniques'].items()):
                lines.append(f"- {eng} = {rus}")
            lines.append("")
        
        if glossary.get('artifacts'):
            lines.append("–ê–†–¢–ï–§–ê–ö–¢–´:")
            for eng, rus in sorted(glossary['artifacts'].items()):
                lines.append(f"- {eng} = {rus}")
            lines.append("")
        
        return "\n".join(lines) if lines else "–ì–ª–æ—Å—Å–∞—Ä–∏–π –ø—É—Å—Ç"


class TranslationContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤—ã"""
    
    def __init__(self, novel_id: int):
        self.novel_id = novel_id
        self.previous_summaries = []
        self.glossary = {}
        self._load_context()
    
    def _load_context(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—é–º–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–ª–∞–≤ (–¥–æ 5)
        from app.models import Chapter
        chapters = Chapter.query.filter_by(
            novel_id=self.novel_id, 
            status='translated'
        ).order_by(Chapter.chapter_number.desc()).limit(5).all()
        
        for chapter in reversed(chapters):
            if chapter.current_translation and chapter.current_translation.summary:
                self.previous_summaries.append({
                    'chapter': chapter.chapter_number,
                    'summary': chapter.current_translation.summary
                })
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ—Å—Å–∞—Ä–∏–π
        self.glossary = GlossaryItem.get_glossary_dict(self.novel_id)
    
    def build_context_prompt(self) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        lines = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–ª–∞–≤
        if self.previous_summaries:
            lines.append("–ö–û–ù–¢–ï–ö–°–¢ –ü–†–ï–î–´–î–£–©–ò–• –ì–õ–ê–í:")
            lines.append("=" * 50)
            for item in self.previous_summaries:
                lines.append(f"\n–ì–ª–∞–≤–∞ {item['chapter']}:")
                lines.append(item['summary'])
            lines.append("\n" + "=" * 50 + "\n")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ—Å—Å–∞—Ä–∏–π
        if self.glossary['characters']:
            lines.append("–£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ü–ï–†–ï–í–û–î–´ –ò–ú–Å–ù:")
            for eng, rus in sorted(self.glossary['characters'].items()):
                lines.append(f"- {eng} ‚Üí {rus}")
            lines.append("")

        if self.glossary['locations']:
            lines.append("–£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ü–ï–†–ï–í–û–î–´ –õ–û–ö–ê–¶–ò–ô:")
            for eng, rus in sorted(self.glossary['locations'].items()):
                lines.append(f"- {eng} ‚Üí {rus}")
            lines.append("")

        if self.glossary['terms']:
            lines.append("–£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ü–ï–†–ï–í–û–î–´ –¢–ï–†–ú–ò–ù–û–í:")
            for eng, rus in sorted(self.glossary['terms'].items()):
                lines.append(f"- {eng} ‚Üí {rus}")
            lines.append("")

        return "\n".join(lines)


class TranslatorService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–∞"""

    def __init__(self, config: Dict = None):
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TranslatorService")
        
        self.config = TranslatorConfig(**config) if config else TranslatorConfig()
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: –º–æ–¥–µ–ª—å={self.config.model_name}, –ø—Ä–æ–∫—Å–∏={self.config.proxy_url}, –∫–ª—é—á–µ–π={len(self.config.api_keys)}")
        
        logger.info("üîß –°–æ–∑–¥–∞–µ–º LLMTranslator")
        self.translator = LLMTranslator(self.config)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        save_history = config.get('save_prompt_history', True) if config else True
        self.translator.set_save_prompt_history(save_history)
        
        logger.info("‚úÖ TranslatorService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    def translate_chapter(self, chapter: Chapter) -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥ –≥–ª–∞–≤—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏ –≥–ª–æ—Å—Å–∞—Ä–∏—è"""
        LogService.log_info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≥–ª–∞–≤—ã {chapter.chapter_number}: {chapter.original_title}", 
                          novel_id=chapter.novel_id, chapter_id=chapter.id)
        print(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥ –≥–ª–∞–≤—ã {chapter.chapter_number}: {chapter.original_title}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –Ω–æ–≤–µ–ª–ª—ã
            LogService.log_info(f"–ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            prompt_template = chapter.novel.get_prompt_template()
            if not prompt_template:
                LogService.log_error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                                   novel_id=chapter.novel_id, chapter_id=chapter.id)
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞")
                return False
            
            LogService.log_info(f"–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω: {prompt_template.name}", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
            LogService.log_info(f"–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            context = TranslationContext(chapter.novel_id)
            context_prompt = context.build_context_prompt()
            LogService.log_info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–∑–¥–∞–Ω, –¥–ª–∏–Ω–∞: {len(context_prompt)} —Å–∏–º–≤–æ–ª–æ–≤", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            LogService.log_info(f"–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            text_to_translate = self.preprocess_text(chapter.original_text)
            LogService.log_info(f"–¢–µ–∫—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω, –¥–ª–∏–Ω–∞: {len(text_to_translate)} —Å–∏–º–≤–æ–ª–æ–≤", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            LogService.log_info(f"–†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã {chapter.chapter_number} –Ω–∞ —á–∞—Å—Ç–∏", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            text_parts = self.split_long_text(text_to_translate)
            LogService.log_info(f"–¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(text_parts)} —á–∞—Å—Ç–µ–π", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            translated_parts = []
            
            for i, part in enumerate(text_parts):
                LogService.log_info(f"–ü–µ—Ä–µ–≤–æ–¥ —á–∞—Å—Ç–∏ {i+1}/{len(text_parts)} –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                print(f"   üìù –ü–µ—Ä–µ–≤–æ–¥ —á–∞—Å—Ç–∏ {i+1}/{len(text_parts)}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–æ–≤–µ–ª–ª—ã
                novel_config = chapter.novel.config or {}
                translation_temperature = novel_config.get('translation_temperature', 0.1)
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–∞—Å—Ç—å
                LogService.log_info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —á–∞—Å—Ç–∏ {i+1} —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π {translation_temperature}", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                translated_part = self.translator.translate_text(
                    part, 
                    prompt_template.translation_prompt,
                    context_prompt,
                    chapter.id,
                    temperature=translation_temperature
                )
                
                if not translated_part:
                    LogService.log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∞—Å—Ç–∏ {i+1} –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                                       novel_id=chapter.novel_id, chapter_id=chapter.id)
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∞—Å—Ç–∏ {i+1}")
                    return False
                
                LogService.log_info(f"–ß–∞—Å—Ç—å {i+1} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –¥–ª–∏–Ω–∞: {len(translated_part)} —Å–∏–º–≤–æ–ª–æ–≤", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                translated_parts.append(translated_part)
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏
            LogService.log_info(f"–û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            full_translation = "\n\n".join(translated_parts)
            LogService.log_info(f"–ß–∞—Å—Ç–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã, –æ–±—â–∞—è –¥–ª–∏–Ω–∞: {len(full_translation)} —Å–∏–º–≤–æ–ª–æ–≤", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            LogService.log_info(f"–ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            title, content = self.extract_title_and_content(full_translation)
            LogService.log_info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: '{title}', –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            LogService.log_info(f"–í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            validation = self.validate_translation(chapter.original_text, content, chapter.chapter_number)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–±–∑–∞—Ü–∞–º–∏, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑
            if validation['critical']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –∞–±–∑–∞—Ü–∞–º–∏
                paragraph_issue = any('–∞–±–∑–∞—Ü' in issue.lower() for issue in validation['critical_issues'])
                
                if paragraph_issue:
                    LogService.log_warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–±–∑–∞—Ü–∞–º–∏ –≤ –≥–ª–∞–≤–µ {chapter.chapter_number}, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", 
                                         novel_id=chapter.novel_id, chapter_id=chapter.id)
                    print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–±–∑–∞—Ü–∞–º–∏: {validation['critical_issues']}")
                    print(f"   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞...")
                    
                    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
                    translated_parts_retry = []
                    for i, part in enumerate(text_parts):
                        LogService.log_info(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–∞—Å—Ç–∏ {i+1}/{len(text_parts)} –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                                          novel_id=chapter.novel_id, chapter_id=chapter.id)
                        print(f"   üìù –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–∞—Å—Ç–∏ {i+1}/{len(text_parts)}")
                        
                        translated_part = self.translator.translate_text(
                            part, 
                            prompt_template.translation_prompt,
                            context_prompt,
                            chapter.id,
                            temperature=translation_temperature
                        )
                        
                        if not translated_part:
                            LogService.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∞—Å—Ç–∏ {i+1} –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                                               novel_id=chapter.novel_id, chapter_id=chapter.id)
                            break
                        
                        translated_parts_retry.append(translated_part)
                    
                    if len(translated_parts_retry) == len(text_parts):
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                        full_translation = '\n\n'.join(translated_parts_retry)
                        title, content = self.extract_title_and_content(full_translation)
                        
                        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                        validation = self.validate_translation(chapter.original_text, content, chapter.chapter_number)
                        
                        if validation['critical']:
                            LogService.log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤—ã {chapter.chapter_number}: {validation['critical_issues']}", 
                                               novel_id=chapter.novel_id, chapter_id=chapter.id)
                            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {validation['critical_issues']}")
                            return False
                        else:
                            LogService.log_info(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω, –∫–∞—á–µ—Å—Ç–≤–æ: {self.calculate_quality_score(validation)}", 
                                              novel_id=chapter.novel_id, chapter_id=chapter.id)
                            print(f"   ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω")
                else:
                    # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Å –∞–±–∑–∞—Ü–∞–º–∏, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    LogService.log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–µ—Ä–µ–≤–æ–¥–µ –≥–ª–∞–≤—ã {chapter.chapter_number}: {validation['critical_issues']}", 
                                       novel_id=chapter.novel_id, chapter_id=chapter.id)
                    print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–µ—Ä–µ–≤–æ–¥–µ: {validation['critical_issues']}")
                    return False
            
            LogService.log_info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –∫–∞—á–µ—Å—Ç–≤–æ: {self.calculate_quality_score(validation)}", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
            summary = None
            if prompt_template.summary_prompt:
                LogService.log_info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ –¥–ª—è –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                summary = self.translator.generate_summary(content, prompt_template.summary_prompt, chapter.id)
                if summary:
                    LogService.log_info(f"–†–µ–∑—é–º–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –¥–ª–∏–Ω–∞: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤", 
                                      novel_id=chapter.novel_id, chapter_id=chapter.id)
                else:
                    LogService.log_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                                         novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            if prompt_template.terms_extraction_prompt:
                LogService.log_info(f"–ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –≥–ª–∞–≤—ã {chapter.chapter_number}", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∏—Ç–∞–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤
                new_terms = self.extract_new_terms(chapter.original_text, prompt_template.terms_extraction_prompt, context.glossary, chapter.id)
                if new_terms:
                    LogService.log_info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_terms)} –Ω–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤", 
                                      novel_id=chapter.novel_id, chapter_id=chapter.id)
                    self.save_new_terms(new_terms, chapter.novel_id, chapter.chapter_number)
                else:
                    LogService.log_info(f"–ù–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≥–ª–∞–≤–µ {chapter.chapter_number}", 
                                      novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            LogService.log_info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≥–ª–∞–≤—ã {chapter.chapter_number} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            translation = Translation(
                chapter_id=chapter.id,
                translated_title=title,
                translated_text=content,
                summary=summary,
                quality_score=self.calculate_quality_score(validation),
                translation_time=time.time(),
                metadata={
                    'template_used': prompt_template.name,
                    'validation': validation,
                    'parts_count': len(text_parts)
                }
            )
            
            db.session.add(translation)
            chapter.status = 'translated'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤ –≤ –Ω–æ–≤–µ–ª–ª–µ
            from app.models import Novel
            novel = Novel.query.get(chapter.novel_id)
            if novel:
                translated_count = Chapter.query.filter_by(novel_id=chapter.novel_id, status='translated').count()
                novel.translated_chapters = translated_count
                LogService.log_info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤: {translated_count}", 
                                  novel_id=chapter.novel_id, chapter_id=chapter.id)
            
            db.session.commit()
            
            LogService.log_info(f"–ì–ª–∞–≤–∞ {chapter.chapter_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", 
                              novel_id=chapter.novel_id, chapter_id=chapter.id)
            print(f"   ‚úÖ –ì–ª–∞–≤–∞ {chapter.chapter_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            LogService.log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤—ã {chapter.chapter_number}: {e}", 
                               novel_id=chapter.novel_id, chapter_id=chapter.id)
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤—ã {chapter.chapter_number}: {e}")
            db.session.rollback()
            return False

    def preprocess_text(self, text: str) -> str:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–±–∑–∞—Ü–µ–≤)"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        text = preprocess_chapter_text(text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (–∞–±–∑–∞—Ü—ã)
        text = text.replace('\n\n', '¬ßPARAGRAPH_BREAK¬ß')
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'[ \t]+', ' ', text)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (–±–æ–ª–µ–µ 3 –ø–æ–¥—Ä—è–¥)
        text = re.sub(r'(.)\1{3,}', r'\1\1\1', text)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = text.replace('¬ßPARAGRAPH_BREAK¬ß', '\n\n')
        
        return text.strip()

    def split_long_text(self, text: str, max_words: int = 1200) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∞–±–∑–∞—Ü–µ–≤"""
        paragraphs = text.split('\n\n')
        parts = []
        current_part = []
        current_words = 0
        
        for paragraph in paragraphs:
            paragraph_words = len(paragraph.split())
            
            if current_words + paragraph_words > max_words and current_part:
                parts.append('\n\n'.join(current_part))
                current_part = [paragraph]
                current_words = paragraph_words
            else:
                current_part.append(paragraph)
                current_words += paragraph_words
        
        if current_part:
            parts.append('\n\n'.join(current_part))
        
        return parts

    def extract_title_and_content(self, translated_text: str) -> Tuple[str, str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        lines = translated_text.strip().split('\n')
        
        if lines:
            title = lines[0].strip()
            content = '\n'.join(lines[1:]).strip()
            return title, content
        
        return "", translated_text

    def validate_translation(self, original: str, translated: str, chapter_num: int) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Å–∫—Ä–∏–ø—Ç–µ)"""
        issues = []
        warnings = []
        critical_issues = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª–∏–Ω—ã
        orig_len = len(original)
        trans_len = len(translated)
        ratio = trans_len / orig_len if orig_len > 0 else 0

        # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥ –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ 10-30%
        if ratio < 0.6:
            critical_issues.append(f"–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {ratio:.2f} –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
        elif ratio < 0.9:
            issues.append(f"–ü–µ—Ä–µ–≤–æ–¥ –∫–æ—Ä–æ—Ç–∫–∏–π: {ratio:.2f} –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
        elif ratio > 1.6:
            warnings.append(f"–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {ratio:.2f} –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–±–∑–∞—Ü–µ–≤ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
        orig_paragraphs = len([p for p in original.split('\n\n') if p.strip()])
        trans_paragraphs = len([p for p in translated.split('\n\n') if p.strip()])

        para_diff = abs(orig_paragraphs - trans_paragraphs)
        para_ratio = trans_paragraphs / orig_paragraphs if orig_paragraphs > 0 else 0

        # –ú–µ–Ω–µ–µ 60% –∞–±–∑–∞—Ü–µ–≤ - –∫—Ä–∏—Ç–∏—á–Ω–æ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
        if para_ratio < 0.6:
            critical_issues.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –∞–±–∑–∞—Ü–∞—Ö: {orig_paragraphs} ‚Üí {trans_paragraphs} ({para_ratio:.1%})")
        elif para_diff > 2:
            issues.append(f"–†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞–±–∑–∞—Ü–µ–≤: {orig_paragraphs} ‚Üí {trans_paragraphs}")
        elif para_diff > 0:
            warnings.append(f"–ù–µ–±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –∞–±–∑–∞—Ü–∞—Ö: {orig_paragraphs} ‚Üí {trans_paragraphs}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —á–∏—Å–µ–ª (–≤–∞–∂–Ω–æ –¥–ª—è —Å—è–Ω—å—Å—è)
        import re
        orig_numbers = re.findall(r'\b\d+\b', original)
        trans_numbers = re.findall(r'\b\d+\b', translated)

        if len(orig_numbers) != len(trans_numbers):
            issues.append(f"–†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∏—Å–µ–ª: {len(orig_numbers)} ‚Üí {len(trans_numbers)}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        stats = {
            'length_ratio': ratio,
            'paragraph_diff': para_diff,
            'paragraph_ratio': para_ratio,
            'original_words': len(original.split()),
            'translated_words': len(translated.split()),
            'numbers_preserved': len(orig_numbers) == len(trans_numbers)
        }

        return {
            'valid': len(issues) == 0 and len(critical_issues) == 0,
            'critical': len(critical_issues) > 0,
            'issues': issues,
            'warnings': warnings,
            'critical_issues': critical_issues,
            'stats': stats
        }

    def calculate_quality_score(self, validation: Dict) -> int:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        score = 10
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
        score -= len(validation['critical_issues']) * 3
        score -= len(validation['issues']) * 1
        score -= len(validation['warnings']) * 0.5
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ —Ö–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if validation['stats']['length_ratio'] >= 0.9 and validation['stats']['length_ratio'] <= 1.3:
            score += 1
        
        return max(1, min(10, int(score)))

    def extract_new_terms(self, text: str, extraction_prompt: str, existing_glossary: Dict, chapter_id: int = None) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç: {extraction_prompt[:200]}...")
        
        result = self.translator.extract_terms(text, extraction_prompt, existing_glossary, chapter_id)
        if not result:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ—Ä–º–∏–Ω—ã - –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return None
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª–∏–Ω–æ–π {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        return self.parse_extraction_result(result)

    def parse_extraction_result(self, text: str) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤"""
        result = {'characters': {}, 'locations': {}, 'terms': {}, 'techniques': {}, 'artifacts': {}}
        
        logger.info(f"üîç –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤, –¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {text[:500]}...")
        
        current_section = None
        for line in text.split('\n'):
            line = line.strip()
            
            if '–ü–ï–†–°–û–ù–ê–ñ–ò:' in line:
                current_section = 'characters'
                logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: {current_section}")
            elif '–õ–û–ö–ê–¶–ò–ò:' in line:
                current_section = 'locations'
                logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: {current_section}")
            elif '–¢–ï–†–ú–ò–ù–´:' in line:
                current_section = 'terms'
                logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: {current_section}")
            elif '–¢–ï–•–ù–ò–ö–ò:' in line:
                current_section = 'techniques'
                logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: {current_section}")
            elif '–ê–†–¢–ï–§–ê–ö–¢–´:' in line:
                current_section = 'artifacts'
                logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: {current_section}")
            elif line.startswith('- ') and current_section:
                if '–Ω–µ—Ç –Ω–æ–≤—ã—Ö' in line.lower():
                    logger.info(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É '–Ω–µ—Ç –Ω–æ–≤—ã—Ö': {line}")
                    continue
                
                parts = line[2:].split(' = ')
                if len(parts) == 2:
                    eng, rus = parts[0].strip(), parts[1].strip()
                    if eng and rus and eng != rus:
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Ç–µ—Ä–º–∏–Ω: {eng} = {rus}")
                        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤
                        if self.is_valid_term(eng, rus):
                            result[current_section][eng] = rus
                            logger.info(f"‚úÖ –¢–µ—Ä–º–∏–Ω –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {eng} = {rus}")
                        else:
                            logger.info(f"‚ùå –¢–µ—Ä–º–∏–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {eng} = {rus}")
                    else:
                        logger.info(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ—Ä–º–∏–Ω–∞: {line}")
                else:
                    logger.info(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for category, terms in result.items():
            logger.info(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}: {len(terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤")
            for eng, rus in terms.items():
                logger.info(f"  - {eng} = {rus}")
        
        return result
    
    def is_valid_term(self, eng: str, rus: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞"""
        # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (–±–æ–ª—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(eng) > 50 or len(rus) > 50:
            return False
        
        # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (–º–µ–Ω—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(eng) < 2 or len(rus) < 2:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–ª–æ–≤–∞ (–Ω–µ –∏–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ)
        common_words = ['the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by']
        if eng.lower() in common_words:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Å–æ–¥–µ—Ä–∂–∞—Ç –º–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤)
        if eng.count(' ') > 5 or rus.count(' ') > 5:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if any(char.isdigit() for char in eng) or any(char.isdigit() for char in rus):
            return False
        
        return True

    def save_new_terms(self, new_terms: Dict, novel_id: int, chapter_number: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–π"""
        total_saved = 0
        for category, terms in new_terms.items():
            logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}: {len(terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤")
            for eng, rus in terms.items():
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ä–º–∏–Ω: {eng} = {rus}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
                existing = GlossaryItem.query.filter_by(
                    novel_id=novel_id,
                    english_term=eng
                ).first()
                
                if not existing:
                    glossary_item = GlossaryItem(
                        novel_id=novel_id,
                        english_term=eng,
                        russian_term=rus,
                        category=category,
                        first_appearance_chapter=chapter_number,
                        is_auto_generated=True,
                        is_active=True
                    )
                    db.session.add(glossary_item)
                    total_saved += 1
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω: {eng} = {rus} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
                else:
                    logger.info(f"‚ÑπÔ∏è –¢–µ—Ä–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {eng}")
        
        db.session.commit()
        logger.info(f"üìö –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤: {total_saved}")
        print(f"   üìö –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {total_saved} –Ω–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤") 