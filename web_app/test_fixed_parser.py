#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models import Novel, Chapter, Task
from app.services.parser_service import WebParserService

def test_fixed_parser_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    app = create_app()
    with app.app_context():
        print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –ü–ê–†–°–ï–†–ê")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.get(2)
        if not novel:
            print("‚ùå –ù–æ–≤–µ–ª–ª–∞ —Å ID=2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        print(f"üìñ –ù–æ–≤–µ–ª–ª–∞: {novel.title}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        active_chapters = Chapter.query.filter_by(novel_id=2, is_active=True).count()
        deleted_chapters = Chapter.query.filter_by(novel_id=2, is_active=False).count()
        print(f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–ª–∞–≤: {active_chapters}")
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤: {deleted_chapters}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = WebParserService()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤
            print("1Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤...")
            chapters_data = parser.parse_novel_chapters(novel)
            
            if not chapters_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤")
                return
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤ –Ω–∞ —Å–∞–π—Ç–µ: {len(chapters_data)}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            print("\n2Ô∏è‚É£ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ü–†–û–í–ï–†–ö–ò –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø...")
            
            for chapter_data in chapters_data[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –≥–ª–∞–≤—ã
                chapter_number = chapter_data['number']
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞
                existing_chapter = Chapter.query.filter_by(
                    novel_id=2,
                    chapter_number=chapter_number,
                    is_active=True
                ).first()
                
                if existing_chapter:
                    print(f"   –ì–ª–∞–≤–∞ {chapter_number}: –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≥–ª–∞–≤–∞ (ID={existing_chapter.id})")
                    print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä –ü–†–û–ü–£–°–¢–ò–¢ –≥–ª–∞–≤—É")
                else:
                    print(f"   –ì–ª–∞–≤–∞ {chapter_number}: –∞–∫—Ç–∏–≤–Ω–∞—è –≥–ª–∞–≤–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–¥–∞–ª–µ–Ω–Ω–∞—è –≥–ª–∞–≤–∞
                    deleted_chapter = Chapter.query.filter_by(
                        novel_id=2,
                        chapter_number=chapter_number,
                        is_active=False
                    ).first()
                    
                    if deleted_chapter:
                        print(f"     ‚Üí –ù–∞–π–¥–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–∞—è –≥–ª–∞–≤–∞ (ID={deleted_chapter.id})")
                        print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä –°–û–ó–î–ê–°–¢ –ù–û–í–£–Æ –≥–ª–∞–≤—É")
                    else:
                        print(f"     ‚Üí –ì–ª–∞–≤–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
                        print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä –°–û–ó–î–ê–°–¢ –ù–û–í–£–Æ –≥–ª–∞–≤—É")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥–ª–∞–≤—ã
            print(f"\n3Ô∏è‚É£ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ô –ì–õ–ê–í–´...")
            
            if chapters_data:
                test_chapter = chapters_data[0]
                chapter_number = test_chapter['number']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≥–ª–∞–≤ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –µ—Å—Ç—å
                all_chapters_with_number = Chapter.query.filter_by(
                    novel_id=2,
                    chapter_number=chapter_number
                ).all()
                
                active_chapters_with_number = Chapter.query.filter_by(
                    novel_id=2,
                    chapter_number=chapter_number,
                    is_active=True
                ).all()
                
                print(f"   –ì–ª–∞–≤–∞ {chapter_number}:")
                print(f"     - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {len(all_chapters_with_number)}")
                print(f"     - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(active_chapters_with_number)}")
                
                if active_chapters_with_number:
                    print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –≥–ª–∞–≤—É (–µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è)")
                else:
                    print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é –≥–ª–∞–≤—É")
                    print(f"     ‚Üí –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—É–¥–µ—Ç {len(all_chapters_with_number) + 1} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            parser.cleanup_driver()

def test_actual_parsing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    app = create_app()
    with app.app_context():
        print("\nüöÄ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.get(2)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = WebParserService()
        
        try:
            print("üîß –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            success = parser.parse_novel(2)
            
            if success:
                print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                active_chapters_after = Chapter.query.filter_by(novel_id=2, is_active=True).count()
                all_chapters_after = Chapter.query.filter_by(novel_id=2).count()
                
                print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–ª–∞–≤: {active_chapters_after}")
                print(f"   –í—Å–µ–≥–æ –≥–ª–∞–≤ –≤ –ë–î: {all_chapters_after}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
                active_chapters = Chapter.query.filter_by(novel_id=2, is_active=True).order_by(Chapter.chapter_number).all()
                print(f"\nüìñ –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–ª–∞–≤—ã:")
                for chapter in active_chapters:
                    print(f"   –ì–ª–∞–≤–∞ {chapter.chapter_number}: {chapter.original_title} (ID={chapter.id})")
                
            else:
                print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            parser.cleanup_driver()

if __name__ == '__main__':
    print("üîß –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É
    test_fixed_parser_logic()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    test_actual_parsing()
    
    print("\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù") 