#!/usr/bin/env python3
"""
VNC Service –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ Selenium –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

–£–ø—Ä–∞–≤–ª—è–µ—Ç:
- x11vnc —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–∞ Xvfb –¥–∏—Å–ø–ª–µ–µ
- websockify –ø—Ä–æ–∫—Å–∏ –¥–ª—è noVNC
"""

import os
import sys
import subprocess
import signal
import time
import psutil
from pathlib import Path

class VNCService:
    def __init__(self, display=":99", vnc_port=5900, websocket_port=6080):
        self.display = display
        self.vnc_port = vnc_port
        self.websocket_port = websocket_port
        self.x11vnc_process = None
        self.websockify_process = None

        # –ü—É—Ç–∏ –¥–ª—è PID —Ñ–∞–π–ª–æ–≤
        self.pid_dir = Path("/tmp/novelbins_vnc")
        self.pid_dir.mkdir(exist_ok=True)
        self.x11vnc_pidfile = self.pid_dir / "x11vnc.pid"
        self.websockify_pidfile = self.pid_dir / "websockify.pid"

    def is_running(self, pidfile):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å"""
        if not pidfile.exists():
            return False

        try:
            with open(pidfile) as f:
                pid = int(f.read().strip())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            return psutil.pid_exists(pid)
        except:
            return False

    def start_x11vnc(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å x11vnc —Å–µ—Ä–≤–µ—Ä"""
        if self.is_running(self.x11vnc_pidfile):
            print(f"‚úÖ x11vnc —É–∂–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.display}")
            return True

        print(f"üöÄ –ó–∞–ø—É—Å–∫ x11vnc –Ω–∞ –¥–∏—Å–ø–ª–µ–µ {self.display}...")

        cmd = [
            'x11vnc',
            '-display', self.display,
            '-rfbport', str(self.vnc_port),
            '-shared',  # –†–∞–∑—Ä–µ—à–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            '-forever',  # –ù–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            '-nopw',  # –ë–µ–∑ –ø–∞—Ä–æ–ª—è (–∑–∞—â–∏—â–µ–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Ç–∏)
            '-quiet',
            '-bg',  # –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
            '-o', '/tmp/x11vnc.log',
        ]

        try:
            result = subprocess.run(cmd, capture_output=True, text=True)

            # x11vnc –≤ -bg —Ä–µ–∂–∏–º–µ –≤—ã–≤–æ–¥–∏—Ç PID –≤ stderr
            time.sleep(1)

            # –ù–∞–π–¥–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if proc.info['name'] == 'x11vnc' and self.display in proc.info['cmdline']:
                        pid = proc.info['pid']
                        with open(self.x11vnc_pidfile, 'w') as f:
                            f.write(str(pid))
                        print(f"‚úÖ x11vnc –∑–∞–ø—É—â–µ–Ω (PID: {pid})")
                        return True
                except:
                    continue

            print(f"‚ö†Ô∏è x11vnc –∑–∞–ø—É—â–µ–Ω, –Ω–æ PID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ x11vnc: {e}")
            return False

    def start_websockify(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å websockify –ø—Ä–æ–∫—Å–∏"""
        if self.is_running(self.websockify_pidfile):
            print(f"‚úÖ websockify —É–∂–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.websocket_port}")
            return True

        print(f"üöÄ –ó–∞–ø—É—Å–∫ websockify –Ω–∞ –ø–æ—Ä—Ç—É {self.websocket_port}...")

        # –ü—É—Ç—å –∫ noVNC
        novnc_path = Path(__file__).parent / 'app' / 'static' / 'novnc'

        cmd = [
            sys.executable, '-m', 'websockify',
            '--web', str(novnc_path),
            str(self.websocket_port),
            f'localhost:{self.vnc_port}',
        ]

        try:
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                start_new_session=True
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
            with open(self.websockify_pidfile, 'w') as f:
                f.write(str(process.pid))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            time.sleep(1)
            if process.poll() is None:
                print(f"‚úÖ websockify –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
                return True
            else:
                print(f"‚ùå websockify –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ websockify: {e}")
            return False

    def stop_process(self, pidfile, name):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID —Ñ–∞–π–ª—É"""
        if not pidfile.exists():
            print(f"‚ö†Ô∏è {name} –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return True

        try:
            with open(pidfile) as f:
                pid = int(f.read().strip())

            if not psutil.pid_exists(pid):
                print(f"‚ö†Ô∏è {name} –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                pidfile.unlink()
                return True

            print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name} (PID: {pid})...")
            os.kill(pid, signal.SIGTERM)

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for _ in range(10):
                if not psutil.pid_exists(pid):
                    pidfile.unlink()
                    print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return True
                time.sleep(0.5)

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            print(f"‚ö†Ô∏è {name} –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ SIGKILL...")
            os.kill(pid, signal.SIGKILL)
            time.sleep(0.5)
            pidfile.unlink()
            print(f"‚úÖ {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
            return False

    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å VNC —Å–µ—Ä–≤–∏—Å"""
        print("=" * 60)
        print("VNC Service - –ó–∞–ø—É—Å–∫")
        print("=" * 60)

        success = True
        success &= self.start_x11vnc()
        success &= self.start_websockify()

        if success:
            print()
            print("‚úÖ VNC —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            print(f"üì∫ VNC –ø–æ—Ä—Ç: {self.vnc_port}")
            print(f"üåê WebSocket –ø–æ—Ä—Ç: {self.websocket_port}")
            print(f"üîó noVNC URL: http://localhost:{self.websocket_port}/vnc.html")
        else:
            print()
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VNC —Å–µ—Ä–≤–∏—Å–∞")

        return success

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VNC —Å–µ—Ä–≤–∏—Å"""
        print("=" * 60)
        print("VNC Service - –û—Å—Ç–∞–Ω–æ–≤–∫–∞")
        print("=" * 60)

        self.stop_process(self.websockify_pidfile, "websockify")
        self.stop_process(self.x11vnc_pidfile, "x11vnc")

        print()
        print("‚úÖ VNC —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å VNC —Å–µ—Ä–≤–∏—Å–∞"""
        print("=" * 60)
        print("VNC Service - –°—Ç–∞—Ç—É—Å")
        print("=" * 60)

        x11vnc_running = self.is_running(self.x11vnc_pidfile)
        websockify_running = self.is_running(self.websockify_pidfile)

        print(f"x11vnc: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if x11vnc_running else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"websockify: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if websockify_running else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

        if x11vnc_running and websockify_running:
            print()
            print(f"üîó VNC –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:{self.websocket_port}/vnc.html")

        return x11vnc_running and websockify_running

def main():
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    service = VNCService()

    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python vnc_service.py {start|stop|restart|status}")
        sys.exit(1)

    command = sys.argv[1]

    if command == 'start':
        service.start()
    elif command == 'stop':
        service.stop()
    elif command == 'restart':
        service.stop()
        time.sleep(1)
        service.start()
    elif command == 'status':
        service.status()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)

if __name__ == '__main__':
    main()
