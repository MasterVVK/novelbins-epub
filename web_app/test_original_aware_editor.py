#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OriginalAwareEditorService
–Ω–∞ –Ω–æ–≤–µ–ª–ª–µ "–û–¥–Ω–∞ –º—ã—Å–ª—å –æ –≤–µ—á–Ω–æ—Å—Ç–∏" (‰∏ÄÂøµÊ∞∏ÊÅí)
"""

import sys
import os
import time
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ web_app
sys.path.insert(0, str(Path(__file__).parent))

from app import create_app, db
from app.models import Novel, Chapter, Translation
from app.services.original_aware_editor_service import OriginalAwareEditorService
from app.services.translator_service import TranslatorService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)


def test_single_chapter(novel_id=11, chapter_number=1):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –≥–ª–∞–≤—ã
    """
    app = create_app()

    with app.app_context():
        print("\n" + "="*70)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OriginalAwareEditorService")
        print("="*70 + "\n")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.get(novel_id)
        if not novel:
            print(f"‚ùå –ù–æ–≤–µ–ª–ª–∞ —Å ID {novel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False

        print(f"üìö –ù–æ–≤–µ–ª–ª–∞: {novel.title}")
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {novel.original_title}")
        print(f"   –ê–≤—Ç–æ—Ä: {novel.author if novel.author else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        print(f"   –í—Å–µ–≥–æ –≥–ª–∞–≤: {novel.total_chapters}")
        print(f"   –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {novel.translated_chapters}")
        print(f"   –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {novel.edited_chapters}")
        print()

        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        chapter = Chapter.query.filter_by(
            novel_id=novel_id,
            chapter_number=chapter_number
        ).first()

        if not chapter:
            print(f"‚ùå –ì–ª–∞–≤–∞ {chapter_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False

        print(f"üìñ –ì–ª–∞–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: #{chapter.chapter_number}")
        print(f"   –°—Ç–∞—Ç—É—Å: {chapter.status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if not chapter.original_text:
            print(f"‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            return False
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(chapter.original_text)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        translation = Translation.query.filter_by(
            chapter_id=chapter.id,
            translation_type='initial'
        ).order_by(Translation.created_at.desc()).first()

        if not translation:
            print(f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –≥–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        print(f"   –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(translation.translated_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ö–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {translation.quality_score}/10")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ—Å—Å–∞—Ä–∏–π
        from app.services.glossary_service import GlossaryService
        glossary_items = GlossaryService.get_glossary_for_novel(novel_id)
        print(f"   –ì–ª–æ—Å—Å–∞—Ä–∏–π: {len(glossary_items)} —Ç–µ—Ä–º–∏–Ω–æ–≤")
        print()

        print("="*70)
        print("–ù–ê–ß–ò–ù–ê–ï–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –° –û–†–ò–ì–ò–ù–ê–õ–û–ú –ò –ì–õ–û–°–°–ê–†–ò–ï–ú")
        print("="*70 + "\n")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        translator_service = TranslatorService()
        editor = OriginalAwareEditorService(translator_service)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        print("üìù –§—Ä–∞–≥–º–µ–Ω—Ç –û–†–ò–ì–ò–ù–ê–õ–ê:")
        print("-"*50)
        print(chapter.original_text[:500])
        print("-"*50 + "\n")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
        print("üìù –§—Ä–∞–≥–º–µ–Ω—Ç –ü–ï–†–ï–í–û–î–ê (–¥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):")
        print("-"*50)
        print(translation.translated_text[:500])
        print("-"*50 + "\n")

        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
        start_time = time.time()

        # –ó–ê–ü–£–°–ö–ê–ï–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        print("   (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥)")
        print()

        try:
            result = editor.edit_chapter(chapter)

            if result:
                elapsed = time.time() - start_time
                print(f"\n‚úÖ –£–°–ü–ï–®–ù–û! –ì–ª–∞–≤–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                edited = Translation.query.filter_by(
                    chapter_id=chapter.id,
                    translation_type='edited'
                ).order_by(Translation.created_at.desc()).first()

                if edited:
                    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                    print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {edited.quality_score}/10 (–±—ã–ª–æ {translation.quality_score}/10)")
                    print(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(edited.translated_text)} —Å–∏–º–≤–æ–ª–æ–≤")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    if edited.context_used:
                        context = edited.context_used
                        print(f"\nüìà –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
                        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ –≥–ª–æ—Å—Å–∞—Ä–∏—è: {context.get('glossary_terms_used', 0)}")
                        print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤: {context.get('critical_terms', 0)}")
                        print(f"   –î–ª–∏–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {context.get('original_text_length', 0)}")
                        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª: {'–î–∞' if context.get('used_original') else '–ù–µ—Ç'}")
                        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≥–ª–æ—Å—Å–∞—Ä–∏–π: {'–î–∞' if context.get('used_full_glossary') else '–ù–µ—Ç'}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    print("\nüìù –§—Ä–∞–≥–º–µ–Ω—Ç –ü–û–°–õ–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                    print("-"*50)
                    print(edited.translated_text[:500])
                    print("-"*50)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤–µ–ª–ª—ã
                    novel.update_stats()
                    db.session.commit()

                    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    print(f"   –ì–ª–∞–≤–∞ {chapter.chapter_number} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                    print(f"   –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≥–ª–∞–≤—ã: {chapter.status}")
                    return True

            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–ª–∞–≤—ã")
                return False

        except Exception as e:
            print(f"\n‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False


def test_batch_chapters(novel_id=11, start_chapter=1, count=3):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–ª–∞–≤
    """
    app = create_app()

    with app.app_context():
        print("\n" + "="*70)
        print(f"–ü–ê–ö–ï–¢–ù–û–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ({count} –≥–ª–∞–≤)")
        print("="*70 + "\n")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.get(novel_id)
        if not novel:
            print(f"‚ùå –ù–æ–≤–µ–ª–ª–∞ —Å ID {novel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False

        print(f"üìö –ù–æ–≤–µ–ª–ª–∞: {novel.title}")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        translator_service = TranslatorService()
        editor = OriginalAwareEditorService(translator_service)

        success_count = 0

        for i in range(count):
            chapter_num = start_chapter + i

            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—É
            chapter = Chapter.query.filter_by(
                novel_id=novel_id,
                chapter_number=chapter_num
            ).first()

            if not chapter:
                print(f"‚ö†Ô∏è –ì–ª–∞–≤–∞ {chapter_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            if chapter.status == 'edited':
                print(f"‚è≠Ô∏è –ì–ª–∞–≤–∞ {chapter_num} —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            print(f"\nüìñ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤—É {chapter_num}...")

            try:
                result = editor.edit_chapter(chapter)
                if result:
                    success_count += 1
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

        print(f"\nüìä –ò—Ç–æ–≥–∏:")
        print(f"   –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {success_count} –∏–∑ {count} –≥–ª–∞–≤")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        novel.update_stats()
        db.session.commit()

        print(f"   –í—Å–µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –Ω–æ–≤–µ–ª–ª–µ: {novel.edited_chapters}")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OriginalAwareEditorService')
    parser.add_argument('--novel-id', type=int, default=11,
                       help='ID –Ω–æ–≤–µ–ª–ª—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 11 - –û–¥–Ω–∞ –º—ã—Å–ª—å –æ –≤–µ—á–Ω–æ—Å—Ç–∏)')
    parser.add_argument('--chapter', type=int, default=1,
                       help='–ù–æ–º–µ—Ä –≥–ª–∞–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)')
    parser.add_argument('--batch', action='store_true',
                       help='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª–∞–≤')
    parser.add_argument('--count', type=int, default=3,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)')

    args = parser.parse_args()

    if args.batch:
        # –ü–∞–∫–µ—Ç–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_batch_chapters(args.novel_id, args.chapter, args.count)
    else:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –≥–ª–∞–≤—ã
        test_single_chapter(args.novel_id, args.chapter)