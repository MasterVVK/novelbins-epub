#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models import Novel, Chapter, Task
from app.services.parser_service import WebParserService

def test_parsing_after_delete():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤"""
    app = create_app()
    with app.app_context():
        print("üß™ –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø –ì–õ–ê–í")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.get(2)
        if not novel:
            print("‚ùå –ù–æ–≤–µ–ª–ª–∞ —Å ID=2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        print(f"üìñ –ù–æ–≤–µ–ª–ª–∞: {novel.title}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        active_chapters_before = Chapter.query.filter_by(novel_id=2, is_active=True).count()
        all_chapters_before = Chapter.query.filter_by(novel_id=2).count()
        print(f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–ª–∞–≤ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {active_chapters_before}")
        print(f"üìö –í—Å–µ–≥–æ –≥–ª–∞–≤ –≤ –ë–î: {all_chapters_before}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–ª–∞–≤—ã (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
        print("\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ê–ö–¢–ò–í–ù–´–• –ì–õ–ê–í...")
        active_chapters = Chapter.query.filter_by(novel_id=2, is_active=True).all()
        deleted_count = 0
        
        for chapter in active_chapters:
            chapter.soft_delete()
            print(f"   –£–¥–∞–ª–µ–Ω–∞ –≥–ª–∞–≤–∞ {chapter.chapter_number}: {chapter.original_title}")
            deleted_count += 1
        
        db.session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –≥–ª–∞–≤: {deleted_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        active_chapters_after_delete = Chapter.query.filter_by(novel_id=2, is_active=True).count()
        print(f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–ª–∞–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {active_chapters_after_delete}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        print("\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = WebParserService()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
            print("1Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤...")
            chapters_data = parser.parse_novel_chapters(novel)
            
            if not chapters_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤")
                return
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤ –Ω–∞ —Å–∞–π—Ç–µ: {len(chapters_data)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –≥–ª–∞–≤—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
            print("\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ì–õ–ê–í –í –ë–î...")
            
            for chapter_data in chapters_data[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –≥–ª–∞–≤—ã
                chapter_number = chapter_data['number']
                
                # –ò—â–µ–º –≥–ª–∞–≤—É –≤ –ë–î (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
                existing_chapter = Chapter.query.filter_by(
                    novel_id=2,
                    chapter_number=chapter_number
                ).first()
                
                if existing_chapter:
                    print(f"   –ì–ª–∞–≤–∞ {chapter_number}: –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î (–∞–∫—Ç–∏–≤–Ω–∞: {existing_chapter.is_active}, —Å—Ç–∞—Ç—É—Å: {existing_chapter.status})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
                    if existing_chapter.is_active:
                        print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä –ü–†–û–ü–£–°–¢–ò–¢ –≥–ª–∞–≤—É (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞)")
                    else:
                        print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä –°–û–ó–î–ê–°–¢ –ù–û–í–£–Æ –≥–ª–∞–≤—É (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —É–¥–∞–ª–µ–Ω–∞)")
                else:
                    print(f"   –ì–ª–∞–≤–∞ {chapter_number}: –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                    print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä –°–û–ó–î–ê–°–¢ –ù–û–í–£–Æ –≥–ª–∞–≤—É")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥–ª–∞–≤—ã
            print(f"\n3Ô∏è‚É£ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ô –ì–õ–ê–í–´...")
            
            if chapters_data:
                test_chapter = chapters_data[0]
                chapter_number = test_chapter['number']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                existing = Chapter.query.filter_by(
                    novel_id=2,
                    chapter_number=chapter_number
                ).first()
                
                if existing:
                    print(f"   –ì–ª–∞–≤–∞ {chapter_number} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î:")
                    print(f"     - ID: {existing.id}")
                    print(f"     - –ê–∫—Ç–∏–≤–Ω–∞: {existing.is_active}")
                    print(f"     - –°—Ç–∞—Ç—É—Å: {existing.status}")
                    
                    if existing.is_active:
                        print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —ç—Ç—É –≥–ª–∞–≤—É")
                    else:
                        print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é –≥–ª–∞–≤—É —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º")
                        print(f"     ‚Üí –í –ë–î –±—É–¥–µ—Ç –î–í–ï –∑–∞–ø–∏—Å–∏ –¥–ª—è –≥–ª–∞–≤—ã {chapter_number}")
                else:
                    print(f"   –ì–ª–∞–≤–∞ {chapter_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                    print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é –≥–ª–∞–≤—É")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            parser.cleanup_driver()

def simulate_parsing_behavior():
    """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    app = create_app()
    with app.app_context():
        print("\nüîç –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–û–í–ï–î–ï–ù–ò–Ø –ü–ê–†–°–ï–†–ê")
        print("=" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.get(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞
        print("üìã –õ–û–ì–ò–ö–ê –ü–ê–†–°–ï–†–ê:")
        print("   1. –ü–∞—Ä—Å–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ —Å —Å–∞–π—Ç–∞")
        print("   2. –î–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ë–î:")
        print("      existing_chapter = Chapter.query.filter_by(")
        print("          novel_id=novel_id,")
        print("          chapter_number=chapter_data['number']")
        print("      ).first()")
        print("   3. –ï—Å–ª–∏ –≥–ª–∞–≤–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (existing_chapter is not None):")
        print("      - –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤—É (continue)")
        print("      - –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ—Ç is_active!")
        print("   4. –ï—Å–ª–∏ –≥–ª–∞–≤—ã –ù–ï–¢:")
        print("      - –ü–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
        print("      - –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≥–ª–∞–≤—É")
        
        print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê:")
        print("   –ü–∞—Ä—Å–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¢–û–õ–¨–ö–û —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã –ø–æ novel_id + chapter_number")
        print("   –ù–ï —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–µ is_active!")
        print("   –ï—Å–ª–∏ –≥–ª–∞–≤–∞ —É–¥–∞–ª–µ–Ω–∞ (is_active=False), –ø–∞—Ä—Å–µ—Ä –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –µ—ë")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüìä –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:")
        chapters = Chapter.query.filter_by(novel_id=2).order_by(Chapter.chapter_number).all()
        
        for chapter in chapters[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   –ì–ª–∞–≤–∞ {chapter.chapter_number}: ID={chapter.id}, –∞–∫—Ç–∏–≤–Ω–∞={chapter.is_active}, —Å—Ç–∞—Ç—É—Å={chapter.status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–∞—Ä—Å–µ—Ä–∞
        print(f"\nüß™ –¢–ï–°–¢ –ó–ê–ü–†–û–°–ê –ü–ê–†–°–ï–†–ê:")
        for chapter_number in [1, 2, 3]:
            existing = Chapter.query.filter_by(
                novel_id=2,
                chapter_number=chapter_number
            ).first()
            
            if existing:
                print(f"   –ì–ª–∞–≤–∞ {chapter_number}: –Ω–∞–π–¥–µ–Ω–∞ (ID={existing.id}, –∞–∫—Ç–∏–≤–Ω–∞={existing.is_active})")
                print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä –ü–†–û–ü–£–°–¢–ò–¢ –≥–ª–∞–≤—É")
            else:
                print(f"   –ì–ª–∞–≤–∞ {chapter_number}: –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
                print(f"     ‚Üí –ü–∞—Ä—Å–µ—Ä –°–û–ó–î–ê–°–¢ –≥–ª–∞–≤—É")

if __name__ == '__main__':
    print("üîß –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ü–ê–†–°–ò–ù–ì–ê –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è
    simulate_parsing_behavior()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_parsing_after_delete()
    
    print("\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù") 