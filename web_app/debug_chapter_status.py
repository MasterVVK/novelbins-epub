#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≥–ª–∞–≤ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

from app import create_app, db
from app.models import Novel, Chapter
from app.utils.status_colors import status_colors


def debug_chapter_statuses():
    """–û—Ç–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≥–ª–∞–≤"""
    
    print("üîç –û—Ç–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≥–ª–∞–≤ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n")
    
    app = create_app('development')
    
    with app.app_context():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–µ–ª–ª—ã
        novels = Novel.query.all()
        
        for novel in novels:
            print(f"üìö –ù–æ–≤–µ–ª–ª–∞: {novel.title} (ID: {novel.id})")
            print(f"   –°—Ç–∞—Ç—É—Å –Ω–æ–≤–µ–ª–ª—ã: {novel.status}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã
            chapters = Chapter.query.filter_by(novel_id=novel.id).order_by(Chapter.chapter_number).all()
            
            if chapters:
                print("   –ì–ª–∞–≤—ã:")
                for chapter in chapters:
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≥–ª–∞–≤—ã
                    color = status_colors.get_chapter_status_color(chapter.status)
                    icon = status_colors.get_status_icon(chapter.status, 'chapter')
                    text = status_colors.get_status_text(chapter.status, 'chapter')
                    
                    print(f"     –ì–ª–∞–≤–∞ {chapter.chapter_number}: {chapter.status} ‚Üí {color} | {icon} | {text}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
                    if chapter.status == 'translated':
                        expected_color = 'primary'
                        if color != expected_color:
                            print(f"       ‚ö†Ô∏è  –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª—Å—è {expected_color}, –ø–æ–ª—É—á–µ–Ω {color}")
                    elif chapter.status == 'edited':
                        expected_color = 'success'
                        if color != expected_color:
                            print(f"       ‚ö†Ô∏è  –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª—Å—è {expected_color}, –ø–æ–ª—É—á–µ–Ω {color}")
                    elif chapter.status == 'parsed':
                        expected_color = 'info'
                        if color != expected_color:
                            print(f"       ‚ö†Ô∏è  –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª—Å—è {expected_color}, –ø–æ–ª—É—á–µ–Ω {color}")
                    elif chapter.status == 'error':
                        expected_color = 'danger'
                        if color != expected_color:
                            print(f"       ‚ö†Ô∏è  –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª—Å—è {expected_color}, –ø–æ–ª—É—á–µ–Ω {color}")
                    elif chapter.status == 'pending':
                        expected_color = 'secondary'
                        if color != expected_color:
                            print(f"       ‚ö†Ô∏è  –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª—Å—è {expected_color}, –ø–æ–ª—É—á–µ–Ω {color}")
            else:
                print("   –ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            print()


def test_filter_rendering():
    """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üé® –¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n")
    
    app = create_app('development')
    
    with app.app_context():
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–µ–ª–ª—É —Å –≥–ª–∞–≤–∞–º–∏
        novel = Novel.query.first()
        if not novel:
            print("–ù–æ–≤–µ–ª–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        chapters = Chapter.query.filter_by(novel_id=novel.id).limit(3).all()
        
        if not chapters:
            print("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è –Ω–æ–≤–µ–ª–ª—ã: {novel.title}")
        
        for chapter in chapters:
            print(f"\n–ì–ª–∞–≤–∞ {chapter.chapter_number}: {chapter.status}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            color = app.jinja_env.filters['status_color'](chapter.status, 'chapter')
            badge_class = app.jinja_env.filters['status_badge_class'](chapter.status, 'chapter')
            icon = app.jinja_env.filters['status_icon'](chapter.status, 'chapter')
            text = app.jinja_env.filters['status_text'](chapter.status, 'chapter')
            
            print(f"  color: {color}")
            print(f"  badge_class: {badge_class}")
            print(f"  icon: {icon}")
            print(f"  text: {text}")
            
            # –†–µ–Ω–¥–µ—Ä–∏–º HTML
            template_code = """
            <span class="{{ chapter.status|status_badge_class('chapter') }}">
                <i class="{{ chapter.status|status_icon('chapter') }}"></i>
                {{ chapter.status|status_text('chapter') }}
            </span>
            """
            
            template = app.jinja_env.from_string(template_code)
            rendered = template.render(chapter=chapter)
            
            print(f"  HTML: {rendered}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("=" * 60)
    print("üîç –û–¢–õ–ê–î–ö–ê –°–¢–ê–¢–£–°–û–í –ì–õ–ê–í")
    print("=" * 60)
    
    try:
        debug_chapter_statuses()
        print("\n" + "=" * 60)
        test_filter_rendering()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == '__main__':
    exit(main()) 