#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ—Å—Å–∞—Ä–∏—è–º–∏: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, —ç–∫—Å–ø–æ—Ä—Ç
"""
import click
import json
from app import create_app, db
from app.services.glossary_extractor import GlossaryExtractor, GlossaryCopier
from app.services.glossary_service import GlossaryService
from app.models import Novel

app = create_app()

@click.group()
def cli():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ—Å—Å–∞—Ä–∏—è–º–∏"""
    pass

@cli.command()
@click.option('--novel-id', required=True, type=int, help='ID —Ä–æ–º–∞–Ω–∞')
@click.option('--min-frequency', default=2, help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞')
@click.option('--save', is_flag=True, help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î')
def extract(novel_id, min_frequency, save):
    """–ò–∑–≤–ª–µ—á—å –≥–ª–æ—Å—Å–∞—Ä–∏–π –∏–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤"""
    with app.app_context():
        novel = Novel.query.get(novel_id)
        if not novel:
            click.echo(f"‚ùå –†–æ–º–∞–Ω —Å ID {novel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        click.echo(f"üìö –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–ª–æ—Å—Å–∞—Ä–∏–π –¥–ª—è: {novel.title}")
        
        extractor = GlossaryExtractor(novel_id)
        glossary = extractor.extract_from_all_chapters(min_frequency)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for category, terms in glossary.items():
            if terms:
                click.echo(f"  {category}: {len(terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤")
        
        if save:
            saved = extractor.save_to_database(glossary)
            click.echo(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} –Ω–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤")
        else:
            click.echo("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --save –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")

@cli.command()
@click.option('--source', required=True, type=int, help='ID —Ä–æ–º–∞–Ω–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞')
@click.option('--target', required=True, type=int, help='ID —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–æ–º–∞–Ω–∞')
@click.option('--categories', multiple=True, help='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è')
@click.option('--theme', help='–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä (ballistics, cultivation, military)')
def copy(source, target, categories, theme):
    """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ—Å—Å–∞—Ä–∏–π –º–µ–∂–¥—É –∫–Ω–∏–≥–∞–º–∏"""
    with app.app_context():
        source_novel = Novel.query.get(source)
        target_novel = Novel.query.get(target)
        
        if not source_novel or not target_novel:
            click.echo("‚ùå –û–¥–∏–Ω –∏–∑ —Ä–æ–º–∞–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        click.echo(f"üìã –ö–æ–ø–∏—Ä—É–µ–º –≥–ª–æ—Å—Å–∞—Ä–∏–π:")
        click.echo(f"  –ò–∑: {source_novel.title}")
        click.echo(f"  –í: {target_novel.title}")
        
        if categories:
            click.echo(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
        if theme:
            click.echo(f"  –¢–µ–º–∞: {theme}")
        
        copied = GlossaryCopier.copy_glossary(
            source, target, 
            list(categories) if categories else None,
            theme
        )
        
        click.echo(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {copied} —Ç–µ—Ä–º–∏–Ω–æ–≤")

@cli.command()
@click.option('--novel-id', required=True, type=int, help='ID —Ä–æ–º–∞–Ω–∞')
@click.option('--output', default='glossary_export.json', help='–§–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
def export(novel_id, output):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ—Å—Å–∞—Ä–∏–π –≤ JSON"""
    with app.app_context():
        novel = Novel.query.get(novel_id)
        if not novel:
            click.echo(f"‚ùå –†–æ–º–∞–Ω —Å ID {novel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        glossary = GlossaryService.export_glossary_to_dict(novel_id)
        
        with open(output, 'w', encoding='utf-8') as f:
            json.dump(glossary, f, ensure_ascii=False, indent=2)
        
        total = sum(len(terms) for terms in glossary.values())
        click.echo(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {total} —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ {output}")

@cli.command()
@click.option('--novel-id', required=True, type=int, help='ID —Ä–æ–º–∞–Ω–∞')
@click.option('--input', required=True, help='JSON —Ñ–∞–π–ª —Å –≥–ª–æ—Å—Å–∞—Ä–∏–µ–º')
@click.option('--merge', is_flag=True, help='–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º')
def import_glossary(novel_id, input, merge):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ—Å—Å–∞—Ä–∏–π –∏–∑ JSON"""
    with app.app_context():
        novel = Novel.query.get(novel_id)
        if not novel:
            click.echo(f"‚ùå –†–æ–º–∞–Ω —Å ID {novel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(input, 'r', encoding='utf-8') as f:
            glossary_data = json.load(f)
        
        if not merge:
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–ª–æ—Å—Å–∞—Ä–∏–π
            cleared = GlossaryService.clear_glossary(novel_id)
            click.echo(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {cleared} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤")
        
        imported = GlossaryService.import_glossary_from_dict(novel_id, glossary_data)
        click.echo(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported} —Ç–µ—Ä–º–∏–Ω–æ–≤")

@cli.command()
@click.option('--target', required=True, type=int, help='ID —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–æ–º–∞–Ω–∞')
@click.option('--sources', required=True, multiple=True, type=int, help='ID —Ä–æ–º–∞–Ω–æ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤')
def merge(target, sources):
    """–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª–æ—Å—Å–∞—Ä–∏–µ–≤"""
    with app.app_context():
        target_novel = Novel.query.get(target)
        if not target_novel:
            click.echo(f"‚ùå –¶–µ–ª–µ–≤–æ–π —Ä–æ–º–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        click.echo(f"üîÄ –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥–ª–æ—Å—Å–∞—Ä–∏–∏ –≤: {target_novel.title}")
        
        merged = GlossaryCopier.merge_glossaries(target, list(sources))
        click.echo(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {merged} —Ç–µ—Ä–º–∏–Ω–æ–≤")

@cli.command()
def list_novels():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–º–∞–Ω–æ–≤ —Å –≥–ª–æ—Å—Å–∞—Ä–∏—è–º–∏"""
    with app.app_context():
        novels = Novel.query.all()
        
        click.echo("üìö –†–æ–º–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for novel in novels:
            stats = GlossaryService.get_term_statistics(novel.id)
            total = stats.get('total', 0)
            if total > 0:
                click.echo(f"  [{novel.id}] {novel.title}: {total} —Ç–µ—Ä–º–∏–Ω–æ–≤")
            else:
                click.echo(f"  [{novel.id}] {novel.title}: –Ω–µ—Ç –≥–ª–æ—Å—Å–∞—Ä–∏—è")

if __name__ == '__main__':
    cli()