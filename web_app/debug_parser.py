#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
"""
import traceback
from app import create_app, db
from app.models import Novel, Chapter, Task
from app.services.parser_service import WebParserService

def debug_parser():
    app = create_app()
    with app.app_context():
        print("üêõ –û–¢–õ–ê–î–ö–ê –ü–ê–†–°–ï–†–ê")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        novel = Novel.query.get(1)
        if not novel:
            print("‚ùå –ù–æ–≤–µ–ª–ª–∞ —Å ID=1 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        print(f"üìñ –ù–æ–≤–µ–ª–ª–∞: {novel.title}")
        print(f"üîó URL: {novel.source_url}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task = Task(
            novel_id=1,
            task_type='parse',
            priority=1,
            status='running',
            progress=0
        )
        db.session.add(task)
        db.session.commit()
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task.id}")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
            print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞...")
            parser = WebParserService()
            print("‚úÖ –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥–ª–∞–≤
            print("\nüîç –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤...")
            chapters_data = parser.parse_novel_chapters(novel)
            
            if not chapters_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤")
                return
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤: {len(chapters_data)}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã
            if chapters_data:
                first_chapter = chapters_data[0]
                print(f"\nüìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥–ª–∞–≤—ã {first_chapter['number']}...")
                
                content = parser.parse_chapter_content(first_chapter['url'], first_chapter['number'])
                if content:
                    print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤—É –≤ –ë–î
                    chapter = Chapter(
                        novel_id=1,
                        chapter_number=first_chapter['number'],
                        original_title=first_chapter['title'],
                        url=first_chapter['url'],
                        original_text=content,
                        status='parsed'
                    )
                    db.session.add(chapter)
                    db.session.commit()
                    print(f"‚úÖ –ì–ª–∞–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {chapter.id}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            task.status = 'completed'
            task.progress = 100
            db.session.commit()
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            print("üìã –ü–æ–ª–Ω—ã–π traceback:")
            traceback.print_exc()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            task.status = 'failed'
            db.session.commit()

if __name__ == "__main__":
    debug_parser() 